
Disco_F407_Link_3032_black.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800fe14  0800fe14  0001fe14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801021c  0801021c  0003015c  2**0
                  CONTENTS
  4 .ARM          00000008  0801021c  0801021c  0002021c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010224  08010224  0003015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010224  08010224  00020224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010228  08010228  00020228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0801022c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003015c  2**0
                  CONTENTS
 10 .bss          00002994  2000015c  2000015c  0003015c  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20002af0  20002af0  0003015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003015c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027ee6  00000000  00000000  000301cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005d83  00000000  00000000  000580b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f00  00000000  00000000  0005de38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017f5  00000000  00000000  0005fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000299da  00000000  00000000  0006152d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002be48  00000000  00000000  0008af07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8f51  00000000  00000000  000b6d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008664  00000000  00000000  0019fca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001a8304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fdfc 	.word	0x0800fdfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800fdfc 	.word	0x0800fdfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	463b      	mov	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800057e:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_ADC1_Init+0x9c>)
 8000580:	4a22      	ldr	r2, [pc, #136]	; (800060c <MX_ADC1_Init+0xa0>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_ADC1_Init+0x9c>)
 8000586:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800058a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_ADC1_Init+0x9c>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_ADC1_Init+0x9c>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_ADC1_Init+0x9c>)
 800059a:	2200      	movs	r2, #0
 800059c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80005ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005b0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005d2:	f001 ffa7 	bl	8002524 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80005dc:	f000 ff3e 	bl	800145c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005e0:	2310      	movs	r3, #16
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_ADC1_Init+0x9c>)
 80005f2:	f002 f909 	bl	8002808 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80005fc:	f000 ff2e 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000178 	.word	0x20000178
 800060c:	40012000 	.word	0x40012000

08000610 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <HAL_ADC_MspInit+0xa4>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d144      	bne.n	80006ac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <HAL_ADC_MspInit+0xa8>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <HAL_ADC_MspInit+0xa8>)
 800062c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000630:	6453      	str	r3, [r2, #68]	; 0x44
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <HAL_ADC_MspInit+0xa8>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000640:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <HAL_ADC_MspInit+0xb0>)
 8000642:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_ADC_MspInit+0xac>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000664:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_ADC_MspInit+0xac>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000680:	480e      	ldr	r0, [pc, #56]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000682:	f002 ffbb 	bl	80035fc <HAL_DMA_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800068c:	f000 fee6 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000694:	639a      	str	r2, [r3, #56]	; 0x38
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <HAL_ADC_MspInit+0xac>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2012      	movs	r0, #18
 80006a2:	f002 ff66 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006a6:	2012      	movs	r0, #18
 80006a8:	f002 ff7f 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40012000 	.word	0x40012000
 80006b8:	40023800 	.word	0x40023800
 80006bc:	200001c0 	.word	0x200001c0
 80006c0:	40026470 	.word	0x40026470

080006c4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_CAN1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_CAN1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_CAN1_Init+0x64>)
 80006d0:	2206      	movs	r2, #6
 80006d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_CAN1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_CAN1_Init+0x64>)
 80006e2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80006e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_CAN1_Init+0x64>)
 80006ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_CAN1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_CAN1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_CAN1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_CAN1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_CAN1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CAN1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_CAN1_Init+0x64>)
 8000716:	f002 fa9f 	bl	8002c58 <HAL_CAN_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 fe9c 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000220 	.word	0x20000220
 800072c:	40006400 	.word	0x40006400

08000730 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_CAN2_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_CAN2_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_CAN2_Init+0x64>)
 800073c:	2206      	movs	r2, #6
 800073e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_CAN2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_CAN2_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_CAN2_Init+0x64>)
 800074e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000752:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_CAN2_Init+0x64>)
 8000756:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800075a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_CAN2_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_CAN2_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_CAN2_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_CAN2_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_CAN2_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_CAN2_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_CAN2_Init+0x64>)
 8000782:	f002 fa69 	bl	8002c58 <HAL_CAN_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 fe66 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000284 	.word	0x20000284
 8000798:	40006800 	.word	0x40006800

0800079c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a62      	ldr	r2, [pc, #392]	; (8000944 <HAL_CAN_MspInit+0x1a8>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d155      	bne.n	800086a <HAL_CAN_MspInit+0xce>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80007be:	4b62      	ldr	r3, [pc, #392]	; (8000948 <HAL_CAN_MspInit+0x1ac>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a60      	ldr	r2, [pc, #384]	; (8000948 <HAL_CAN_MspInit+0x1ac>)
 80007c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007c8:	4b5f      	ldr	r3, [pc, #380]	; (8000948 <HAL_CAN_MspInit+0x1ac>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10d      	bne.n	80007ec <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	4b5d      	ldr	r3, [pc, #372]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a5c      	ldr	r2, [pc, #368]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	4b56      	ldr	r3, [pc, #344]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	4a55      	ldr	r2, [pc, #340]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	6313      	str	r3, [r2, #48]	; 0x30
 80007fc:	4b53      	ldr	r3, [pc, #332]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000808:	2303      	movs	r3, #3
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000818:	2309      	movs	r3, #9
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	484b      	ldr	r0, [pc, #300]	; (8000950 <HAL_CAN_MspInit+0x1b4>)
 8000824:	f003 fb58 	bl	8003ed8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2013      	movs	r0, #19
 800082e:	f002 fea0 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000832:	2013      	movs	r0, #19
 8000834:	f002 feb9 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2014      	movs	r0, #20
 800083e:	f002 fe98 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000842:	2014      	movs	r0, #20
 8000844:	f002 feb1 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2015      	movs	r0, #21
 800084e:	f002 fe90 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000852:	2015      	movs	r0, #21
 8000854:	f002 fea9 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2016      	movs	r0, #22
 800085e:	f002 fe88 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000862:	2016      	movs	r0, #22
 8000864:	f002 fea1 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000868:	e068      	b.n	800093c <HAL_CAN_MspInit+0x1a0>
  else if(canHandle->Instance==CAN2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a39      	ldr	r2, [pc, #228]	; (8000954 <HAL_CAN_MspInit+0x1b8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d163      	bne.n	800093c <HAL_CAN_MspInit+0x1a0>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	4b34      	ldr	r3, [pc, #208]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a33      	ldr	r2, [pc, #204]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 800087e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <HAL_CAN_MspInit+0x1ac>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a2c      	ldr	r2, [pc, #176]	; (8000948 <HAL_CAN_MspInit+0x1ac>)
 8000898:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <HAL_CAN_MspInit+0x1ac>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10d      	bne.n	80008be <HAL_CAN_MspInit+0x122>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a28      	ldr	r2, [pc, #160]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80008ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a21      	ldr	r2, [pc, #132]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <HAL_CAN_MspInit+0x1b0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80008ec:	2309      	movs	r3, #9
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4818      	ldr	r0, [pc, #96]	; (8000958 <HAL_CAN_MspInit+0x1bc>)
 80008f8:	f003 faee 	bl	8003ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	203f      	movs	r0, #63	; 0x3f
 8000902:	f002 fe36 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000906:	203f      	movs	r0, #63	; 0x3f
 8000908:	f002 fe4f 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2040      	movs	r0, #64	; 0x40
 8000912:	f002 fe2e 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000916:	2040      	movs	r0, #64	; 0x40
 8000918:	f002 fe47 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2041      	movs	r0, #65	; 0x41
 8000922:	f002 fe26 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000926:	2041      	movs	r0, #65	; 0x41
 8000928:	f002 fe3f 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2042      	movs	r0, #66	; 0x42
 8000932:	f002 fe1e 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000936:	2042      	movs	r0, #66	; 0x42
 8000938:	f002 fe37 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40006400 	.word	0x40006400
 8000948:	200002e8 	.word	0x200002e8
 800094c:	40023800 	.word	0x40023800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40006800 	.word	0x40006800
 8000958:	40020400 	.word	0x40020400

0800095c <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream0
  *   hdma_memtomem_dma2_stream5
  *   hdma_memtomem_dma2_stream3
  */
void MX_DMA_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b74      	ldr	r3, [pc, #464]	; (8000b38 <MX_DMA_Init+0x1dc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a73      	ldr	r2, [pc, #460]	; (8000b38 <MX_DMA_Init+0x1dc>)
 800096c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b71      	ldr	r3, [pc, #452]	; (8000b38 <MX_DMA_Init+0x1dc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b6d      	ldr	r3, [pc, #436]	; (8000b38 <MX_DMA_Init+0x1dc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a6c      	ldr	r2, [pc, #432]	; (8000b38 <MX_DMA_Init+0x1dc>)
 8000988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b6a      	ldr	r3, [pc, #424]	; (8000b38 <MX_DMA_Init+0x1dc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800099a:	4b68      	ldr	r3, [pc, #416]	; (8000b3c <MX_DMA_Init+0x1e0>)
 800099c:	4a68      	ldr	r2, [pc, #416]	; (8000b40 <MX_DMA_Init+0x1e4>)
 800099e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80009a0:	4b66      	ldr	r3, [pc, #408]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80009a6:	4b65      	ldr	r3, [pc, #404]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80009ac:	4b63      	ldr	r3, [pc, #396]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80009b4:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ba:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009bc:	4b5f      	ldr	r3, [pc, #380]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c2:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80009c8:	4b5c      	ldr	r3, [pc, #368]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009ce:	4b5b      	ldr	r3, [pc, #364]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009d4:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009d6:	4b59      	ldr	r3, [pc, #356]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009d8:	2204      	movs	r2, #4
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009dc:	4b57      	ldr	r3, [pc, #348]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009de:	2203      	movs	r2, #3
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80009e2:	4b56      	ldr	r3, [pc, #344]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009e8:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80009ee:	4853      	ldr	r0, [pc, #332]	; (8000b3c <MX_DMA_Init+0x1e0>)
 80009f0:	f002 fe04 	bl	80035fc <HAL_DMA_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_DMA_Init+0xa2>
  {
    Error_Handler();
 80009fa:	f000 fd2f 	bl	800145c <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 80009fe:	4b51      	ldr	r3, [pc, #324]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a00:	4a51      	ldr	r2, [pc, #324]	; (8000b48 <MX_DMA_Init+0x1ec>)
 8000a02:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Channel = DMA_CHANNEL_0;
 8000a04:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a0a:	4b4e      	ldr	r3, [pc, #312]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 8000a10:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a16:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a20:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a26:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a28:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 8000a30:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_HIGH;
 8000a36:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a3c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a50:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 8000a56:	483b      	ldr	r0, [pc, #236]	; (8000b44 <MX_DMA_Init+0x1e8>)
 8000a58:	f002 fdd0 	bl	80035fc <HAL_DMA_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_DMA_Init+0x10a>
  {
    Error_Handler();
 8000a62:	f000 fcfb 	bl	800145c <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a68:	4a39      	ldr	r2, [pc, #228]	; (8000b50 <MX_DMA_Init+0x1f4>)
 8000a6a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Channel = DMA_CHANNEL_0;
 8000a6c:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8000a78:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a86:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a96:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000aa0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa4:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000aae:	2203      	movs	r2, #3
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8000abe:	4823      	ldr	r0, [pc, #140]	; (8000b4c <MX_DMA_Init+0x1f0>)
 8000ac0:	f002 fd9c 	bl	80035fc <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_DMA_Init+0x172>
  {
    Error_Handler();
 8000aca:	f000 fcc7 	bl	800145c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200d      	movs	r0, #13
 8000ad4:	f002 fd4d 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ad8:	200d      	movs	r0, #13
 8000ada:	f002 fd66 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2010      	movs	r0, #16
 8000ae4:	f002 fd45 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ae8:	2010      	movs	r0, #16
 8000aea:	f002 fd5e 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2011      	movs	r0, #17
 8000af4:	f002 fd3d 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000af8:	2011      	movs	r0, #17
 8000afa:	f002 fd56 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2038      	movs	r0, #56	; 0x38
 8000b04:	f002 fd35 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b08:	2038      	movs	r0, #56	; 0x38
 8000b0a:	f002 fd4e 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2039      	movs	r0, #57	; 0x39
 8000b14:	f002 fd2d 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b18:	2039      	movs	r0, #57	; 0x39
 8000b1a:	f002 fd46 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	203c      	movs	r0, #60	; 0x3c
 8000b24:	f002 fd25 	bl	8003572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b28:	203c      	movs	r0, #60	; 0x3c
 8000b2a:	f002 fd3e 	bl	80035aa <HAL_NVIC_EnableIRQ>

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	200002ec 	.word	0x200002ec
 8000b40:	40026410 	.word	0x40026410
 8000b44:	2000034c 	.word	0x2000034c
 8000b48:	40026488 	.word	0x40026488
 8000b4c:	200003ac 	.word	0x200003ac
 8000b50:	40026458 	.word	0x40026458

08000b54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0310 	and.w	r3, r3, #16
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a45      	ldr	r2, [pc, #276]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b43      	ldr	r3, [pc, #268]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2101      	movs	r1, #1
 8000c16:	4832      	ldr	r0, [pc, #200]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000c18:	f003 fafa 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	21c0      	movs	r1, #192	; 0xc0
 8000c20:	4830      	ldr	r0, [pc, #192]	; (8000ce4 <MX_GPIO_Init+0x190>)
 8000c22:	f003 faf5 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c2c:	482e      	ldr	r0, [pc, #184]	; (8000ce8 <MX_GPIO_Init+0x194>)
 8000c2e:	f003 faef 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|Encoder_Key_Pin;
 8000c32:	2398      	movs	r3, #152	; 0x98
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4829      	ldr	r0, [pc, #164]	; (8000cec <MX_GPIO_Init+0x198>)
 8000c46:	f003 f947 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481f      	ldr	r0, [pc, #124]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000c62:	f003 f939 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <MX_GPIO_Init+0x190>)
 8000c7c:	f003 f92c 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c80:	23c0      	movs	r3, #192	; 0xc0
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_GPIO_Init+0x190>)
 8000c98:	f003 f91e 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <MX_GPIO_Init+0x19c>)
 8000cb0:	f003 f912 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000cb4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_GPIO_Init+0x194>)
 8000cce:	f003 f903 	bl	8003ed8 <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020c00 	.word	0x40020c00
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <MX_I2C1_Init+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x58>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d32:	f003 faa1 	bl	8004278 <HAL_I2C_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d3c:	f000 fb8e 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000040c 	.word	0x2000040c
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	00061a80 	.word	0x00061a80

08000d50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <HAL_I2C_MspInit+0xa4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d13c      	bne.n	8000dec <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_I2C_MspInit+0xa8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_I2C_MspInit+0xa8>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_I2C_MspInit+0xa8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d94:	2312      	movs	r3, #18
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da0:	2304      	movs	r3, #4
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4814      	ldr	r0, [pc, #80]	; (8000dfc <HAL_I2C_MspInit+0xac>)
 8000dac:	f003 f894 	bl	8003ed8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_I2C_MspInit+0xa8>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <HAL_I2C_MspInit+0xa8>)
 8000dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_I2C_MspInit+0xa8>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	201f      	movs	r0, #31
 8000dd2:	f002 fbce 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000dd6:	201f      	movs	r0, #31
 8000dd8:	f002 fbe7 	bl	80035aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2020      	movs	r0, #32
 8000de2:	f002 fbc6 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000de6:	2020      	movs	r0, #32
 8000de8:	f002 fbdf 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020400 	.word	0x40020400

08000e00 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    if (htim == &htim4)
    		{
    		//canopen_app_interrupt();
    		}

}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f001 faaf 	bl	800237c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f8c7 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f7ff fe97 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e26:	f7ff fd99 	bl	800095c <MX_DMA_Init>
  MX_TIM14_Init();
 8000e2a:	f000 ff19 	bl	8001c60 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8000e2e:	f001 f93d 	bl	80020ac <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000e32:	f00d fb13 	bl	800e45c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000e36:	f001 f963 	bl	8002100 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000e3a:	f000 fdef 	bl	8001a1c <MX_TIM4_Init>
  MX_CAN1_Init();
 8000e3e:	f7ff fc41 	bl	80006c4 <MX_CAN1_Init>
  MX_RTC_Init();
 8000e42:	f000 fb11 	bl	8001468 <MX_RTC_Init>
  MX_TIM6_Init();
 8000e46:	f000 fe85 	bl	8001b54 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000e4a:	f7ff fb8f 	bl	800056c <MX_ADC1_Init>
  MX_TIM8_Init();
 8000e4e:	f000 feb7 	bl	8001bc0 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000e52:	f7ff ff4f 	bl	8000cf4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e56:	f000 fd8d 	bl	8001974 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e5a:	f000 fd3f 	bl	80018dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000e5e:	f000 fe2b 	bl	8001ab8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000e62:	f000 fce3 	bl	800182c <MX_TIM1_Init>
  MX_CAN2_Init();
 8000e66:	f7ff fc63 	bl	8000730 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  //	HAL_RTC_SetTime(&hrtc, &sTime,        RTC_FORMAT_BIN);
  //	HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
  HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4944      	ldr	r1, [pc, #272]	; (8000f80 <main+0x16c>)
 8000e6e:	4845      	ldr	r0, [pc, #276]	; (8000f84 <main+0x170>)
 8000e70:	f007 fc22 	bl	80086b8 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &sTime,        RTC_FORMAT_BIN);
 8000e74:	2200      	movs	r2, #0
 8000e76:	4944      	ldr	r1, [pc, #272]	; (8000f88 <main+0x174>)
 8000e78:	4842      	ldr	r0, [pc, #264]	; (8000f84 <main+0x170>)
 8000e7a:	f007 fbbf 	bl	80085fc <HAL_RTC_GetTime>

  Encoder_Config();  // configure the encoders timer
 8000e7e:	f00e f83b 	bl	800eef8 <Encoder_Config>
  Encoder_Init();    // start the encoders timer
 8000e82:	f00d ffd9 	bl	800ee38 <Encoder_Init>
  LCD_ini();
 8000e86:	f00e fa67 	bl	800f358 <LCD_ini>
  // Logo_to_1602LCD();
  Datum_to_1602LCD();
 8000e8a:	f00e fabb 	bl	800f404 <Datum_to_1602LCD>
  //GPIO_Blink_Test(GPIOA, GPIO_PIN_7|GPIO_PIN_6, 25, 33); 						// for_STM32F4XX_Ali_pcb
   GPIO_Blink_Test(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, 25, 33);// blink_at_Discovery_EVB
 8000e8e:	2321      	movs	r3, #33	; 0x21
 8000e90:	2219      	movs	r2, #25
 8000e92:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e96:	483d      	ldr	r0, [pc, #244]	; (8000f8c <main+0x178>)
 8000e98:	f00e f8c8 	bl	800f02c <GPIO_Blink_Test>
  //UART_interface_Test(); //while(1){;}
  //CAN_interface_Test();
  HAL_TIM_Base_Start(&htim8);
 8000e9c:	483c      	ldr	r0, [pc, #240]	; (8000f90 <main+0x17c>)
 8000e9e:	f007 fdb1 	bl	8008a04 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000ea2:	483c      	ldr	r0, [pc, #240]	; (8000f94 <main+0x180>)
 8000ea4:	f007 fe16 	bl	8008ad4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, Array_from_Terminal, sizeof Array_from_Terminal );
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	493b      	ldr	r1, [pc, #236]	; (8000f98 <main+0x184>)
 8000eac:	483b      	ldr	r0, [pc, #236]	; (8000f9c <main+0x188>)
 8000eae:	f008 fd7d 	bl	80099ac <HAL_UART_Receive_DMA>
  //HAL_Delay(1500);
  Board_Name_to_Terminal();
 8000eb2:	f000 f8e9 	bl	8001088 <Board_Name_to_Terminal>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f001 fad2 	bl	8002460 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);//Green
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec2:	4832      	ldr	r0, [pc, #200]	; (8000f8c <main+0x178>)
 8000ec4:	f003 f9a4 	bl	8004210 <HAL_GPIO_WritePin>

 Local_Count=0;
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <main+0x18c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
Ticks = HAL_GetTick();
 8000ece:	f001 fabb 	bl	8002448 <HAL_GetTick>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <main+0x190>)
 8000ed6:	6013      	str	r3, [r2, #0]
Ticks_2 = HAL_GetTick();
 8000ed8:	f001 fab6 	bl	8002448 <HAL_GetTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <main+0x194>)
 8000ee0:	6013      	str	r3, [r2, #0]

DWT->CTRL |= 1 ; // Enable_the_Counter_of_Core_circles
 8000ee2:	4b32      	ldr	r3, [pc, #200]	; (8000fac <main+0x198>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a31      	ldr	r2, [pc, #196]	; (8000fac <main+0x198>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6013      	str	r3, [r2, #0]

//**********************************************************************************************
Ticks_2=HAL_GetTick();
 8000eee:	f001 faab 	bl	8002448 <HAL_GetTick>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <main+0x194>)
 8000ef6:	6013      	str	r3, [r2, #0]
do
{

}while (HAL_GetTick() - Ticks_2<500);
 8000ef8:	f001 faa6 	bl	8002448 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <main+0x194>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f08:	d3f6      	bcc.n	8000ef8 <main+0xe4>

#if 1
uint32_t Delta_T[4]={0};/////Measurement_of_duration_canopen_app_process();
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
#endif

//**********************************************************************************************
Local_Count=0;
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <main+0x18c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
Ticks_2=HAL_GetTick();
 8000f1c:	f001 fa94 	bl	8002448 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <main+0x194>)
 8000f24:	6013      	str	r3, [r2, #0]
 while (1)		/// 	while (HAL_GetTick() - Ticks_2<4123) //   	while (HAL_GetTick() - Ticks_2<5123)	///
	{
			switch (Local_Count)
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <main+0x18c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d81a      	bhi.n	8000f64 <main+0x150>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <main+0x120>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f4d 	.word	0x08000f4d
 8000f3c:	08000f55 	.word	0x08000f55
 8000f40:	08000f5d 	.word	0x08000f5d
				{
				case 0:
//																			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET );
					Local_Count=1;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <main+0x18c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
					break;
 8000f4a:	e00f      	b.n	8000f6c <main+0x158>
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET );
//					DWT->CYCCNT = 0; // reset the counter
//					canopen_app_process();
//					Delta_T[1]= DWT->CYCCNT;
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET );
					Local_Count=2;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <main+0x18c>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	701a      	strb	r2, [r3, #0]
					break;
 8000f52:	e00b      	b.n	8000f6c <main+0x158>
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET );
//					DWT->CYCCNT = 0; // reset the counter
//					canopen_app_process();
//					Delta_T[2]= DWT->CYCCNT;
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET );
					Local_Count=3;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <main+0x18c>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
					break;
 8000f5a:	e007      	b.n	8000f6c <main+0x158>
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET );
//					DWT->CYCCNT = 0; // reset the counter
//					canopen_app_process();
//					Delta_T[3]= DWT->CYCCNT;
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET );
					Local_Count=0;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <main+0x18c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
					break;
 8000f62:	e003      	b.n	8000f6c <main+0x158>

				default:
					Local_Count=0;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <main+0x18c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
					break;
 8000f6a:	bf00      	nop
		}///switch (Local_Count)

		HAL_Delay(4);
 8000f6c:	2004      	movs	r0, #4
 8000f6e:	f001 fa77 	bl	8002460 <HAL_Delay>
		Encoder_to_LCD();
 8000f72:	f000 f9b5 	bl	80012e0 <Encoder_to_LCD>
		RTC_update_and_Terminal(1999);
 8000f76:	f240 70cf 	movw	r0, #1999	; 0x7cf
 8000f7a:	f00e f80f 	bl	800ef9c <RTC_update_and_Terminal>
			switch (Local_Count)
 8000f7e:	e7d2      	b.n	8000f26 <main+0x112>
 8000f80:	20000490 	.word	0x20000490
 8000f84:	2000055c 	.word	0x2000055c
 8000f88:	20000494 	.word	0x20000494
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	200009b8 	.word	0x200009b8
 8000f94:	2000079c 	.word	0x2000079c
 8000f98:	200004a8 	.word	0x200004a8
 8000f9c:	20000c54 	.word	0x20000c54
 8000fa0:	20000528 	.word	0x20000528
 8000fa4:	2000052c 	.word	0x2000052c
 8000fa8:	20000530 	.word	0x20000530
 8000fac:	e0001000 	.word	0xe0001000

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	; 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00e fa98 	bl	800f4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <SystemClock_Config+0xd0>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <SystemClock_Config+0xd0>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <SystemClock_Config+0xd0>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <SystemClock_Config+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a22      	ldr	r2, [pc, #136]	; (8001084 <SystemClock_Config+0xd4>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <SystemClock_Config+0xd4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800100c:	2305      	movs	r3, #5
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001016:	2301      	movs	r3, #1
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001028:	23a8      	movs	r3, #168	; 0xa8
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001030:	2307      	movs	r3, #7
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fcef 	bl	8007a1c <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001044:	f000 fa0a 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001054:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2105      	movs	r1, #5
 8001066:	4618      	mov	r0, r3
 8001068:	f006 ff50 	bl	8007f0c <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001072:	f000 f9f3 	bl	800145c <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	; 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <Board_Name_to_Terminal>:



//////////////////////////////////////////////////
void Board_Name_to_Terminal(void)
{
 8001088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800108c:	b0bf      	sub	sp, #252	; 0xfc
 800108e:	af04      	add	r7, sp, #16
	const char Message_0[]={"   ******************************************\n\r"};
 8001090:	4b8b      	ldr	r3, [pc, #556]	; (80012c0 <Board_Name_to_Terminal+0x238>)
 8001092:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001096:	461d      	mov	r5, r3
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	const char Message_1[]={"*  Upper Blackboard  STM32F4XX___Ali     *\n\r"};
//	const char Message_2[]={"*  Lower Blackboard  STM32F4XX___Ali     *\n\r"};
//	const char Message_3[]={"*  STM32F4DISCOVERY Green_board China    *\n\r"};
	const char Message_3[]={"*  STM32F4DISCO Greenboard_STLINK_4323   *\n\r"};
 80010a8:	4b86      	ldr	r3, [pc, #536]	; (80012c4 <Board_Name_to_Terminal+0x23c>)
 80010aa:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010bc:	c407      	stmia	r4!, {r0, r1, r2}
 80010be:	7023      	strb	r3, [r4, #0]
//	const char Message_3[]={"*  STM32F4DISCO Greenboard_STLINK_2734   *\n\r"};
//	const char Message_4[]={"*  STM32F4DISCOVERY Blue_board Original  *\n\r"};
//	const char Message_5[]={"*       *\n\r"};
	char Array_for_Messages[128]={};
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	227c      	movs	r2, #124	; 0x7c
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00e fa11 	bl	800f4f4 <memset>

//	Chip_ID_96bit[0] = HAL_GetUIDw0();
//	Chip_ID_96bit[1] = HAL_GetUIDw1();
//	Chip_ID_96bit[2] = HAL_GetUIDw2();

	Msg_Length = sizeof(Message_0);
 80010d2:	2330      	movs	r3, #48	; 0x30
 80010d4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 80010d8:	bf00      	nop
 80010da:	4b7b      	ldr	r3, [pc, #492]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 80010dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d1f9      	bne.n	80010da <Board_Name_to_Terminal+0x52>
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Message_0, Msg_Length);
 80010e6:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 80010ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4875      	ldr	r0, [pc, #468]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 80010f2:	f008 fbdd 	bl	80098b0 <HAL_UART_Transmit_DMA>
////	HAL_UART_Transmit( &TerminalInterface, (uint8_t*)Message_0, Msg_Length,1);

	Msg_Length = sizeof(Message_3);
 80010f6:	232d      	movs	r3, #45	; 0x2d
 80010f8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 80010fc:	bf00      	nop
 80010fe:	4b72      	ldr	r3, [pc, #456]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 8001100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b20      	cmp	r3, #32
 8001108:	d1f9      	bne.n	80010fe <Board_Name_to_Terminal+0x76>
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Message_3, Msg_Length);
 800110a:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 800110e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001112:	4619      	mov	r1, r3
 8001114:	486c      	ldr	r0, [pc, #432]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 8001116:	f008 fbcb 	bl	80098b0 <HAL_UART_Transmit_DMA>
////	HAL_UART_Transmit( &TerminalInterface, (uint8_t*)Message_3, Msg_Length,1);

	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 800111a:	bf00      	nop
 800111c:	4b6a      	ldr	r3, [pc, #424]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 800111e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b20      	cmp	r3, #32
 8001126:	d1f9      	bne.n	800111c <Board_Name_to_Terminal+0x94>
	Msg_Length = sprintf( Array_for_Messages,
			  	  	  	  "*  SystemClock = %d MHz                 *\n\r",
						  (uint16_t)(HAL_RCC_GetSysClockFreq()/1000000)
 8001128:	f006 ffd6 	bl	80080d8 <HAL_RCC_GetSysClockFreq>
 800112c:	4603      	mov	r3, r0
 800112e:	4a67      	ldr	r2, [pc, #412]	; (80012cc <Board_Name_to_Terminal+0x244>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	0c9b      	lsrs	r3, r3, #18
 8001136:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 8001138:	461a      	mov	r2, r3
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4964      	ldr	r1, [pc, #400]	; (80012d0 <Board_Name_to_Terminal+0x248>)
 800113e:	4618      	mov	r0, r3
 8001140:	f00e f9b8 	bl	800f4b4 <siprintf>
 8001144:	4603      	mov	r3, r0
 8001146:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
						);
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Array_for_Messages, Msg_Length);
 800114a:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	485d      	ldr	r0, [pc, #372]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 8001154:	f008 fbac 	bl	80098b0 <HAL_UART_Transmit_DMA>
////	HAL_UART_Transmit( &TerminalInterface, (uint8_t*)Array_for_Messages, Msg_Length,1);

	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 8001158:	bf00      	nop
 800115a:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 800115c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b20      	cmp	r3, #32
 8001164:	d1f9      	bne.n	800115a <Board_Name_to_Terminal+0xd2>
	Msg_Length = sprintf( Array_for_Messages,
			  	  	  	  "   *  Unical_ID %X%X%X%X%X%X        *\n\r",
						  (uint16_t)(HAL_GetUIDw2()>>16),(uint16_t)(HAL_GetUIDw2() & 0x0000FFFF),
 8001166:	f001 f9d1 	bl	800250c <HAL_GetUIDw2>
 800116a:	4603      	mov	r3, r0
 800116c:	0c1b      	lsrs	r3, r3, #16
 800116e:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 8001170:	4698      	mov	r8, r3
						  (uint16_t)(HAL_GetUIDw2()>>16),(uint16_t)(HAL_GetUIDw2() & 0x0000FFFF),
 8001172:	f001 f9cb 	bl	800250c <HAL_GetUIDw2>
 8001176:	4603      	mov	r3, r0
 8001178:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 800117a:	4699      	mov	r9, r3
						  (uint16_t)(HAL_GetUIDw1()>>16),(uint16_t)(HAL_GetUIDw1() & 0x0000FFFF),
 800117c:	f001 f9ba 	bl	80024f4 <HAL_GetUIDw1>
 8001180:	4603      	mov	r3, r0
 8001182:	0c1b      	lsrs	r3, r3, #16
 8001184:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 8001186:	461c      	mov	r4, r3
						  (uint16_t)(HAL_GetUIDw1()>>16),(uint16_t)(HAL_GetUIDw1() & 0x0000FFFF),
 8001188:	f001 f9b4 	bl	80024f4 <HAL_GetUIDw1>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 8001190:	461d      	mov	r5, r3
						  (uint16_t)(HAL_GetUIDw0()>>16),(uint16_t)(HAL_GetUIDw0() & 0x0000FFFF)
 8001192:	f001 f9a3 	bl	80024dc <HAL_GetUIDw0>
 8001196:	4603      	mov	r3, r0
 8001198:	0c1b      	lsrs	r3, r3, #16
 800119a:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 800119c:	461e      	mov	r6, r3
						  (uint16_t)(HAL_GetUIDw0()>>16),(uint16_t)(HAL_GetUIDw0() & 0x0000FFFF)
 800119e:	f001 f99d 	bl	80024dc <HAL_GetUIDw0>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 80011a6:	1d38      	adds	r0, r7, #4
 80011a8:	9303      	str	r3, [sp, #12]
 80011aa:	9602      	str	r6, [sp, #8]
 80011ac:	9501      	str	r5, [sp, #4]
 80011ae:	9400      	str	r4, [sp, #0]
 80011b0:	464b      	mov	r3, r9
 80011b2:	4642      	mov	r2, r8
 80011b4:	4947      	ldr	r1, [pc, #284]	; (80012d4 <Board_Name_to_Terminal+0x24c>)
 80011b6:	f00e f97d 	bl	800f4b4 <siprintf>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6

						);
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Array_for_Messages, Msg_Length);
 80011c0:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	483f      	ldr	r0, [pc, #252]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 80011ca:	f008 fb71 	bl	80098b0 <HAL_UART_Transmit_DMA>

	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 80011ce:	bf00      	nop
 80011d0:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 80011d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b20      	cmp	r3, #32
 80011da:	d1f9      	bne.n	80011d0 <Board_Name_to_Terminal+0x148>
	Msg_Length = sprintf( Array_for_Messages,
			  	  	  	  "   *  Device identifier %X%X                *\n\r",
						  (uint16_t)(HAL_GetDEVID()>>16), (uint16_t)(HAL_GetDEVID() & 0x0000FFFF)
 80011dc:	f001 f970 	bl	80024c0 <HAL_GetDEVID>
 80011e0:	4603      	mov	r3, r0
 80011e2:	0c1b      	lsrs	r3, r3, #16
 80011e4:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 80011e6:	461c      	mov	r4, r3
						  (uint16_t)(HAL_GetDEVID()>>16), (uint16_t)(HAL_GetDEVID() & 0x0000FFFF)
 80011e8:	f001 f96a 	bl	80024c0 <HAL_GetDEVID>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 80011f0:	1d38      	adds	r0, r7, #4
 80011f2:	4622      	mov	r2, r4
 80011f4:	4938      	ldr	r1, [pc, #224]	; (80012d8 <Board_Name_to_Terminal+0x250>)
 80011f6:	f00e f95d 	bl	800f4b4 <siprintf>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
						);
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Array_for_Messages, Msg_Length);
 8001200:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	482f      	ldr	r0, [pc, #188]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 800120a:	f008 fb51 	bl	80098b0 <HAL_UART_Transmit_DMA>

	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 800120e:	bf00      	nop
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 8001212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b20      	cmp	r3, #32
 800121a:	d1f9      	bne.n	8001210 <Board_Name_to_Terminal+0x188>
	Msg_Length = sprintf( Array_for_Messages,
			  	  	  	  "   *  Device revision identifier %X%X      *\n\r",
						  (uint16_t)( HAL_GetREVID()>>16 ),
 800121c:	f001 f944 	bl	80024a8 <HAL_GetREVID>
 8001220:	4603      	mov	r3, r0
 8001222:	0c1b      	lsrs	r3, r3, #16
 8001224:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 8001226:	461c      	mov	r4, r3
						  (uint16_t)( HAL_GetREVID() & 0x0000FFFF )
 8001228:	f001 f93e 	bl	80024a8 <HAL_GetREVID>
 800122c:	4603      	mov	r3, r0
 800122e:	b29b      	uxth	r3, r3
	Msg_Length = sprintf( Array_for_Messages,
 8001230:	1d38      	adds	r0, r7, #4
 8001232:	4622      	mov	r2, r4
 8001234:	4929      	ldr	r1, [pc, #164]	; (80012dc <Board_Name_to_Terminal+0x254>)
 8001236:	f00e f93d 	bl	800f4b4 <siprintf>
 800123a:	4603      	mov	r3, r0
 800123c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
						);
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Array_for_Messages, Msg_Length);
 8001240:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	481f      	ldr	r0, [pc, #124]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 800124a:	f008 fb31 	bl	80098b0 <HAL_UART_Transmit_DMA>

	Msg_Length = sizeof(Message_0);
 800124e:	2330      	movs	r3, #48	; 0x30
 8001250:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 8001254:	bf00      	nop
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 8001258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b20      	cmp	r3, #32
 8001260:	d1f9      	bne.n	8001256 <Board_Name_to_Terminal+0x1ce>
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)Message_0, Msg_Length);
 8001262:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8001266:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800126a:	4619      	mov	r1, r3
 800126c:	4816      	ldr	r0, [pc, #88]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 800126e:	f008 fb1f 	bl	80098b0 <HAL_UART_Transmit_DMA>

	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 8001272:	bf00      	nop
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 8001276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b20      	cmp	r3, #32
 800127e:	d1f9      	bne.n	8001274 <Board_Name_to_Terminal+0x1ec>
	Array_for_Messages[0]=0x0a;		Array_for_Messages[1]=0x0d;
 8001280:	230a      	movs	r3, #10
 8001282:	713b      	strb	r3, [r7, #4]
 8001284:	230d      	movs	r3, #13
 8001286:	717b      	strb	r3, [r7, #5]
	Array_for_Messages[2]=0x0a;		Array_for_Messages[3]=0x0d;
 8001288:	230a      	movs	r3, #10
 800128a:	71bb      	strb	r3, [r7, #6]
 800128c:	230d      	movs	r3, #13
 800128e:	71fb      	strb	r3, [r7, #7]
	Array_for_Messages[4]=0x0a;		Array_for_Messages[5]=0x0d;
 8001290:	230a      	movs	r3, #10
 8001292:	723b      	strb	r3, [r7, #8]
 8001294:	230d      	movs	r3, #13
 8001296:	727b      	strb	r3, [r7, #9]
	HAL_UART_Transmit_DMA( &TerminalInterface, (uint8_t*)(Array_for_Messages), 6);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2206      	movs	r2, #6
 800129c:	4619      	mov	r1, r3
 800129e:	480a      	ldr	r0, [pc, #40]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 80012a0:	f008 fb06 	bl	80098b0 <HAL_UART_Transmit_DMA>
	while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 80012a4:	bf00      	nop
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <Board_Name_to_Terminal+0x240>)
 80012a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	d1f9      	bne.n	80012a6 <Board_Name_to_Terminal+0x21e>
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	37ec      	adds	r7, #236	; 0xec
 80012b8:	46bd      	mov	sp, r7
 80012ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012be:	bf00      	nop
 80012c0:	0800ff18 	.word	0x0800ff18
 80012c4:	0800ff48 	.word	0x0800ff48
 80012c8:	20000c54 	.word	0x20000c54
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	0800fe64 	.word	0x0800fe64
 80012d4:	0800fe90 	.word	0x0800fe90
 80012d8:	0800feb8 	.word	0x0800feb8
 80012dc:	0800fee8 	.word	0x0800fee8

080012e0 <Encoder_to_LCD>:

/////////////////////////////////////////////////////////////////////

  int16_t Encoder_to_LCD(void)
  {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
		encoderStatus = Encoder_Get_Status();
 80012e4:	f00d fde0 	bl	800eea8 <Encoder_Get_Status>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b52      	ldr	r3, [pc, #328]	; (8001438 <Encoder_to_LCD+0x158>)
 80012ee:	701a      	strb	r2, [r3, #0]

		  switch(encoderStatus) {
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <Encoder_to_LCD+0x158>)
 80012f2:	f993 3000 	ldrsb.w	r3, [r3]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d009      	beq.n	800130e <Encoder_to_LCD+0x2e>
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	f300 8091 	bgt.w	8001422 <Encoder_to_LCD+0x142>
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d048      	beq.n	8001398 <Encoder_to_LCD+0xb8>
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 808d 	beq.w	8001426 <Encoder_to_LCD+0x146>
		      break;

		    case Neutral:

		    	break;
		    default: break;
 800130c:	e089      	b.n	8001422 <Encoder_to_LCD+0x142>
		    	currCounter++;
 800130e:	4b4b      	ldr	r3, [pc, #300]	; (800143c <Encoder_to_LCD+0x15c>)
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	b29b      	uxth	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b47      	ldr	r3, [pc, #284]	; (800143c <Encoder_to_LCD+0x15c>)
 800131e:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET  );
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001326:	4846      	ldr	r0, [pc, #280]	; (8001440 <Encoder_to_LCD+0x160>)
 8001328:	f002 ff72 	bl	8004210 <HAL_GPIO_WritePin>
				sprintf(String_LCD,"%04d",currCounter);
 800132c:	4b43      	ldr	r3, [pc, #268]	; (800143c <Encoder_to_LCD+0x15c>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	461a      	mov	r2, r3
 8001334:	4943      	ldr	r1, [pc, #268]	; (8001444 <Encoder_to_LCD+0x164>)
 8001336:	4844      	ldr	r0, [pc, #272]	; (8001448 <Encoder_to_LCD+0x168>)
 8001338:	f00e f8bc 	bl	800f4b4 <siprintf>
				LCD_SetPos(11, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	200b      	movs	r0, #11
 8001340:	f00d ffb4 	bl	800f2ac <LCD_SetPos>
				HAL_Delay(10);
 8001344:	200a      	movs	r0, #10
 8001346:	f001 f88b 	bl	8002460 <HAL_Delay>
				LCD_String(String_LCD);HAL_Delay(10);
 800134a:	483f      	ldr	r0, [pc, #252]	; (8001448 <Encoder_to_LCD+0x168>)
 800134c:	f00d ff90 	bl	800f270 <LCD_String>
 8001350:	200a      	movs	r0, #10
 8001352:	f001 f885 	bl	8002460 <HAL_Delay>
				L_str=	snprintf(buff, sizeof(buff), "\n\r %04d ", currCounter);
 8001356:	4b39      	ldr	r3, [pc, #228]	; (800143c <Encoder_to_LCD+0x15c>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	4a3b      	ldr	r2, [pc, #236]	; (800144c <Encoder_to_LCD+0x16c>)
 800135e:	2110      	movs	r1, #16
 8001360:	483b      	ldr	r0, [pc, #236]	; (8001450 <Encoder_to_LCD+0x170>)
 8001362:	f00e f873 	bl	800f44c <sniprintf>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <Encoder_to_LCD+0x174>)
 800136c:	801a      	strh	r2, [r3, #0]
				while(TerminalInterface.gState != HAL_UART_STATE_READY ){;}
 800136e:	bf00      	nop
 8001370:	4b39      	ldr	r3, [pc, #228]	; (8001458 <Encoder_to_LCD+0x178>)
 8001372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b20      	cmp	r3, #32
 800137a:	d1f9      	bne.n	8001370 <Encoder_to_LCD+0x90>
				HAL_UART_Transmit_IT(&TerminalInterface, (uint8_t*)buff, L_str);
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <Encoder_to_LCD+0x174>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4933      	ldr	r1, [pc, #204]	; (8001450 <Encoder_to_LCD+0x170>)
 8001384:	4834      	ldr	r0, [pc, #208]	; (8001458 <Encoder_to_LCD+0x178>)
 8001386:	f008 fa4d 	bl	8009824 <HAL_UART_Transmit_IT>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET  );
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <Encoder_to_LCD+0x160>)
 8001392:	f002 ff3d 	bl	8004210 <HAL_GPIO_WritePin>
		      break;
 8001396:	e047      	b.n	8001428 <Encoder_to_LCD+0x148>
		    	currCounter--;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <Encoder_to_LCD+0x15c>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <Encoder_to_LCD+0x15c>)
 80013a8:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET  );
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b0:	4823      	ldr	r0, [pc, #140]	; (8001440 <Encoder_to_LCD+0x160>)
 80013b2:	f002 ff2d 	bl	8004210 <HAL_GPIO_WritePin>
				sprintf(String_LCD,"%04d",currCounter);
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <Encoder_to_LCD+0x15c>)
 80013b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013bc:	461a      	mov	r2, r3
 80013be:	4921      	ldr	r1, [pc, #132]	; (8001444 <Encoder_to_LCD+0x164>)
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <Encoder_to_LCD+0x168>)
 80013c2:	f00e f877 	bl	800f4b4 <siprintf>
				LCD_SetPos(11,0);HAL_Delay(10);
 80013c6:	2100      	movs	r1, #0
 80013c8:	200b      	movs	r0, #11
 80013ca:	f00d ff6f 	bl	800f2ac <LCD_SetPos>
 80013ce:	200a      	movs	r0, #10
 80013d0:	f001 f846 	bl	8002460 <HAL_Delay>
				LCD_String(String_LCD);HAL_Delay(10);
 80013d4:	481c      	ldr	r0, [pc, #112]	; (8001448 <Encoder_to_LCD+0x168>)
 80013d6:	f00d ff4b 	bl	800f270 <LCD_String>
 80013da:	200a      	movs	r0, #10
 80013dc:	f001 f840 	bl	8002460 <HAL_Delay>
				L_str=	snprintf(buff, sizeof(buff), "\n\r %04d ", currCounter);
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <Encoder_to_LCD+0x15c>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <Encoder_to_LCD+0x16c>)
 80013e8:	2110      	movs	r1, #16
 80013ea:	4819      	ldr	r0, [pc, #100]	; (8001450 <Encoder_to_LCD+0x170>)
 80013ec:	f00e f82e 	bl	800f44c <sniprintf>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <Encoder_to_LCD+0x174>)
 80013f6:	801a      	strh	r2, [r3, #0]
				while(TerminalInterface.gState != HAL_UART_STATE_READY ){;}
 80013f8:	bf00      	nop
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <Encoder_to_LCD+0x178>)
 80013fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b20      	cmp	r3, #32
 8001404:	d1f9      	bne.n	80013fa <Encoder_to_LCD+0x11a>
				HAL_UART_Transmit_IT(&TerminalInterface, (uint8_t*)buff, L_str);
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <Encoder_to_LCD+0x174>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4910      	ldr	r1, [pc, #64]	; (8001450 <Encoder_to_LCD+0x170>)
 800140e:	4812      	ldr	r0, [pc, #72]	; (8001458 <Encoder_to_LCD+0x178>)
 8001410:	f008 fa08 	bl	8009824 <HAL_UART_Transmit_IT>
				HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET  );
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <Encoder_to_LCD+0x160>)
 800141c:	f002 fef8 	bl	8004210 <HAL_GPIO_WritePin>
		      break;
 8001420:	e002      	b.n	8001428 <Encoder_to_LCD+0x148>
		    default: break;
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <Encoder_to_LCD+0x148>
		    	break;
 8001426:	bf00      	nop
		  }///switch(encoderStatus)

		    	if(HAL_GetTick()-Ticks_1 >1500){
 8001428:	f001 f80e 	bl	8002448 <HAL_GetTick>
											//Ticks_1=HAL_GetTick();
											//Get_Time_to_LCD(0,1);
		    								}

		    	// RTC_update_and_Terminal(1999);
		    	return (currCounter);
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <Encoder_to_LCD+0x15c>)
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
  }
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000558 	.word	0x20000558
 800143c:	20000556 	.word	0x20000556
 8001440:	40020c00 	.word	0x40020c00
 8001444:	0800ff78 	.word	0x0800ff78
 8001448:	20000534 	.word	0x20000534
 800144c:	0800ff80 	.word	0x0800ff80
 8001450:	20000000 	.word	0x20000000
 8001454:	20000554 	.word	0x20000554
 8001458:	20000c54 	.word	0x20000c54

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_RTC_Init+0x44>)
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <MX_RTC_Init+0x48>)
 8001470:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_RTC_Init+0x44>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_RTC_Init+0x44>)
 800147a:	227f      	movs	r2, #127	; 0x7f
 800147c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_RTC_Init+0x44>)
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_RTC_Init+0x44>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_RTC_Init+0x44>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_RTC_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_RTC_Init+0x44>)
 8001498:	f007 f83a 	bl	8008510 <HAL_RTC_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80014a2:	f7ff ffdb 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#endif
  /* USER CODE END RTC_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000055c 	.word	0x2000055c
 80014b0:	40002800 	.word	0x40002800

080014b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_RTC_MspInit+0x5c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d119      	bne.n	8001508 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014d4:	2302      	movs	r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014dc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 ff32 	bl	800834c <HAL_RCCEx_PeriphCLKConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014ee:	f7ff ffb5 	bl	800145c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_RTC_MspInit+0x60>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2029      	movs	r0, #41	; 0x29
 80014fe:	f002 f838 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001502:	2029      	movs	r0, #41	; 0x29
 8001504:	f002 f851 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40002800 	.word	0x40002800
 8001514:	42470e3c 	.word	0x42470e3c

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_MspInit+0x4c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_MspInit+0x4c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001556:	2007      	movs	r0, #7
 8001558:	f002 f800 	bl	800355c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 ff34 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <DMA1_Stream2_IRQHandler+0x10>)
 80015c2:	f002 fa11 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000b20 	.word	0x20000b20

080015d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <DMA1_Stream5_IRQHandler+0x10>)
 80015d6:	f002 fa07 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000d28 	.word	0x20000d28

080015e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA1_Stream6_IRQHandler+0x10>)
 80015ea:	f002 f9fd 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000cc8 	.word	0x20000cc8

080015f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <ADC_IRQHandler+0x10>)
 80015fe:	f000 ffd4 	bl	80025aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000178 	.word	0x20000178

0800160c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <CAN1_TX_IRQHandler+0x10>)
 8001612:	f001 fc67 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000220 	.word	0x20000220

08001620 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <CAN1_RX0_IRQHandler+0x10>)
 8001626:	f001 fc5d 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000220 	.word	0x20000220

08001634 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <CAN1_RX1_IRQHandler+0x10>)
 800163a:	f001 fc53 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000220 	.word	0x20000220

08001648 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <CAN1_SCE_IRQHandler+0x10>)
 800164e:	f001 fc49 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000220 	.word	0x20000220

0800165c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM3_IRQHandler+0x10>)
 8001662:	f007 fbe9 	bl	8008e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200006e8 	.word	0x200006e8

08001670 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <TIM4_IRQHandler+0x10>)
 8001676:	f007 fbdf 	bl	8008e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13 );

  /* USER CODE END TIM4_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000079c 	.word	0x2000079c

08001684 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <I2C1_EV_IRQHandler+0x10>)
 800168a:	f003 f873 	bl	8004774 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000040c 	.word	0x2000040c

08001698 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <I2C1_ER_IRQHandler+0x10>)
 800169e:	f003 f9bc 	bl	8004a1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000040c 	.word	0x2000040c

080016ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <USART2_IRQHandler+0x10>)
 80016b2:	f008 f9ab 	bl	8009a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000c54 	.word	0x20000c54

080016c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <RTC_Alarm_IRQHandler+0x10>)
 80016c6:	f007 f847 	bl	8008758 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000055c 	.word	0x2000055c

080016d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80016da:	f007 fbad 	bl	8008e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200009b8 	.word	0x200009b8

080016e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM6_DAC_IRQHandler+0x10>)
 80016ee:	f007 fba3 	bl	8008e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000904 	.word	0x20000904

080016fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA2_Stream0_IRQHandler+0x10>)
 8001702:	f002 f971 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200002ec 	.word	0x200002ec

08001710 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_up);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA2_Stream1_IRQHandler+0x10>)
 8001716:	f002 f967 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000b80 	.word	0x20000b80

08001724 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA2_Stream4_IRQHandler+0x10>)
 800172a:	f002 f95d 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001c0 	.word	0x200001c0

08001738 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <CAN2_TX_IRQHandler+0x10>)
 800173e:	f001 fbd1 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000284 	.word	0x20000284

0800174c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <CAN2_RX0_IRQHandler+0x10>)
 8001752:	f001 fbc7 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000284 	.word	0x20000284

08001760 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <CAN2_RX1_IRQHandler+0x10>)
 8001766:	f001 fbbd 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000284 	.word	0x20000284

08001774 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <CAN2_SCE_IRQHandler+0x10>)
 800177a:	f001 fbb3 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000284 	.word	0x20000284

08001788 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <OTG_FS_IRQHandler+0x10>)
 800178e:	f005 f817 	bl	80067c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000226c 	.word	0x2000226c

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f00d fe9a 	bl	800f504 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20020000 	.word	0x20020000
 80017fc:	00000800 	.word	0x00000800
 8001800:	2000057c 	.word	0x2000057c
 8001804:	20002af0 	.word	0x20002af0

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;
DMA_HandleTypeDef hdma_tim8_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f00d fe5a 	bl	800f4f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <MX_TIM1_Init+0xa8>)
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <MX_TIM1_Init+0xac>)
 800184c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <MX_TIM1_Init+0xa8>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_TIM1_Init+0xa8>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <MX_TIM1_Init+0xa8>)
 800185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM1_Init+0xa8>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM1_Init+0xa8>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_TIM1_Init+0xa8>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001874:	2301      	movs	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_TIM1_Init+0xa8>)
 80018a0:	f007 f988 	bl	8008bb4 <HAL_TIM_Encoder_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018aa:	f7ff fdd7 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <MX_TIM1_Init+0xa8>)
 80018bc:	f007 febe 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80018c6:	f7ff fdc9 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	; 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000580 	.word	0x20000580
 80018d8:	40010000 	.word	0x40010000

080018dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_TIM2_Init+0x94>)
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_TIM2_Init+0x94>)
 8001902:	2200      	movs	r2, #0
 8001904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_TIM2_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_TIM2_Init+0x94>)
 800190e:	f04f 32ff 	mov.w	r2, #4294967295
 8001912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <MX_TIM2_Init+0x94>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_TIM2_Init+0x94>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001920:	4813      	ldr	r0, [pc, #76]	; (8001970 <MX_TIM2_Init+0x94>)
 8001922:	f007 f813 	bl	800894c <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800192c:	f7ff fd96 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4619      	mov	r1, r3
 800193c:	480c      	ldr	r0, [pc, #48]	; (8001970 <MX_TIM2_Init+0x94>)
 800193e:	f007 fba3 	bl	8009088 <HAL_TIM_ConfigClockSource>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001948:	f7ff fd88 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_TIM2_Init+0x94>)
 800195a:	f007 fe6f 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001964:	f7ff fd7a 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000634 	.word	0x20000634

08001974 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	2224      	movs	r2, #36	; 0x24
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f00d fdb6 	bl	800f4f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <MX_TIM3_Init+0xa0>)
 8001992:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <MX_TIM3_Init+0xa4>)
 8001994:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <MX_TIM3_Init+0xa0>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_TIM3_Init+0xa0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_TIM3_Init+0xa0>)
 80019a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_TIM3_Init+0xa0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_TIM3_Init+0xa0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019be:	2301      	movs	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ce:	2301      	movs	r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <MX_TIM3_Init+0xa0>)
 80019e2:	f007 f8e7 	bl	8008bb4 <HAL_TIM_Encoder_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019ec:	f7ff fd36 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_TIM3_Init+0xa0>)
 80019fe:	f007 fe1d 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a08:	f7ff fd28 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200006e8 	.word	0x200006e8
 8001a18:	40000400 	.word	0x40000400

08001a1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <MX_TIM4_Init+0x98>)
 8001a3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a40:	2253      	movs	r2, #83	; 0x53
 8001a42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a5e:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a60:	f006 ff74 	bl	800894c <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a6a:	f7ff fcf7 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a7c:	f007 fb04 	bl	8009088 <HAL_TIM_ConfigClockSource>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001a86:	f7ff fce9 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_TIM4_Init+0x94>)
 8001a98:	f007 fdd0 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001aa2:	f7ff fcdb 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000079c 	.word	0x2000079c
 8001ab4:	40000800 	.word	0x40000800

08001ab8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <MX_TIM5_Init+0x98>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001afa:	4814      	ldr	r0, [pc, #80]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001afc:	f006 ff26 	bl	800894c <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001b06:	f7ff fca9 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4619      	mov	r1, r3
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001b18:	f007 fab6 	bl	8009088 <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001b22:	f7ff fc9b 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <MX_TIM5_Init+0x94>)
 8001b34:	f007 fd82 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001b3e:	f7ff fc8d 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000850 	.word	0x20000850
 8001b50:	40000c00 	.word	0x40000c00

08001b54 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM6_Init+0x64>)
 8001b64:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <MX_TIM6_Init+0x68>)
 8001b66:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 167;
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_TIM6_Init+0x64>)
 8001b6a:	22a7      	movs	r2, #167	; 0xa7
 8001b6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_TIM6_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_TIM6_Init+0x64>)
 8001b76:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_TIM6_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM6_Init+0x64>)
 8001b84:	f006 fee2 	bl	800894c <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b8e:	f7ff fc65 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b92:	2320      	movs	r3, #32
 8001b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM6_Init+0x64>)
 8001ba0:	f007 fd4c 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001baa:	f7ff fc57 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000904 	.word	0x20000904
 8001bbc:	40001000 	.word	0x40001000

08001bc0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <MX_TIM8_Init+0x9c>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001be4:	2229      	movs	r2, #41	; 0x29
 8001be6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39999;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001bf0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001bf4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c08:	4813      	ldr	r0, [pc, #76]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001c0a:	f006 fe9f 	bl	800894c <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001c14:	f7ff fc22 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001c26:	f007 fa2f 	bl	8009088 <HAL_TIM_ConfigClockSource>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001c30:	f7ff fc14 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c34:	2320      	movs	r3, #32
 8001c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_TIM8_Init+0x98>)
 8001c42:	f007 fcfb 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001c4c:	f7ff fc06 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200009b8 	.word	0x200009b8
 8001c5c:	40010400 	.word	0x40010400

08001c60 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_TIM14_Init+0x40>)
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <MX_TIM14_Init+0x44>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 167;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_TIM14_Init+0x40>)
 8001c6c:	22a7      	movs	r2, #167	; 0xa7
 8001c6e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_TIM14_Init+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_TIM14_Init+0x40>)
 8001c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c7c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_TIM14_Init+0x40>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_TIM14_Init+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_TIM14_Init+0x40>)
 8001c8c:	f006 fe5e 	bl	800894c <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001c96:	f7ff fbe1 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000a6c 	.word	0x20000a6c
 8001ca4:	40002000 	.word	0x40002000

08001ca8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x164>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12d      	bne.n	8001d26 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a48      	ldr	r2, [pc, #288]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001d02:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	483d      	ldr	r0, [pc, #244]	; (8001e14 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001d20:	f002 f8da 	bl	8003ed8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d24:	e06e      	b.n	8001e04 <HAL_TIM_Encoder_MspInit+0x15c>
  else if(tim_encoderHandle->Instance==TIM3)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_TIM_Encoder_MspInit+0x170>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d169      	bne.n	8001e04 <HAL_TIM_Encoder_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d40:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x168>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_S1_Pin|Encoder_S2_Pin;
 8001d68:	23c0      	movs	r3, #192	; 0xc0
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	4826      	ldr	r0, [pc, #152]	; (8001e1c <HAL_TIM_Encoder_MspInit+0x174>)
 8001d84:	f002 f8a8 	bl	8003ed8 <HAL_GPIO_Init>
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001d8a:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001d90:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001d94:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001db0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001dcc:	4814      	ldr	r0, [pc, #80]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001dce:	f001 fc15 	bl	80035fc <HAL_DMA_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_TIM_Encoder_MspInit+0x134>
      Error_Handler();
 8001dd8:	f7ff fb40 	bl	800145c <Error_Handler>
    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_encoderHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001dec:	621a      	str	r2, [r3, #32]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x178>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	201d      	movs	r0, #29
 8001dfa:	f001 fbba 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dfe:	201d      	movs	r0, #29
 8001e00:	f001 fbd3 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	; 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	20000b20 	.word	0x20000b20
 8001e24:	40026040 	.word	0x40026040

08001e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a5d      	ldr	r2, [pc, #372]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001e56:	e0aa      	b.n	8001fae <HAL_TIM_Base_MspInit+0x186>
  else if(tim_baseHandle->Instance==TIM4)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_TIM_Base_MspInit+0x194>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d116      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	201e      	movs	r0, #30
 8001e84:	f001 fb75 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e88:	201e      	movs	r0, #30
 8001e8a:	f001 fb8e 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 8001e8e:	e08e      	b.n	8001fae <HAL_TIM_Base_MspInit+0x186>
  else if(tim_baseHandle->Instance==TIM5)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_TIM_Base_MspInit+0x198>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10e      	bne.n	8001eb8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
}
 8001eb6:	e07a      	b.n	8001fae <HAL_TIM_Base_MspInit+0x186>
  else if(tim_baseHandle->Instance==TIM6)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a41      	ldr	r2, [pc, #260]	; (8001fc4 <HAL_TIM_Base_MspInit+0x19c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d116      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2036      	movs	r0, #54	; 0x36
 8001ee4:	f001 fb45 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ee8:	2036      	movs	r0, #54	; 0x36
 8001eea:	f001 fb5e 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 8001eee:	e05e      	b.n	8001fae <HAL_TIM_Base_MspInit+0x186>
  else if(tim_baseHandle->Instance==TIM8)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d146      	bne.n	8001f88 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_up.Instance = DMA2_Stream1;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f18:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001f1a:	601a      	str	r2, [r3, #0]
    hdma_tim8_up.Init.Channel = DMA_CHANNEL_7;
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f1e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001f22:	605a      	str	r2, [r3, #4]
    hdma_tim8_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
    hdma_tim8_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
    hdma_tim8_up.Init.MemInc = DMA_MINC_ENABLE;
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f36:	611a      	str	r2, [r3, #16]
    hdma_tim8_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f3e:	615a      	str	r2, [r3, #20]
    hdma_tim8_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f46:	619a      	str	r2, [r3, #24]
    hdma_tim8_up.Init.Mode = DMA_NORMAL;
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
    hdma_tim8_up.Init.Priority = DMA_PRIORITY_LOW;
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
    hdma_tim8_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_up) != HAL_OK)
 8001f5a:	481c      	ldr	r0, [pc, #112]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f5c:	f001 fb4e 	bl	80035fc <HAL_DMA_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 8001f66:	f7ff fa79 	bl	800145c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim8_up);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f6e:	621a      	str	r2, [r3, #32]
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_TIM_Base_MspInit+0x1a4>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	202c      	movs	r0, #44	; 0x2c
 8001f7c:	f001 faf9 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f80:	202c      	movs	r0, #44	; 0x2c
 8001f82:	f001 fb12 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 8001f86:	e012      	b.n	8001fae <HAL_TIM_Base_MspInit+0x186>
  else if(tim_baseHandle->Instance==TIM14)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_TIM_Base_MspInit+0x1ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10d      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_TIM_Base_MspInit+0x190>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
}
 8001fae:	bf00      	nop
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	40001000 	.word	0x40001000
 8001fc8:	40010400 	.word	0x40010400
 8001fcc:	20000b80 	.word	0x20000b80
 8001fd0:	40026428 	.word	0x40026428
 8001fd4:	40002000 	.word	0x40002000

08001fd8 <HAL_TIM_Base_MspDeInit>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RCC_TIM14_CLK_DISABLE();
  /* USER CODE BEGIN TIM14_MspDeInit 1 */

  /* USER CODE END TIM14_MspDeInit 1 */
  }
}
 8001ff6:	e048      	b.n	800208a <HAL_TIM_Base_MspDeInit+0xb2>
  else if(tim_baseHandle->Instance==TIM4)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a26      	ldr	r2, [pc, #152]	; (8002098 <HAL_TIM_Base_MspDeInit+0xc0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d109      	bne.n	8002016 <HAL_TIM_Base_MspDeInit+0x3e>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800200e:	201e      	movs	r0, #30
 8002010:	f001 fad9 	bl	80035c6 <HAL_NVIC_DisableIRQ>
}
 8002014:	e039      	b.n	800208a <HAL_TIM_Base_MspDeInit+0xb2>
  else if(tim_baseHandle->Instance==TIM5)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_TIM_Base_MspDeInit+0xc4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d106      	bne.n	800202e <HAL_TIM_Base_MspDeInit+0x56>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8002026:	f023 0308 	bic.w	r3, r3, #8
 800202a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800202c:	e02d      	b.n	800208a <HAL_TIM_Base_MspDeInit+0xb2>
  else if(tim_baseHandle->Instance==TIM6)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_TIM_Base_MspDeInit+0xc8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d109      	bne.n	800204c <HAL_TIM_Base_MspDeInit+0x74>
    __HAL_RCC_TIM6_CLK_DISABLE();
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 800203e:	f023 0310 	bic.w	r3, r3, #16
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8002044:	2036      	movs	r0, #54	; 0x36
 8002046:	f001 fabe 	bl	80035c6 <HAL_NVIC_DisableIRQ>
}
 800204a:	e01e      	b.n	800208a <HAL_TIM_Base_MspDeInit+0xb2>
  else if(tim_baseHandle->Instance==TIM8)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_TIM_Base_MspDeInit+0xcc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_Base_MspDeInit+0x9c>
    __HAL_RCC_TIM8_CLK_DISABLE();
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_DMA_DeInit(tim_baseHandle->hdma[TIM_DMA_ID_UPDATE]);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4618      	mov	r0, r3
 8002068:	f001 fb76 	bl	8003758 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
 800206c:	202c      	movs	r0, #44	; 0x2c
 800206e:	f001 faaa 	bl	80035c6 <HAL_NVIC_DisableIRQ>
}
 8002072:	e00a      	b.n	800208a <HAL_TIM_Base_MspDeInit+0xb2>
  else if(tim_baseHandle->Instance==TIM14)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <HAL_TIM_Base_MspDeInit+0xd0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d105      	bne.n	800208a <HAL_TIM_Base_MspDeInit+0xb2>
    __HAL_RCC_TIM14_CLK_DISABLE();
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_TIM_Base_MspDeInit+0xbc>)
 8002084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40001000 	.word	0x40001000
 80020a4:	40010400 	.word	0x40010400
 80020a8:	40002000 	.word	0x40002000

080020ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MX_USART1_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020e4:	f007 fb44 	bl	8009770 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f7ff f9b5 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000be0 	.word	0x20000be0
 80020fc:	40011000 	.word	0x40011000

08002100 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <MX_USART2_UART_Init+0x50>)
 8002108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800210c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800211a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800211e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002128:	220c      	movs	r2, #12
 800212a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800213a:	f007 fb19 	bl	8009770 <HAL_UART_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002144:	f7ff f98a 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000c54 	.word	0x20000c54
 8002150:	40004400 	.word	0x40004400

08002154 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	; 0x30
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a64      	ldr	r2, [pc, #400]	; (8002304 <HAL_UART_MspInit+0x1b0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d12c      	bne.n	80021d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a62      	ldr	r2, [pc, #392]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b60      	ldr	r3, [pc, #384]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	4b5c      	ldr	r3, [pc, #368]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021be:	2307      	movs	r3, #7
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4850      	ldr	r0, [pc, #320]	; (800230c <HAL_UART_MspInit+0x1b8>)
 80021ca:	f001 fe85 	bl	8003ed8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ce:	e095      	b.n	80022fc <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <HAL_UART_MspInit+0x1bc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	f040 8090 	bne.w	80022fc <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 80021e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4a41      	ldr	r2, [pc, #260]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
 8002208:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_UART_MspInit+0x1b4>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002214:	230c      	movs	r3, #12
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002224:	2307      	movs	r3, #7
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	4839      	ldr	r0, [pc, #228]	; (8002314 <HAL_UART_MspInit+0x1c0>)
 8002230:	f001 fe52 	bl	8003ed8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002234:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002236:	4a39      	ldr	r2, [pc, #228]	; (800231c <HAL_UART_MspInit+0x1c8>)
 8002238:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 800223c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002240:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002254:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225c:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002274:	4828      	ldr	r0, [pc, #160]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002276:	f001 f9c1 	bl	80035fc <HAL_DMA_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002280:	f7ff f8ec 	bl	800145c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_UART_MspInit+0x1c4>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 8002292:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_UART_MspInit+0x1d0>)
 8002294:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 8002298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800229c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022d0:	4813      	ldr	r0, [pc, #76]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022d2:	f001 f993 	bl	80035fc <HAL_DMA_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80022dc:	f7ff f8be 	bl	800145c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_UART_MspInit+0x1cc>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2026      	movs	r0, #38	; 0x26
 80022f2:	f001 f93e 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022f6:	2026      	movs	r0, #38	; 0x26
 80022f8:	f001 f957 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 80022fc:	bf00      	nop
 80022fe:	3730      	adds	r7, #48	; 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40011000 	.word	0x40011000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020400 	.word	0x40020400
 8002310:	40004400 	.word	0x40004400
 8002314:	40020000 	.word	0x40020000
 8002318:	20000cc8 	.word	0x20000cc8
 800231c:	400260a0 	.word	0x400260a0
 8002320:	20000d28 	.word	0x20000d28
 8002324:	40026088 	.word	0x40026088

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800232e:	490e      	ldr	r1, [pc, #56]	; (8002368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002334:	e002      	b.n	800233c <LoopCopyDataInit>

08002336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233a:	3304      	adds	r3, #4

0800233c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800233c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002340:	d3f9      	bcc.n	8002336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002344:	4c0b      	ldr	r4, [pc, #44]	; (8002374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002348:	e001      	b.n	800234e <LoopFillZerobss>

0800234a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800234c:	3204      	adds	r2, #4

0800234e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002350:	d3fb      	bcc.n	800234a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002352:	f7ff fa59 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002356:	f00d f8db 	bl	800f510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7fe fd5b 	bl	8000e14 <main>
  bx  lr    
 800235e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 800236c:	0801022c 	.word	0x0801022c
  ldr r2, =_sbss
 8002370:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8002374:	20002af0 	.word	0x20002af0

08002378 <DCMI_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <DCMI_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_Init+0x40>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_Init+0x40>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_Init+0x40>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f001 f8d9 	bl	800355c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f000 f808 	bl	80023c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b0:	f7ff f8b2 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00

080023c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x54>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_InitTick+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 f8ff 	bl	80035e2 <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f001 f8b9 	bl	8003572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <HAL_InitTick+0x5c>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000010 	.word	0x20000010
 8002418:	20000018 	.word	0x20000018
 800241c:	20000014 	.word	0x20000014

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000018 	.word	0x20000018
 8002444:	20000d88 	.word	0x20000d88

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000d88 	.word	0x20000d88

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_Delay+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000018 	.word	0x20000018

080024a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_GetREVID+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0c1b      	lsrs	r3, r3, #16
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e0042000 	.word	0xe0042000

080024c0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_GetDEVID+0x18>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e0042000 	.word	0xe0042000

080024dc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetUIDw0+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	1fff7a10 	.word	0x1fff7a10

080024f4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_GetUIDw1+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	1fff7a14 	.word	0x1fff7a14

0800250c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetUIDw2+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	1fff7a18 	.word	0x1fff7a18

08002524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e033      	b.n	80025a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f864 	bl	8000610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800256a:	f023 0302 	bic.w	r3, r3, #2
 800256e:	f043 0202 	orr.w	r2, r3, #2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa68 	bl	8002a4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
 8002592:	e001      	b.n	8002598 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d049      	beq.n	8002674 <HAL_ADC_IRQHandler+0xca>
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d046      	beq.n	8002674 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d12b      	bne.n	8002664 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002610:	2b00      	cmp	r3, #0
 8002612:	d127      	bne.n	8002664 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800262c:	2b00      	cmp	r3, #0
 800262e:	d119      	bne.n	8002664 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0220 	bic.w	r2, r2, #32
 800263e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8b0 	bl	80027ca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f06f 0212 	mvn.w	r2, #18
 8002672:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d057      	beq.n	800273a <HAL_ADC_IRQHandler+0x190>
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d054      	beq.n	800273a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d139      	bne.n	800272a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d12b      	bne.n	800272a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d124      	bne.n	800272a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11d      	bne.n	800272a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d119      	bne.n	800272a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002704:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa8a 	bl	8002c44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 020c 	mvn.w	r2, #12
 8002738:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <HAL_ADC_IRQHandler+0x1d6>
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d014      	beq.n	8002780 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10d      	bne.n	8002780 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f834 	bl	80027de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0201 	mvn.w	r2, #1
 800277e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d015      	beq.n	80027c2 <HAL_ADC_IRQHandler+0x218>
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f043 0202 	orr.w	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0220 	mvn.w	r2, #32
 80027b0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f81d 	bl	80027f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0220 	mvn.w	r2, #32
 80027c0:	601a      	str	r2, [r3, #0]
  }
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1c>
 8002820:	2302      	movs	r3, #2
 8002822:	e105      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x228>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b09      	cmp	r3, #9
 8002832:	d925      	bls.n	8002880 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68d9      	ldr	r1, [r3, #12]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3b1e      	subs	r3, #30
 800284a:	2207      	movs	r2, #7
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43da      	mvns	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	400a      	ands	r2, r1
 8002858:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	4603      	mov	r3, r0
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4403      	add	r3, r0
 8002872:	3b1e      	subs	r3, #30
 8002874:	409a      	lsls	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e022      	b.n	80028c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6919      	ldr	r1, [r3, #16]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	2207      	movs	r2, #7
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	400a      	ands	r2, r1
 80028a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6919      	ldr	r1, [r3, #16]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4403      	add	r3, r0
 80028bc:	409a      	lsls	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d824      	bhi.n	8002918 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b05      	subs	r3, #5
 80028e0:	221f      	movs	r2, #31
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b05      	subs	r3, #5
 800290a:	fa00 f203 	lsl.w	r2, r0, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	635a      	str	r2, [r3, #52]	; 0x34
 8002916:	e04c      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d824      	bhi.n	800296a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b23      	subs	r3, #35	; 0x23
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43da      	mvns	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	400a      	ands	r2, r1
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	3b23      	subs	r3, #35	; 0x23
 800295c:	fa00 f203 	lsl.w	r2, r0, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
 8002968:	e023      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	3b41      	subs	r3, #65	; 0x41
 800297c:	221f      	movs	r2, #31
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	400a      	ands	r2, r1
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	3b41      	subs	r3, #65	; 0x41
 80029a6:	fa00 f203 	lsl.w	r2, r0, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_ADC_ConfigChannel+0x234>)
 80029b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_ADC_ConfigChannel+0x238>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d109      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1cc>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b12      	cmp	r3, #18
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_ADC_ConfigChannel+0x238>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d123      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x21e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d003      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x1e6>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b11      	cmp	r3, #17
 80029ec:	d11b      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d111      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_ADC_ConfigChannel+0x23c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_ADC_ConfigChannel+0x240>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9a      	lsrs	r2, r3, #18
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a18:	e002      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f9      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40012300 	.word	0x40012300
 8002a40:	40012000 	.word	0x40012000
 8002a44:	20000010 	.word	0x20000010
 8002a48:	431bde83 	.word	0x431bde83

08002a4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a54:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <ADC_Init+0x1f0>)
 8002a56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	021a      	lsls	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <ADC_Init+0x1f4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	e00f      	b.n	8002b4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0202 	bic.w	r2, r2, #2
 8002b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
 8002b64:	005a      	lsls	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01b      	beq.n	8002bb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	035a      	lsls	r2, r3, #13
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e007      	b.n	8002bc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	051a      	lsls	r2, r3, #20
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6899      	ldr	r1, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c02:	025a      	lsls	r2, r3, #9
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	029a      	lsls	r2, r3, #10
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40012300 	.word	0x40012300
 8002c40:	0f000001 	.word	0x0f000001

08002c44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e11c      	b.n	8002ea4 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d131      	bne.n	8002cda <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a8c      	ldr	r2, [pc, #560]	; (8002eac <HAL_CAN_Init+0x254>)
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a8c      	ldr	r2, [pc, #560]	; (8002eb0 <HAL_CAN_Init+0x258>)
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a8b      	ldr	r2, [pc, #556]	; (8002eb4 <HAL_CAN_Init+0x25c>)
 8002c86:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a8b      	ldr	r2, [pc, #556]	; (8002eb8 <HAL_CAN_Init+0x260>)
 8002c8c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a8a      	ldr	r2, [pc, #552]	; (8002ebc <HAL_CAN_Init+0x264>)
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a8a      	ldr	r2, [pc, #552]	; (8002ec0 <HAL_CAN_Init+0x268>)
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a89      	ldr	r2, [pc, #548]	; (8002ec4 <HAL_CAN_Init+0x26c>)
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a89      	ldr	r2, [pc, #548]	; (8002ec8 <HAL_CAN_Init+0x270>)
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a88      	ldr	r2, [pc, #544]	; (8002ecc <HAL_CAN_Init+0x274>)
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a88      	ldr	r2, [pc, #544]	; (8002ed0 <HAL_CAN_Init+0x278>)
 8002cb0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a87      	ldr	r2, [pc, #540]	; (8002ed4 <HAL_CAN_Init+0x27c>)
 8002cb6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a87      	ldr	r2, [pc, #540]	; (8002ed8 <HAL_CAN_Init+0x280>)
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a86      	ldr	r2, [pc, #536]	; (8002edc <HAL_CAN_Init+0x284>)
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a84      	ldr	r2, [pc, #528]	; (8002ee0 <HAL_CAN_Init+0x288>)
 8002cd0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cea:	f7ff fbad 	bl	8002448 <HAL_GetTick>
 8002cee:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cf0:	e012      	b.n	8002d18 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cf2:	f7ff fba9 	bl	8002448 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b0a      	cmp	r3, #10
 8002cfe:	d90b      	bls.n	8002d18 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2205      	movs	r2, #5
 8002d10:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0c5      	b.n	8002ea4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0e5      	beq.n	8002cf2 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0202 	bic.w	r2, r2, #2
 8002d34:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d36:	f7ff fb87 	bl	8002448 <HAL_GetTick>
 8002d3a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d3c:	e012      	b.n	8002d64 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d3e:	f7ff fb83 	bl	8002448 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b0a      	cmp	r3, #10
 8002d4a:	d90b      	bls.n	8002d64 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e09f      	b.n	8002ea4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e5      	bne.n	8002d3e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7e1b      	ldrb	r3, [r3, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d108      	bne.n	8002d8c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e007      	b.n	8002d9c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e5b      	ldrb	r3, [r3, #25]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d108      	bne.n	8002db6 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e007      	b.n	8002dc6 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7e9b      	ldrb	r3, [r3, #26]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d108      	bne.n	8002de0 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e007      	b.n	8002df0 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0220 	bic.w	r2, r2, #32
 8002dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7edb      	ldrb	r3, [r3, #27]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d108      	bne.n	8002e0a <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0210 	bic.w	r2, r2, #16
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e007      	b.n	8002e1a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0210 	orr.w	r2, r2, #16
 8002e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7f1b      	ldrb	r3, [r3, #28]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0208 	orr.w	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e007      	b.n	8002e44 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0208 	bic.w	r2, r2, #8
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7f5b      	ldrb	r3, [r3, #29]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d108      	bne.n	8002e5e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0204 	orr.w	r2, r2, #4
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e007      	b.n	8002e6e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0204 	bic.w	r2, r2, #4
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	ea42 0103 	orr.w	r1, r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	1e5a      	subs	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	080032e7 	.word	0x080032e7
 8002eb0:	080032fb 	.word	0x080032fb
 8002eb4:	0800330f 	.word	0x0800330f
 8002eb8:	08003323 	.word	0x08003323
 8002ebc:	0800326f 	.word	0x0800326f
 8002ec0:	08003283 	.word	0x08003283
 8002ec4:	08003297 	.word	0x08003297
 8002ec8:	080032ab 	.word	0x080032ab
 8002ecc:	080032bf 	.word	0x080032bf
 8002ed0:	080032d3 	.word	0x080032d3
 8002ed4:	08003337 	.word	0x08003337
 8002ed8:	0800334b 	.word	0x0800334b
 8002edc:	0800335f 	.word	0x0800335f
 8002ee0:	0800079d 	.word	0x0800079d

08002ee4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);   /* CAN transmit status register,  Address offset: 0x08 */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8083 	beq.w	8003032 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)  /*CAN transmit status register  | Request Completed Mailbox0 */
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d025      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)   /*CAN transmit status register  |  Transmission OK of Mailbox0 */ 
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
 8002f50:	e017      	b.n	8002f82 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)       /*CAN transmit status register  |   Arbitration Lost for Mailbox0 */
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	e00d      	b.n	8002f82 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)   /*CAN transmit status register  |  Transmission Error of Mailbox0 */
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	e003      	b.n	8002f82 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d026      	beq.n	8002fda <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
 8002fa8:	e017      	b.n	8002fda <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	e00d      	b.n	8002fda <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd0:	e003      	b.n	8002fda <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d026      	beq.n	8003032 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e017      	b.n	8003032 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	e00d      	b.n	8003032 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	e003      	b.n	8003032 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2210      	movs	r2, #16
 8003054:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2208      	movs	r2, #8
 8003070:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2210      	movs	r2, #16
 80030bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00c      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2208      	movs	r2, #8
 80030d8:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00c      	beq.n	8003126 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2210      	movs	r2, #16
 800311c:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2208      	movs	r2, #8
 8003140:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d07b      	beq.n	800324c <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d072      	beq.n	8003244 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d043      	beq.n	8003244 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d03e      	beq.n	8003244 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d02b      	beq.n	8003228 <HAL_CAN_IRQHandler+0x344>
 80031d0:	2b60      	cmp	r3, #96	; 0x60
 80031d2:	d82e      	bhi.n	8003232 <HAL_CAN_IRQHandler+0x34e>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d022      	beq.n	800321e <HAL_CAN_IRQHandler+0x33a>
 80031d8:	2b50      	cmp	r3, #80	; 0x50
 80031da:	d82a      	bhi.n	8003232 <HAL_CAN_IRQHandler+0x34e>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d019      	beq.n	8003214 <HAL_CAN_IRQHandler+0x330>
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d826      	bhi.n	8003232 <HAL_CAN_IRQHandler+0x34e>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d010      	beq.n	800320a <HAL_CAN_IRQHandler+0x326>
 80031e8:	2b30      	cmp	r3, #48	; 0x30
 80031ea:	d822      	bhi.n	8003232 <HAL_CAN_IRQHandler+0x34e>
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d002      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x312>
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d005      	beq.n	8003200 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031f4:	e01d      	b.n	8003232 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f043 0308 	orr.w	r3, r3, #8
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031fe:	e019      	b.n	8003234 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003208:	e014      	b.n	8003234 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f043 0320 	orr.w	r3, r3, #32
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003212:	e00f      	b.n	8003234 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800321c:	e00a      	b.n	8003234 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003226:	e005      	b.n	8003234 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003230:	e000      	b.n	8003234 <HAL_CAN_IRQHandler+0x350>
            break;
 8003232:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003242:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003266:	bf00      	nop
 8003268:	3728      	adds	r7, #40	; 0x28
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db12      	blt.n	800344c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	490a      	ldr	r1, [pc, #40]	; (8003458 <__NVIC_DisableIRQ+0x44>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	3320      	adds	r3, #32
 800343c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003440:	f3bf 8f4f 	dsb	sy
}
 8003444:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003446:	f3bf 8f6f 	isb	sy
}
 800344a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	2b00      	cmp	r3, #0
 800346e:	db0a      	blt.n	8003486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	490c      	ldr	r1, [pc, #48]	; (80034a8 <__NVIC_SetPriority+0x4c>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	440b      	add	r3, r1
 8003480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003484:	e00a      	b.n	800349c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <__NVIC_SetPriority+0x50>)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	3b04      	subs	r3, #4
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	440b      	add	r3, r1
 800349a:	761a      	strb	r2, [r3, #24]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000e100 	.word	0xe000e100
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f1c3 0307 	rsb	r3, r3, #7
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	bf28      	it	cs
 80034ce:	2304      	movcs	r3, #4
 80034d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d902      	bls.n	80034e0 <NVIC_EncodePriority+0x30>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3b03      	subs	r3, #3
 80034de:	e000      	b.n	80034e2 <NVIC_EncodePriority+0x32>
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	401a      	ands	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43d9      	mvns	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	4313      	orrs	r3, r2
         );
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003528:	d301      	bcc.n	800352e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352a:	2301      	movs	r3, #1
 800352c:	e00f      	b.n	800354e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <SysTick_Config+0x40>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003536:	210f      	movs	r1, #15
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f7ff ff8e 	bl	800345c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SysTick_Config+0x40>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <SysTick_Config+0x40>)
 8003548:	2207      	movs	r2, #7
 800354a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000e010 	.word	0xe000e010

0800355c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff05 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003584:	f7ff ff1a 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff8e 	bl	80034b0 <NVIC_EncodePriority>
 8003594:	4602      	mov	r2, r0
 8003596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff5d 	bl	800345c <__NVIC_SetPriority>
}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff0d 	bl	80033d8 <__NVIC_EnableIRQ>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff1d 	bl	8003414 <__NVIC_DisableIRQ>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff94 	bl	8003518 <SysTick_Config>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7fe ff1e 	bl	8002448 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e099      	b.n	800374c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003638:	e00f      	b.n	800365a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363a:	f7fe ff05 	bl	8002448 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b05      	cmp	r3, #5
 8003646:	d908      	bls.n	800365a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e078      	b.n	800374c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e8      	bne.n	800363a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_DMA_Init+0x158>)
 8003674:	4013      	ands	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4313      	orrs	r3, r2
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0307 	bic.w	r3, r3, #7
 80036da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d117      	bne.n	800371e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fb6d 	bl	8003de0 <DMA_CheckFifoParam>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800371a:	2301      	movs	r3, #1
 800371c:	e016      	b.n	800374c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fb24 	bl	8003d74 <DMA_CalcBaseAndBitshift>
 800372c:	4603      	mov	r3, r0
 800372e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	223f      	movs	r2, #63	; 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	f010803f 	.word	0xf010803f

08003758 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e050      	b.n	800380c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d101      	bne.n	800377a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	e048      	b.n	800380c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2221      	movs	r2, #33	; 0x21
 80037b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fada 	bl	8003d74 <DMA_CalcBaseAndBitshift>
 80037c0:	4603      	mov	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	223f      	movs	r2, #63	; 0x3f
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_DMA_Start_IT+0x26>
 8003836:	2302      	movs	r3, #2
 8003838:	e040      	b.n	80038bc <HAL_DMA_Start_IT+0xa8>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d12f      	bne.n	80038ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa58 	bl	8003d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	223f      	movs	r2, #63	; 0x3f
 800386e:	409a      	lsls	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0216 	orr.w	r2, r2, #22
 8003882:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e005      	b.n	80038ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038d2:	f7fe fdb9 	bl	8002448 <HAL_GetTick>
 80038d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d008      	beq.n	80038f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e052      	b.n	800399c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0216 	bic.w	r2, r2, #22
 8003904:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003914:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <HAL_DMA_Abort+0x62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0208 	bic.w	r2, r2, #8
 8003934:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003946:	e013      	b.n	8003970 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003948:	f7fe fd7e 	bl	8002448 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b05      	cmp	r3, #5
 8003954:	d90c      	bls.n	8003970 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2203      	movs	r2, #3
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e015      	b.n	800399c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e4      	bne.n	8003948 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	223f      	movs	r2, #63	; 0x3f
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e00c      	b.n	80039dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2205      	movs	r2, #5
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f4:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_DMA_IRQHandler+0x248>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8e      	ldr	r2, [pc, #568]	; (8003c34 <HAL_DMA_IRQHandler+0x24c>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0a9b      	lsrs	r3, r3, #10
 8003a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	2208      	movs	r2, #8
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01a      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0204 	bic.w	r2, r2, #4
 8003a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	2208      	movs	r2, #8
 8003a42:	409a      	lsls	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	2201      	movs	r2, #1
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2204      	movs	r2, #4
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	2204      	movs	r2, #4
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0204 	orr.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d043      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03c      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d018      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e01f      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e016      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0208 	bic.w	r2, r2, #8
 8003b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 808f 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8087 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	2220      	movs	r2, #32
 8003b80:	409a      	lsls	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d136      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0216 	bic.w	r2, r2, #22
 8003ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x1da>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0208 	bic.w	r2, r2, #8
 8003bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	223f      	movs	r2, #63	; 0x3f
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d07e      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
        }
        return;
 8003bfe:	e079      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d031      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e02c      	b.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
 8003c2e:	bf00      	nop
 8003c30:	20000010 	.word	0x20000010
 8003c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
 8003c48:	e01e      	b.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0210 	bic.w	r2, r2, #16
 8003c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d032      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2205      	movs	r2, #5
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d307      	bcc.n	8003cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f2      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x2cc>
 8003cce:	e000      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
 8003cf2:	e000      	b.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cf4:	bf00      	nop
    }
  }
}
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0a:	b2db      	uxtb	r3, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d108      	bne.n	8003d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d56:	e007      	b.n	8003d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	3b10      	subs	r3, #16
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <DMA_CalcBaseAndBitshift+0x68>)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d909      	bls.n	8003db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	1d1a      	adds	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	; 0x58
 8003db4:	e007      	b.n	8003dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	aaaaaaab 	.word	0xaaaaaaab
 8003ddc:	080101e0 	.word	0x080101e0

08003de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d11f      	bne.n	8003e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d856      	bhi.n	8003eae <DMA_CheckFifoParam+0xce>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <DMA_CheckFifoParam+0x28>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e19 	.word	0x08003e19
 8003e0c:	08003e2b 	.word	0x08003e2b
 8003e10:	08003e19 	.word	0x08003e19
 8003e14:	08003eaf 	.word	0x08003eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d046      	beq.n	8003eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e28:	e043      	b.n	8003eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e32:	d140      	bne.n	8003eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e38:	e03d      	b.n	8003eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	d121      	bne.n	8003e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d837      	bhi.n	8003eba <DMA_CheckFifoParam+0xda>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <DMA_CheckFifoParam+0x70>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e67 	.word	0x08003e67
 8003e58:	08003e61 	.word	0x08003e61
 8003e5c:	08003e79 	.word	0x08003e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e030      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d025      	beq.n	8003ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e76:	e022      	b.n	8003ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e80:	d11f      	bne.n	8003ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e86:	e01c      	b.n	8003ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d903      	bls.n	8003e96 <DMA_CheckFifoParam+0xb6>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d003      	beq.n	8003e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e94:	e018      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9a:	e015      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00e      	beq.n	8003ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003eac:	e00b      	b.n	8003ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e00a      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e008      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e006      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e004      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e16b      	b.n	80041cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	f040 815a 	bne.w	80041c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d005      	beq.n	8003f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d130      	bne.n	8003f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	2203      	movs	r2, #3
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f60:	2201      	movs	r2, #1
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 0201 	and.w	r2, r3, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d017      	beq.n	8003fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d123      	bne.n	800401c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	08da      	lsrs	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3208      	adds	r2, #8
 8003fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	220f      	movs	r2, #15
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	08da      	lsrs	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3208      	adds	r2, #8
 8004016:	69b9      	ldr	r1, [r7, #24]
 8004018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2203      	movs	r2, #3
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0203 	and.w	r2, r3, #3
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80b4 	beq.w	80041c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	4b60      	ldr	r3, [pc, #384]	; (80041e4 <HAL_GPIO_Init+0x30c>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	4a5f      	ldr	r2, [pc, #380]	; (80041e4 <HAL_GPIO_Init+0x30c>)
 8004068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406c:	6453      	str	r3, [r2, #68]	; 0x44
 800406e:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <HAL_GPIO_Init+0x30c>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800407a:	4a5b      	ldr	r2, [pc, #364]	; (80041e8 <HAL_GPIO_Init+0x310>)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	3302      	adds	r3, #2
 8004082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	220f      	movs	r2, #15
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a52      	ldr	r2, [pc, #328]	; (80041ec <HAL_GPIO_Init+0x314>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02b      	beq.n	80040fe <HAL_GPIO_Init+0x226>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a51      	ldr	r2, [pc, #324]	; (80041f0 <HAL_GPIO_Init+0x318>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d025      	beq.n	80040fa <HAL_GPIO_Init+0x222>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a50      	ldr	r2, [pc, #320]	; (80041f4 <HAL_GPIO_Init+0x31c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01f      	beq.n	80040f6 <HAL_GPIO_Init+0x21e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a4f      	ldr	r2, [pc, #316]	; (80041f8 <HAL_GPIO_Init+0x320>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d019      	beq.n	80040f2 <HAL_GPIO_Init+0x21a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a4e      	ldr	r2, [pc, #312]	; (80041fc <HAL_GPIO_Init+0x324>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_GPIO_Init+0x216>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a4d      	ldr	r2, [pc, #308]	; (8004200 <HAL_GPIO_Init+0x328>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00d      	beq.n	80040ea <HAL_GPIO_Init+0x212>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a4c      	ldr	r2, [pc, #304]	; (8004204 <HAL_GPIO_Init+0x32c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <HAL_GPIO_Init+0x20e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	; (8004208 <HAL_GPIO_Init+0x330>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_GPIO_Init+0x20a>
 80040de:	2307      	movs	r3, #7
 80040e0:	e00e      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040e2:	2308      	movs	r3, #8
 80040e4:	e00c      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040e6:	2306      	movs	r3, #6
 80040e8:	e00a      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040ea:	2305      	movs	r3, #5
 80040ec:	e008      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040ee:	2304      	movs	r3, #4
 80040f0:	e006      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040f2:	2303      	movs	r3, #3
 80040f4:	e004      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e002      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_GPIO_Init+0x228>
 80040fe:	2300      	movs	r3, #0
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	f002 0203 	and.w	r2, r2, #3
 8004106:	0092      	lsls	r2, r2, #2
 8004108:	4093      	lsls	r3, r2
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004110:	4935      	ldr	r1, [pc, #212]	; (80041e8 <HAL_GPIO_Init+0x310>)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	3302      	adds	r3, #2
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800411e:	4b3b      	ldr	r3, [pc, #236]	; (800420c <HAL_GPIO_Init+0x334>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004142:	4a32      	ldr	r2, [pc, #200]	; (800420c <HAL_GPIO_Init+0x334>)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004148:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_GPIO_Init+0x334>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800416c:	4a27      	ldr	r2, [pc, #156]	; (800420c <HAL_GPIO_Init+0x334>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <HAL_GPIO_Init+0x334>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004196:	4a1d      	ldr	r2, [pc, #116]	; (800420c <HAL_GPIO_Init+0x334>)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <HAL_GPIO_Init+0x334>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041c0:	4a12      	ldr	r2, [pc, #72]	; (800420c <HAL_GPIO_Init+0x334>)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2b0f      	cmp	r3, #15
 80041d0:	f67f ae90 	bls.w	8003ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40013800 	.word	0x40013800
 80041ec:	40020000 	.word	0x40020000
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40020800 	.word	0x40020800
 80041f8:	40020c00 	.word	0x40020c00
 80041fc:	40021000 	.word	0x40021000
 8004200:	40021400 	.word	0x40021400
 8004204:	40021800 	.word	0x40021800
 8004208:	40021c00 	.word	0x40021c00
 800420c:	40013c00 	.word	0x40013c00

08004210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
 800421c:	4613      	mov	r3, r2
 800421e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004220:	787b      	ldrb	r3, [r7, #1]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800422c:	e003      	b.n	8004236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	041a      	lsls	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	619a      	str	r2, [r3, #24]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004254:	887a      	ldrh	r2, [r7, #2]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	041a      	lsls	r2, r3, #16
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43d9      	mvns	r1, r3
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	400b      	ands	r3, r1
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e171      	b.n	800456e <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d12c      	bne.n	80042f0 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a77      	ldr	r2, [pc, #476]	; (8004480 <HAL_I2C_Init+0x208>)
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a77      	ldr	r2, [pc, #476]	; (8004484 <HAL_I2C_Init+0x20c>)
 80042a8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a76      	ldr	r2, [pc, #472]	; (8004488 <HAL_I2C_Init+0x210>)
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a76      	ldr	r2, [pc, #472]	; (800448c <HAL_I2C_Init+0x214>)
 80042b4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a75      	ldr	r2, [pc, #468]	; (8004490 <HAL_I2C_Init+0x218>)
 80042ba:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a75      	ldr	r2, [pc, #468]	; (8004494 <HAL_I2C_Init+0x21c>)
 80042c0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a74      	ldr	r2, [pc, #464]	; (8004498 <HAL_I2C_Init+0x220>)
 80042c6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a74      	ldr	r2, [pc, #464]	; (800449c <HAL_I2C_Init+0x224>)
 80042cc:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a73      	ldr	r2, [pc, #460]	; (80044a0 <HAL_I2C_Init+0x228>)
 80042d2:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a73      	ldr	r2, [pc, #460]	; (80044a4 <HAL_I2C_Init+0x22c>)
 80042d8:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a70      	ldr	r2, [pc, #448]	; (80044a8 <HAL_I2C_Init+0x230>)
 80042e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004328:	f003 ffe8 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 800432c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4a5e      	ldr	r2, [pc, #376]	; (80044ac <HAL_I2C_Init+0x234>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d807      	bhi.n	8004348 <HAL_I2C_Init+0xd0>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a5d      	ldr	r2, [pc, #372]	; (80044b0 <HAL_I2C_Init+0x238>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e006      	b.n	8004356 <HAL_I2C_Init+0xde>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a5a      	ldr	r2, [pc, #360]	; (80044b4 <HAL_I2C_Init+0x23c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	bf94      	ite	ls
 8004350:	2301      	movls	r3, #1
 8004352:	2300      	movhi	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e107      	b.n	800456e <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a55      	ldr	r2, [pc, #340]	; (80044b8 <HAL_I2C_Init+0x240>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0c9b      	lsrs	r3, r3, #18
 8004368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4a47      	ldr	r2, [pc, #284]	; (80044ac <HAL_I2C_Init+0x234>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d802      	bhi.n	8004398 <HAL_I2C_Init+0x120>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3301      	adds	r3, #1
 8004396:	e009      	b.n	80043ac <HAL_I2C_Init+0x134>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	4a46      	ldr	r2, [pc, #280]	; (80044bc <HAL_I2C_Init+0x244>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	3301      	adds	r3, #1
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4939      	ldr	r1, [pc, #228]	; (80044ac <HAL_I2C_Init+0x234>)
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d819      	bhi.n	8004400 <HAL_I2C_Init+0x188>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1e59      	subs	r1, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043da:	1c59      	adds	r1, r3, #1
 80043dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043e0:	400b      	ands	r3, r1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_I2C_Init+0x184>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1e59      	subs	r1, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fa:	e071      	b.n	80044e0 <HAL_I2C_Init+0x268>
 80043fc:	2304      	movs	r3, #4
 80043fe:	e06f      	b.n	80044e0 <HAL_I2C_Init+0x268>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d111      	bne.n	800442c <HAL_I2C_Init+0x1b4>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e58      	subs	r0, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e012      	b.n	8004452 <HAL_I2C_Init+0x1da>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	0099      	lsls	r1, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Init+0x1e2>
 8004456:	2301      	movs	r3, #1
 8004458:	e042      	b.n	80044e0 <HAL_I2C_Init+0x268>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d12e      	bne.n	80044c0 <HAL_I2C_Init+0x248>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1e58      	subs	r0, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6859      	ldr	r1, [r3, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	440b      	add	r3, r1
 8004470:	fbb0 f3f3 	udiv	r3, r0, r3
 8004474:	3301      	adds	r3, #1
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447e:	e02f      	b.n	80044e0 <HAL_I2C_Init+0x268>
 8004480:	08004b59 	.word	0x08004b59
 8004484:	08004b6d 	.word	0x08004b6d
 8004488:	08004b81 	.word	0x08004b81
 800448c:	08004b95 	.word	0x08004b95
 8004490:	08004bc5 	.word	0x08004bc5
 8004494:	08004bd9 	.word	0x08004bd9
 8004498:	08004bed 	.word	0x08004bed
 800449c:	08004c01 	.word	0x08004c01
 80044a0:	08004c15 	.word	0x08004c15
 80044a4:	08004ba9 	.word	0x08004ba9
 80044a8:	08000d51 	.word	0x08000d51
 80044ac:	000186a0 	.word	0x000186a0
 80044b0:	001e847f 	.word	0x001e847f
 80044b4:	003d08ff 	.word	0x003d08ff
 80044b8:	431bde83 	.word	0x431bde83
 80044bc:	10624dd3 	.word	0x10624dd3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1e58      	subs	r0, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	0099      	lsls	r1, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d6:	3301      	adds	r3, #1
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	6809      	ldr	r1, [r1, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800450e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6911      	ldr	r1, [r2, #16]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop

08004578 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	461a      	mov	r2, r3
 8004584:	460b      	mov	r3, r1
 8004586:	817b      	strh	r3, [r7, #10]
 8004588:	4613      	mov	r3, r2
 800458a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800458c:	f7fd ff5c 	bl	8002448 <HAL_GetTick>
 8004590:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b20      	cmp	r3, #32
 800459c:	f040 80e0 	bne.w	8004760 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2319      	movs	r3, #25
 80045a6:	2201      	movs	r2, #1
 80045a8:	4970      	ldr	r1, [pc, #448]	; (800476c <HAL_I2C_Master_Transmit+0x1f4>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f001 fde4 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	e0d3      	b.n	8004762 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_I2C_Master_Transmit+0x50>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e0cc      	b.n	8004762 <HAL_I2C_Master_Transmit+0x1ea>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d007      	beq.n	80045ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2221      	movs	r2, #33	; 0x21
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2210      	movs	r2, #16
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	893a      	ldrh	r2, [r7, #8]
 800461e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a50      	ldr	r2, [pc, #320]	; (8004770 <HAL_I2C_Master_Transmit+0x1f8>)
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004630:	8979      	ldrh	r1, [r7, #10]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f001 fc72 	bl	8005f20 <I2C_MasterRequestWrite>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e08d      	b.n	8004762 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800465c:	e066      	b.n	800472c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	6a39      	ldr	r1, [r7, #32]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f001 fe5e 	bl	8006324 <I2C_WaitOnTXEFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	2b04      	cmp	r3, #4
 8004674:	d107      	bne.n	8004686 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06b      	b.n	8004762 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	781a      	ldrb	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d11b      	bne.n	8004700 <HAL_I2C_Master_Transmit+0x188>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d017      	beq.n	8004700 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	6a39      	ldr	r1, [r7, #32]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f001 fe4e 	bl	80063a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b04      	cmp	r3, #4
 8004716:	d107      	bne.n	8004728 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e01a      	b.n	8004762 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	d194      	bne.n	800465e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	00100002 	.word	0x00100002
 8004770:	ffff0000 	.word	0xffff0000

08004774 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004794:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d003      	beq.n	80047ac <HAL_I2C_EV_IRQHandler+0x38>
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	f040 80b1 	bne.w	800490e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10d      	bne.n	80047e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80047cc:	d003      	beq.n	80047d6 <HAL_I2C_EV_IRQHandler+0x62>
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80047d4:	d101      	bne.n	80047da <HAL_I2C_EV_IRQHandler+0x66>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_I2C_EV_IRQHandler+0x68>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f000 8114 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00b      	beq.n	8004804 <HAL_I2C_EV_IRQHandler+0x90>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f001 fe77 	bl	80064ea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fd6a 	bl	80052d6 <I2C_Master_SB>
 8004802:	e083      	b.n	800490c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_I2C_EV_IRQHandler+0xac>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fde2 	bl	80053e2 <I2C_Master_ADD10>
 800481e:	e075      	b.n	800490c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_I2C_EV_IRQHandler+0xc8>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fdfe 	bl	8005436 <I2C_Master_ADDR>
 800483a:	e067      	b.n	800490c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d036      	beq.n	80048b4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004854:	f000 80db 	beq.w	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00d      	beq.n	800487e <HAL_I2C_EV_IRQHandler+0x10a>
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_I2C_EV_IRQHandler+0x10a>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9d6 	bl	8004c28 <I2C_MasterTransmit_TXE>
 800487c:	e046      	b.n	800490c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80c2 	beq.w	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80bc 	beq.w	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004896:	7bbb      	ldrb	r3, [r7, #14]
 8004898:	2b21      	cmp	r3, #33	; 0x21
 800489a:	d103      	bne.n	80048a4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa62 	bl	8004d66 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a2:	e0b4      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	f040 80b1 	bne.w	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fad3 	bl	8004e58 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b2:	e0ac      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c2:	f000 80a4 	beq.w	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <HAL_I2C_EV_IRQHandler+0x178>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_I2C_EV_IRQHandler+0x178>
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb4c 	bl	8004f82 <I2C_MasterReceive_RXNE>
 80048ea:	e00f      	b.n	800490c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 808b 	beq.w	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8085 	beq.w	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fbfa 	bl	80050fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800490a:	e080      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
 800490c:	e07f      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d004      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	e007      	b.n	8004930 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d011      	beq.n	800495e <HAL_I2C_EV_IRQHandler+0x1ea>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00c      	beq.n	800495e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 ffbe 	bl	80058d8 <I2C_Slave_ADDR>
 800495c:	e05a      	b.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x206>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fff8 	bl	8005968 <I2C_Slave_STOPF>
 8004978:	e04c      	b.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	2b21      	cmp	r3, #33	; 0x21
 800497e:	d002      	beq.n	8004986 <HAL_I2C_EV_IRQHandler+0x212>
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	2b29      	cmp	r3, #41	; 0x29
 8004984:	d120      	bne.n	80049c8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <HAL_I2C_EV_IRQHandler+0x238>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_I2C_EV_IRQHandler+0x238>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fed7 	bl	8005758 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049aa:	e032      	b.n	8004a12 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02d      	beq.n	8004a12 <HAL_I2C_EV_IRQHandler+0x29e>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d028      	beq.n	8004a12 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 ff07 	bl	80057d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049c6:	e024      	b.n	8004a12 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x27a>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x27a>
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 ff15 	bl	8005816 <I2C_SlaveReceive_RXNE>
 80049ec:	e012      	b.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 ff46 	bl	8005894 <I2C_SlaveReceive_BTF>
 8004a08:	e004      	b.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b08a      	sub	sp, #40	; 0x28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <HAL_I2C_ER_IRQHandler+0x4a>
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00d      	beq.n	8004a8a <HAL_I2C_ER_IRQHandler+0x70>
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	f043 0302 	orr.w	r3, r3, #2
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a88:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d03e      	beq.n	8004b12 <HAL_I2C_ER_IRQHandler+0xf8>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d039      	beq.n	8004b12 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004a9e:	7efb      	ldrb	r3, [r7, #27]
 8004aa0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ab8:	7ebb      	ldrb	r3, [r7, #26]
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d112      	bne.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xca>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xca>
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b21      	cmp	r3, #33	; 0x21
 8004ac8:	d008      	beq.n	8004adc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b29      	cmp	r3, #41	; 0x29
 8004ace:	d005      	beq.n	8004adc <HAL_I2C_ER_IRQHandler+0xc2>
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b28      	cmp	r3, #40	; 0x28
 8004ad4:	d106      	bne.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b21      	cmp	r3, #33	; 0x21
 8004ada:	d103      	bne.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 f877 	bl	8005bd0 <I2C_Slave_AF>
 8004ae2:	e016      	b.n	8004b12 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004af6:	7efb      	ldrb	r3, [r7, #27]
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d002      	beq.n	8004b02 <HAL_I2C_ER_IRQHandler+0xe8>
 8004afc:	7efb      	ldrb	r3, [r7, #27]
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d107      	bne.n	8004b12 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00d      	beq.n	8004b38 <HAL_I2C_ER_IRQHandler+0x11e>
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f043 0308 	orr.w	r3, r3, #8
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004b36:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 f8b2 	bl	8005cb4 <I2C_ITError>
  }
}
 8004b50:	bf00      	nop
 8004b52:	3728      	adds	r7, #40	; 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d153      	bne.n	8004cf6 <I2C_MasterTransmit_TXE+0xce>
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b21      	cmp	r3, #33	; 0x21
 8004c52:	d150      	bne.n	8004cf6 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d01e      	beq.n	8004c98 <I2C_MasterTransmit_TXE+0x70>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d01b      	beq.n	8004c98 <I2C_MasterTransmit_TXE+0x70>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c66:	d017      	beq.n	8004c98 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2211      	movs	r2, #17
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c96:	e062      	b.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d108      	bne.n	8004ce4 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ce2:	e03c      	b.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cf4:	e033      	b.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b21      	cmp	r3, #33	; 0x21
 8004cfa:	d005      	beq.n	8004d08 <I2C_MasterTransmit_TXE+0xe0>
 8004cfc:	7bbb      	ldrb	r3, [r7, #14]
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d12d      	bne.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b22      	cmp	r3, #34	; 0x22
 8004d06:	d12a      	bne.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d20:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d22:	e01c      	b.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d103      	bne.n	8004d38 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f891 	bl	8004e58 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d36:	e012      	b.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	781a      	ldrb	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d5c:	e7ff      	b.n	8004d5e <I2C_MasterTransmit_TXE+0x136>
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b21      	cmp	r3, #33	; 0x21
 8004d7e:	d167      	bne.n	8004e50 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d012      	beq.n	8004db0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004dae:	e04f      	b.n	8004e50 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d01e      	beq.n	8004df4 <I2C_MasterTransmit_BTF+0x8e>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d01b      	beq.n	8004df4 <I2C_MasterTransmit_BTF+0x8e>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dc2:	d017      	beq.n	8004df4 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dd2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2211      	movs	r2, #17
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
}
 8004df2:	e02d      	b.n	8004e50 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d108      	bne.n	8004e40 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
}
 8004e3e:	e007      	b.n	8004e50 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11d      	bne.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10b      	bne.n	8004e90 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e8e:	e074      	b.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	121b      	asrs	r3, r3, #8
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eaa:	e066      	b.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10b      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eca:	e056      	b.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d152      	bne.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b22      	cmp	r3, #34	; 0x22
 8004ed8:	d10d      	bne.n	8004ef6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ef4:	e041      	b.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b21      	cmp	r3, #33	; 0x21
 8004f04:	d112      	bne.n	8004f2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f2a:	e026      	b.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d121      	bne.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b21      	cmp	r3, #33	; 0x21
 8004f3a:	d11e      	bne.n	8004f7a <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b22      	cmp	r3, #34	; 0x22
 8004f94:	f040 80af 	bne.w	80050f6 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d921      	bls.n	8004fea <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	f040 808f 	bne.w	80050f6 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004fe8:	e085      	b.n	80050f6 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d078      	beq.n	80050e4 <I2C_MasterReceive_RXNE+0x162>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d002      	beq.n	8004ffe <I2C_MasterReceive_RXNE+0x7c>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d172      	bne.n	80050e4 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 fa12 	bl	8006428 <I2C_WaitOnSTOPRequestThroughIT>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d144      	bne.n	8005094 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005028:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d10b      	bne.n	800507c <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800507a:	e03c      	b.n	80050f6 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2212      	movs	r2, #18
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005092:	e030      	b.n	80050f6 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050e2:	e008      	b.n	80050f6 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f2:	605a      	str	r2, [r3, #4]
}
 80050f4:	e7ff      	b.n	80050f6 <I2C_MasterReceive_RXNE+0x174>
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b04      	cmp	r3, #4
 8005114:	d11b      	bne.n	800514e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005124:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800514c:	e0bf      	b.n	80052ce <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b03      	cmp	r3, #3
 8005156:	d129      	bne.n	80051ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b04      	cmp	r3, #4
 800516c:	d00a      	beq.n	8005184 <I2C_MasterReceive_BTF+0x86>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d007      	beq.n	8005184 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005182:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051aa:	e090      	b.n	80052ce <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d178      	bne.n	80052a8 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d002      	beq.n	80051c2 <I2C_MasterReceive_BTF+0xc4>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d108      	bne.n	80051d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e019      	b.n	8005208 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d002      	beq.n	80051e0 <I2C_MasterReceive_BTF+0xe2>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d108      	bne.n	80051f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e00a      	b.n	8005208 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d007      	beq.n	8005208 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005262:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d10b      	bne.n	8005290 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
}
 800528e:	e01e      	b.n	80052ce <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2212      	movs	r2, #18
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
}
 80052a6:	e012      	b.n	80052ce <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d117      	bne.n	800531a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005302:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005304:	e067      	b.n	80053d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]
}
 8005318:	e05d      	b.n	80053d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005322:	d133      	bne.n	800538c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b21      	cmp	r3, #33	; 0x21
 800532e:	d109      	bne.n	8005344 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005340:	611a      	str	r2, [r3, #16]
 8005342:	e008      	b.n	8005356 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <I2C_Master_SB+0x92>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d108      	bne.n	800537a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d032      	beq.n	80053d6 <I2C_Master_SB+0x100>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d02d      	beq.n	80053d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005388:	605a      	str	r2, [r3, #4]
}
 800538a:	e024      	b.n	80053d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10e      	bne.n	80053b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	b29b      	uxth	r3, r3
 800539a:	11db      	asrs	r3, r3, #7
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0306 	and.w	r3, r3, #6
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f063 030f 	orn	r3, r3, #15
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]
}
 80053b0:	e011      	b.n	80053d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10d      	bne.n	80053d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	b29b      	uxth	r3, r3
 80053c0:	11db      	asrs	r3, r3, #7
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0306 	and.w	r3, r3, #6
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f063 030e 	orn	r3, r3, #14
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	611a      	str	r2, [r3, #16]
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <I2C_Master_ADD10+0x26>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00c      	beq.n	800542a <I2C_Master_ADD10+0x48>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005428:	605a      	str	r2, [r3, #4]
  }
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005436:	b480      	push	{r7}
 8005438:	b091      	sub	sp, #68	; 0x44
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b22      	cmp	r3, #34	; 0x22
 800545e:	f040 8169 	bne.w	8005734 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <I2C_Master_ADDR+0x54>
 800546a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d10b      	bne.n	800548a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005472:	2300      	movs	r3, #0
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	633b      	str	r3, [r7, #48]	; 0x30
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	e160      	b.n	800574c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548e:	2b00      	cmp	r3, #0
 8005490:	d11d      	bne.n	80054ce <I2C_Master_ADDR+0x98>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800549a:	d118      	bne.n	80054ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549c:	2300      	movs	r3, #0
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	651a      	str	r2, [r3, #80]	; 0x50
 80054cc:	e13e      	b.n	800574c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d113      	bne.n	8005500 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d8:	2300      	movs	r3, #0
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e115      	b.n	800572c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b01      	cmp	r3, #1
 8005508:	f040 808a 	bne.w	8005620 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005512:	d137      	bne.n	8005584 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005522:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005532:	d113      	bne.n	800555c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005542:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005544:	2300      	movs	r3, #0
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	e0e7      	b.n	800572c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555c:	2300      	movs	r3, #0
 800555e:	623b      	str	r3, [r7, #32]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e0d3      	b.n	800572c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b08      	cmp	r3, #8
 8005588:	d02e      	beq.n	80055e8 <I2C_Master_ADDR+0x1b2>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b20      	cmp	r3, #32
 800558e:	d02b      	beq.n	80055e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	2b12      	cmp	r3, #18
 8005594:	d102      	bne.n	800559c <I2C_Master_ADDR+0x166>
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b01      	cmp	r3, #1
 800559a:	d125      	bne.n	80055e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d00e      	beq.n	80055c0 <I2C_Master_ADDR+0x18a>
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d00b      	beq.n	80055c0 <I2C_Master_ADDR+0x18a>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d008      	beq.n	80055c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e007      	b.n	80055d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	e0a1      	b.n	800572c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e085      	b.n	800572c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d14d      	bne.n	80056c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2b04      	cmp	r3, #4
 800562e:	d016      	beq.n	800565e <I2C_Master_ADDR+0x228>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	2b02      	cmp	r3, #2
 8005634:	d013      	beq.n	800565e <I2C_Master_ADDR+0x228>
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	2b10      	cmp	r3, #16
 800563a:	d010      	beq.n	800565e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e007      	b.n	800566e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800566c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567c:	d117      	bne.n	80056ae <I2C_Master_ADDR+0x278>
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005684:	d00b      	beq.n	800569e <I2C_Master_ADDR+0x268>
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	2b01      	cmp	r3, #1
 800568a:	d008      	beq.n	800569e <I2C_Master_ADDR+0x268>
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	2b08      	cmp	r3, #8
 8005690:	d005      	beq.n	800569e <I2C_Master_ADDR+0x268>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2b10      	cmp	r3, #16
 8005696:	d002      	beq.n	800569e <I2C_Master_ADDR+0x268>
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	2b20      	cmp	r3, #32
 800569c:	d107      	bne.n	80056ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	e032      	b.n	800572c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e4:	d117      	bne.n	8005716 <I2C_Master_ADDR+0x2e0>
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056ec:	d00b      	beq.n	8005706 <I2C_Master_ADDR+0x2d0>
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d008      	beq.n	8005706 <I2C_Master_ADDR+0x2d0>
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d005      	beq.n	8005706 <I2C_Master_ADDR+0x2d0>
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d002      	beq.n	8005706 <I2C_Master_ADDR+0x2d0>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b20      	cmp	r3, #32
 8005704:	d107      	bne.n	8005716 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005714:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005716:	2300      	movs	r3, #0
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005732:	e00b      	b.n	800574c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
}
 800574a:	e7ff      	b.n	800574c <I2C_Master_ADDR+0x316>
 800574c:	bf00      	nop
 800574e:	3744      	adds	r7, #68	; 0x44
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d02c      	beq.n	80057cc <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d115      	bne.n	80057cc <I2C_SlaveTransmit_TXE+0x74>
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b29      	cmp	r3, #41	; 0x29
 80057a4:	d112      	bne.n	80057cc <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2221      	movs	r2, #33	; 0x21
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2228      	movs	r2, #40	; 0x28
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d011      	beq.n	800580a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d02d      	beq.n	800588c <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d115      	bne.n	800588c <I2C_SlaveReceive_RXNE+0x76>
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b2a      	cmp	r3, #42	; 0x2a
 8005864:	d112      	bne.n	800588c <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005874:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2222      	movs	r2, #34	; 0x22
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2228      	movs	r2, #40	; 0x28
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058f2:	2b28      	cmp	r3, #40	; 0x28
 80058f4:	d125      	bne.n	8005942 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005904:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	81bb      	strh	r3, [r7, #12]
 8005924:	e002      	b.n	800592c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005938:	89ba      	ldrh	r2, [r7, #12]
 800593a:	7bf9      	ldrb	r1, [r7, #15]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005940:	e00e      	b.n	8005960 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005976:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005986:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c4:	d172      	bne.n	8005aac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b22      	cmp	r3, #34	; 0x22
 80059ca:	d002      	beq.n	80059d2 <I2C_Slave_STOPF+0x6a>
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b2a      	cmp	r3, #42	; 0x2a
 80059d0:	d135      	bne.n	8005a3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe f976 	bl	8003cfc <HAL_DMA_GetState>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d049      	beq.n	8005aaa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	4a6b      	ldr	r2, [pc, #428]	; (8005bc8 <I2C_Slave_STOPF+0x260>)
 8005a1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd ffbe 	bl	80039a4 <HAL_DMA_Abort_IT>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d03d      	beq.n	8005aaa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a3c:	e035      	b.n	8005aaa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0204 	orr.w	r2, r3, #4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe f940 	bl	8003cfc <HAL_DMA_GetState>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d014      	beq.n	8005aac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	4a50      	ldr	r2, [pc, #320]	; (8005bc8 <I2C_Slave_STOPF+0x260>)
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fd ff88 	bl	80039a4 <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	e000      	b.n	8005aac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005aaa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d03e      	beq.n	8005b34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d112      	bne.n	8005aea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d112      	bne.n	8005b1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	f043 0204 	orr.w	r2, r3, #4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8b9 	bl	8005cb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b42:	e03c      	b.n	8005bbe <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b2a      	cmp	r3, #42	; 0x2a
 8005b48:	d10a      	bne.n	8005b60 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2228      	movs	r2, #40	; 0x28
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b28      	cmp	r3, #40	; 0x28
 8005b6a:	d112      	bne.n	8005b92 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <I2C_Slave_STOPF+0x264>)
 8005b70:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
}
 8005b90:	e015      	b.n	8005bbe <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	2b22      	cmp	r3, #34	; 0x22
 8005b98:	d002      	beq.n	8005ba0 <I2C_Slave_STOPF+0x238>
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b22      	cmp	r3, #34	; 0x22
 8005b9e:	d10e      	bne.n	8005bbe <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08006025 	.word	0x08006025
 8005bcc:	ffff0000 	.word	0xffff0000

08005bd0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d002      	beq.n	8005bf2 <I2C_Slave_AF+0x22>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d12a      	bne.n	8005c48 <I2C_Slave_AF+0x78>
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b28      	cmp	r3, #40	; 0x28
 8005bf6:	d127      	bne.n	8005c48 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a2d      	ldr	r2, [pc, #180]	; (8005cb0 <I2C_Slave_AF+0xe0>)
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c46:	e02f      	b.n	8005ca8 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b21      	cmp	r3, #33	; 0x21
 8005c4c:	d127      	bne.n	8005c9e <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <I2C_Slave_AF+0xe0>)
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2221      	movs	r2, #33	; 0x21
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c78:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c82:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
}
 8005c9c:	e004      	b.n	8005ca8 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ca6:	615a      	str	r2, [r3, #20]
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	ffff0000 	.word	0xffff0000

08005cb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d002      	beq.n	8005cd8 <I2C_ITError+0x24>
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d10a      	bne.n	8005cee <I2C_ITError+0x3a>
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b22      	cmp	r3, #34	; 0x22
 8005cdc:	d107      	bne.n	8005cee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cf4:	2b28      	cmp	r3, #40	; 0x28
 8005cf6:	d107      	bne.n	8005d08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2228      	movs	r2, #40	; 0x28
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d06:	e015      	b.n	8005d34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d16:	d00a      	beq.n	8005d2e <I2C_ITError+0x7a>
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b60      	cmp	r3, #96	; 0x60
 8005d1c:	d007      	beq.n	8005d2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d42:	d162      	bne.n	8005e0a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d020      	beq.n	8005da4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	4a6c      	ldr	r2, [pc, #432]	; (8005f18 <I2C_ITError+0x264>)
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd fe18 	bl	80039a4 <HAL_DMA_Abort_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 808b 	beq.w	8005e92 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4798      	blx	r3
 8005da2:	e076      	b.n	8005e92 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	4a5b      	ldr	r2, [pc, #364]	; (8005f18 <I2C_ITError+0x264>)
 8005daa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fd fdf7 	bl	80039a4 <HAL_DMA_Abort_IT>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d06a      	beq.n	8005e92 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d10b      	bne.n	8005de2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e04:	4610      	mov	r0, r2
 8005e06:	4798      	blx	r3
 8005e08:	e043      	b.n	8005e92 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b60      	cmp	r3, #96	; 0x60
 8005e14:	d126      	bne.n	8005e64 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d10b      	bne.n	8005e4a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
 8005e62:	e016      	b.n	8005e92 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d10b      	bne.n	8005e8a <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10e      	bne.n	8005ec0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ece:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d114      	bne.n	8005f0e <I2C_ITError+0x25a>
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	2b28      	cmp	r3, #40	; 0x28
 8005ee8:	d111      	bne.n	8005f0e <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <I2C_ITError+0x268>)
 8005eee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	08006025 	.word	0x08006025
 8005f1c:	ffff0000 	.word	0xffff0000

08005f20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d006      	beq.n	8005f4a <I2C_MasterRequestWrite+0x2a>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d003      	beq.n	8005f4a <I2C_MasterRequestWrite+0x2a>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f48:	d108      	bne.n	8005f5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e00b      	b.n	8005f74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	2b12      	cmp	r3, #18
 8005f62:	d107      	bne.n	8005f74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f8f9 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9a:	d103      	bne.n	8005fa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e035      	b.n	8006014 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb0:	d108      	bne.n	8005fc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fb2:	897b      	ldrh	r3, [r7, #10]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fc0:	611a      	str	r2, [r3, #16]
 8005fc2:	e01b      	b.n	8005ffc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fc4:	897b      	ldrh	r3, [r7, #10]
 8005fc6:	11db      	asrs	r3, r3, #7
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f003 0306 	and.w	r3, r3, #6
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f063 030f 	orn	r3, r3, #15
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	490e      	ldr	r1, [pc, #56]	; (800601c <I2C_MasterRequestWrite+0xfc>)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f91f 	bl	8006226 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e010      	b.n	8006014 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ff2:	897b      	ldrh	r3, [r7, #10]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4907      	ldr	r1, [pc, #28]	; (8006020 <I2C_MasterRequestWrite+0x100>)
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f90f 	bl	8006226 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	00010008 	.word	0x00010008
 8006020:	00010002 	.word	0x00010002

08006024 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800603e:	4b4c      	ldr	r3, [pc, #304]	; (8006170 <I2C_DMAAbort+0x14c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	08db      	lsrs	r3, r3, #3
 8006044:	4a4b      	ldr	r2, [pc, #300]	; (8006174 <I2C_DMAAbort+0x150>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	0a1a      	lsrs	r2, r3, #8
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	00da      	lsls	r2, r3, #3
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0220 	orr.w	r2, r3, #32
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800606a:	e00a      	b.n	8006082 <I2C_DMAAbort+0x5e>
    }
    count--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b01      	subs	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d0ea      	beq.n	8006058 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	2200      	movs	r2, #0
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	2200      	movs	r2, #0
 80060a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c4:	2200      	movs	r2, #0
 80060c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	2200      	movs	r2, #0
 80060d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b60      	cmp	r3, #96	; 0x60
 80060f2:	d10f      	bne.n	8006114 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	6978      	ldr	r0, [r7, #20]
 8006110:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006112:	e028      	b.n	8006166 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006114:	7cfb      	ldrb	r3, [r7, #19]
 8006116:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800611a:	2b28      	cmp	r3, #40	; 0x28
 800611c:	d117      	bne.n	800614e <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800613c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2228      	movs	r2, #40	; 0x28
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800614c:	e007      	b.n	800615e <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	4798      	blx	r3
}
 8006166:	bf00      	nop
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000010 	.word	0x20000010
 8006174:	14f8b589 	.word	0x14f8b589

08006178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006188:	e025      	b.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d021      	beq.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006192:	f7fc f959 	bl	8002448 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d116      	bne.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f043 0220 	orr.w	r2, r3, #32
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e023      	b.n	800621e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10d      	bne.n	80061fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf0c      	ite	eq
 80061f2:	2301      	moveq	r3, #1
 80061f4:	2300      	movne	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	e00c      	b.n	8006216 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	43da      	mvns	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4013      	ands	r3, r2
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	429a      	cmp	r2, r3
 800621a:	d0b6      	beq.n	800618a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006234:	e051      	b.n	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006244:	d123      	bne.n	800628e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006254:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800625e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0204 	orr.w	r2, r3, #4
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e046      	b.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d021      	beq.n	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fc f8d7 	bl	8002448 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d116      	bne.n	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e020      	b.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d10c      	bne.n	80062fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	43da      	mvns	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4013      	ands	r3, r2
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bf14      	ite	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	2300      	moveq	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	e00b      	b.n	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	43da      	mvns	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf14      	ite	ne
 8006310:	2301      	movne	r3, #1
 8006312:	2300      	moveq	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d18d      	bne.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006330:	e02d      	b.n	800638e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f8aa 	bl	800648c <I2C_IsAcknowledgeFailed>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e02d      	b.n	800639e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d021      	beq.n	800638e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fc f87d 	bl	8002448 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d116      	bne.n	800638e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e007      	b.n	800639e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d1ca      	bne.n	8006332 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063b2:	e02d      	b.n	8006410 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f869 	bl	800648c <I2C_IsAcknowledgeFailed>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e02d      	b.n	8006420 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d021      	beq.n	8006410 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063cc:	f7fc f83c 	bl	8002448 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d302      	bcc.n	80063e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d116      	bne.n	8006410 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e007      	b.n	8006420 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b04      	cmp	r3, #4
 800641c:	d1ca      	bne.n	80063b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006434:	4b13      	ldr	r3, [pc, #76]	; (8006484 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	08db      	lsrs	r3, r3, #3
 800643a:	4a13      	ldr	r2, [pc, #76]	; (8006488 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	0a1a      	lsrs	r2, r3, #8
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3b01      	subs	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e008      	b.n	8006478 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d0e9      	beq.n	800644a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20000010 	.word	0x20000010
 8006488:	14f8b589 	.word	0x14f8b589

0800648c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a2:	d11b      	bne.n	80064dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	f043 0204 	orr.w	r2, r3, #4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80064fa:	d103      	bne.n	8006504 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006502:	e007      	b.n	8006514 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800650c:	d102      	bne.n	8006514 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2208      	movs	r2, #8
 8006512:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006522:	b08f      	sub	sp, #60	; 0x3c
 8006524:	af0a      	add	r7, sp, #40	; 0x28
 8006526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e10f      	b.n	8006752 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f008 f95f 	bl	800e810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2203      	movs	r2, #3
 8006556:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f004 fcb8 	bl	800aee6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	687e      	ldr	r6, [r7, #4]
 800657e:	466d      	mov	r5, sp
 8006580:	f106 0410 	add.w	r4, r6, #16
 8006584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800658a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800658c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006590:	e885 0003 	stmia.w	r5, {r0, r1}
 8006594:	1d33      	adds	r3, r6, #4
 8006596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006598:	6838      	ldr	r0, [r7, #0]
 800659a:	f004 fb8f 	bl	800acbc <USB_CoreInit>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0d0      	b.n	8006752 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f004 fca6 	bl	800af08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	e04a      	b.n	8006658 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80065c2:	7bfa      	ldrb	r2, [r7, #15]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	333d      	adds	r3, #61	; 0x3d
 80065d2:	2201      	movs	r2, #1
 80065d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80065d6:	7bfa      	ldrb	r2, [r7, #15]
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	333c      	adds	r3, #60	; 0x3c
 80065e6:	7bfa      	ldrb	r2, [r7, #15]
 80065e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80065ea:	7bfa      	ldrb	r2, [r7, #15]
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	b298      	uxth	r0, r3
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3344      	adds	r3, #68	; 0x44
 80065fe:	4602      	mov	r2, r0
 8006600:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	3340      	adds	r3, #64	; 0x40
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006616:	7bfa      	ldrb	r2, [r7, #15]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	3348      	adds	r3, #72	; 0x48
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800662a:	7bfa      	ldrb	r2, [r7, #15]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	334c      	adds	r3, #76	; 0x4c
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800663e:	7bfa      	ldrb	r2, [r7, #15]
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	3354      	adds	r3, #84	; 0x54
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	3301      	adds	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
 8006658:	7bfa      	ldrb	r2, [r7, #15]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d3af      	bcc.n	80065c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	e044      	b.n	80066f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006668:	7bfa      	ldrb	r2, [r7, #15]
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800667e:	7bfa      	ldrb	r2, [r7, #15]
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006690:	7bfa      	ldrb	r2, [r7, #15]
 8006692:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006694:	7bfa      	ldrb	r2, [r7, #15]
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4613      	mov	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80066aa:	7bfa      	ldrb	r2, [r7, #15]
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80066c0:	7bfa      	ldrb	r2, [r7, #15]
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4613      	mov	r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80066d6:	7bfa      	ldrb	r2, [r7, #15]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	3301      	adds	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	7bfa      	ldrb	r2, [r7, #15]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d3b5      	bcc.n	8006668 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	687e      	ldr	r6, [r7, #4]
 8006704:	466d      	mov	r5, sp
 8006706:	f106 0410 	add.w	r4, r6, #16
 800670a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800670c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800670e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006712:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006716:	e885 0003 	stmia.w	r5, {r0, r1}
 800671a:	1d33      	adds	r3, r6, #4
 800671c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800671e:	6838      	ldr	r0, [r7, #0]
 8006720:	f004 fc3e 	bl	800afa0 <USB_DevInit>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e00d      	b.n	8006752 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f005 fd8d 	bl	800c26a <USB_DevDisconnect>

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800675a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_PCD_Start+0x1c>
 8006772:	2302      	movs	r3, #2
 8006774:	e020      	b.n	80067b8 <HAL_PCD_Start+0x5e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	2b01      	cmp	r3, #1
 8006784:	d109      	bne.n	800679a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800678a:	2b01      	cmp	r3, #1
 800678c:	d005      	beq.n	800679a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f004 fb90 	bl	800aec4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f005 fd3d 	bl	800c228 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b08d      	sub	sp, #52	; 0x34
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f005 fdfb 	bl	800c3d2 <USB_GetMode>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 848a 	bne.w	80070f8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f005 fd5f 	bl	800c2ac <USB_ReadInterrupts>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8480 	beq.w	80070f6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f005 fd4c 	bl	800c2ac <USB_ReadInterrupts>
 8006814:	4603      	mov	r3, r0
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b02      	cmp	r3, #2
 800681c:	d107      	bne.n	800682e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695a      	ldr	r2, [r3, #20]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f002 0202 	and.w	r2, r2, #2
 800682c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f005 fd3a 	bl	800c2ac <USB_ReadInterrupts>
 8006838:	4603      	mov	r3, r0
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b10      	cmp	r3, #16
 8006840:	d161      	bne.n	8006906 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0210 	bic.w	r2, r2, #16
 8006850:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f003 020f 	and.w	r2, r3, #15
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	0c5b      	lsrs	r3, r3, #17
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	2b02      	cmp	r3, #2
 800687c:	d124      	bne.n	80068c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006884:	4013      	ands	r3, r2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d035      	beq.n	80068f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006898:	b29b      	uxth	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	6a38      	ldr	r0, [r7, #32]
 800689e:	f005 fb71 	bl	800bf84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ae:	441a      	add	r2, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068c0:	441a      	add	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	621a      	str	r2, [r3, #32]
 80068c6:	e016      	b.n	80068f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	0c5b      	lsrs	r3, r3, #17
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	2b06      	cmp	r3, #6
 80068d2:	d110      	bne.n	80068f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068da:	2208      	movs	r2, #8
 80068dc:	4619      	mov	r1, r3
 80068de:	6a38      	ldr	r0, [r7, #32]
 80068e0:	f005 fb50 	bl	800bf84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6a1a      	ldr	r2, [r3, #32]
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068f0:	441a      	add	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0210 	orr.w	r2, r2, #16
 8006904:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f005 fcce 	bl	800c2ac <USB_ReadInterrupts>
 8006910:	4603      	mov	r3, r0
 8006912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006916:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800691a:	f040 80a7 	bne.w	8006a6c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f005 fcd3 	bl	800c2d2 <USB_ReadDevAllOutEpInterrupt>
 800692c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800692e:	e099      	b.n	8006a64 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 808e 	beq.w	8006a58 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f005 fcf7 	bl	800c33a <USB_ReadDevOutEPInterrupt>
 800694c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	461a      	mov	r2, r3
 8006966:	2301      	movs	r3, #1
 8006968:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800696a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fec3 	bl	80076f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00c      	beq.n	8006996 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006988:	461a      	mov	r2, r3
 800698a:	2308      	movs	r3, #8
 800698c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800698e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 ff99 	bl	80078c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	461a      	mov	r2, r3
 80069ae:	2310      	movs	r3, #16
 80069b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d030      	beq.n	8006a1e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c4:	2b80      	cmp	r3, #128	; 0x80
 80069c6:	d109      	bne.n	80069dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80069dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	78db      	ldrb	r3, [r3, #3]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d108      	bne.n	8006a0c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f008 f808 	bl	800ea1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	461a      	mov	r2, r3
 8006a36:	2320      	movs	r3, #32
 8006a38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a50:	461a      	mov	r2, r3
 8006a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f47f af62 	bne.w	8006930 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f005 fc1b 	bl	800c2ac <USB_ReadInterrupts>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a80:	f040 80db 	bne.w	8006c3a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f005 fc3c 	bl	800c306 <USB_ReadDevAllInEpInterrupt>
 8006a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006a94:	e0cd      	b.n	8006c32 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80c2 	beq.w	8006c26 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f005 fc62 	bl	800c376 <USB_ReadDevInEPInterrupt>
 8006ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d057      	beq.n	8006b6e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	69f9      	ldr	r1, [r7, #28]
 8006ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ade:	4013      	ands	r3, r2
 8006ae0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aee:	461a      	mov	r2, r3
 8006af0:	2301      	movs	r3, #1
 8006af2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d132      	bne.n	8006b62 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b00:	4613      	mov	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	334c      	adds	r3, #76	; 0x4c
 8006b0c:	6819      	ldr	r1, [r3, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4403      	add	r3, r0
 8006b1c:	3348      	adds	r3, #72	; 0x48
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4419      	add	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b26:	4613      	mov	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4403      	add	r3, r0
 8006b30:	334c      	adds	r3, #76	; 0x4c
 8006b32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d113      	bne.n	8006b62 <HAL_PCD_IRQHandler+0x3a2>
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3e:	4613      	mov	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	3354      	adds	r3, #84	; 0x54
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d108      	bne.n	8006b62 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	f005 fc69 	bl	800c434 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f007 fed2 	bl	800e912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	461a      	mov	r2, r3
 8006b86:	2308      	movs	r3, #8
 8006b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2310      	movs	r3, #16
 8006ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d023      	beq.n	8006c14 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bce:	6a38      	ldr	r0, [r7, #32]
 8006bd0:	f004 fb4a 	bl	800b268 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	3338      	adds	r3, #56	; 0x38
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	3304      	adds	r3, #4
 8006be6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	78db      	ldrb	r3, [r3, #3]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d108      	bne.n	8006c02 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f007 ff1f 	bl	800ea40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	461a      	mov	r2, r3
 8006c10:	2302      	movs	r3, #2
 8006c12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fcdb 	bl	80075dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	3301      	adds	r3, #1
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	085b      	lsrs	r3, r3, #1
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f af2e 	bne.w	8006a96 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f005 fb34 	bl	800c2ac <USB_ReadInterrupts>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4e:	d122      	bne.n	8006c96 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d108      	bne.n	8006c80 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006c76:	2100      	movs	r1, #0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fec3 	bl	8007a04 <HAL_PCDEx_LPM_Callback>
 8006c7e:	e002      	b.n	8006c86 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f007 febd 	bl	800ea00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	695a      	ldr	r2, [r3, #20]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f005 fb06 	bl	800c2ac <USB_ReadInterrupts>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d112      	bne.n	8006cd2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d102      	bne.n	8006cc2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f007 fe79 	bl	800e9b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006cd0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f005 fae8 	bl	800c2ac <USB_ReadInterrupts>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce6:	f040 80b7 	bne.w	8006e58 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2110      	movs	r1, #16
 8006d04:	4618      	mov	r0, r3
 8006d06:	f004 faaf 	bl	800b268 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d0e:	e046      	b.n	8006d9e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	461a      	mov	r2, r3
 8006d52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d3b3      	bcc.n	8006d10 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006dba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d016      	beq.n	8006df2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dd4:	f043 030b 	orr.w	r3, r3, #11
 8006dd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de4:	69fa      	ldr	r2, [r7, #28]
 8006de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dea:	f043 030b 	orr.w	r3, r3, #11
 8006dee:	6453      	str	r3, [r2, #68]	; 0x44
 8006df0:	e015      	b.n	8006e1e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006e08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e18:	f043 030b 	orr.w	r3, r3, #11
 8006e1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e42:	461a      	mov	r2, r3
 8006e44:	f005 faf6 	bl	800c434 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f005 fa25 	bl	800c2ac <USB_ReadInterrupts>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6c:	d124      	bne.n	8006eb8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f005 fabb 	bl	800c3ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f004 fa70 	bl	800b362 <USB_GetDevSpeed>
 8006e82:	4603      	mov	r3, r0
 8006e84:	461a      	mov	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681c      	ldr	r4, [r3, #0]
 8006e8e:	f001 fa29 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 8006e92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f003 ff6f 	bl	800ad80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f007 fd5d 	bl	800e962 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f005 f9f5 	bl	800c2ac <USB_ReadInterrupts>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d10a      	bne.n	8006ee2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f007 fd3a 	bl	800e946 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695a      	ldr	r2, [r3, #20]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f002 0208 	and.w	r2, r2, #8
 8006ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f005 f9e0 	bl	800c2ac <USB_ReadInterrupts>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d122      	bne.n	8006f3c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f02:	2301      	movs	r3, #1
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e014      	b.n	8006f32 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d105      	bne.n	8006f2c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb27 	bl	800757a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	3301      	adds	r3, #1
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d3e5      	bcc.n	8006f08 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f005 f9b3 	bl	800c2ac <USB_ReadInterrupts>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f50:	d13b      	bne.n	8006fca <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f52:	2301      	movs	r3, #1
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	e02b      	b.n	8006fb0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	3340      	adds	r3, #64	; 0x40
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d115      	bne.n	8006faa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006f7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da12      	bge.n	8006faa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	333f      	adds	r3, #63	; 0x3f
 8006f94:	2201      	movs	r2, #1
 8006f96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fae8 	bl	800757a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	3301      	adds	r3, #1
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d3ce      	bcc.n	8006f58 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695a      	ldr	r2, [r3, #20]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f005 f96c 	bl	800c2ac <USB_ReadInterrupts>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fde:	d155      	bne.n	800708c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe4:	e045      	b.n	8007072 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d12e      	bne.n	800706c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800700e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007010:	2b00      	cmp	r3, #0
 8007012:	da2b      	bge.n	800706c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007020:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007024:	429a      	cmp	r2, r3
 8007026:	d121      	bne.n	800706c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702c:	4613      	mov	r3, r2
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800703a:	2201      	movs	r2, #1
 800703c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007068:	6053      	str	r3, [r2, #4]
            break;
 800706a:	e007      	b.n	800707c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	3301      	adds	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007078:	429a      	cmp	r2, r3
 800707a:	d3b4      	bcc.n	8006fe6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	695a      	ldr	r2, [r3, #20]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800708a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f005 f90b 	bl	800c2ac <USB_ReadInterrupts>
 8007096:	4603      	mov	r3, r0
 8007098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800709c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a0:	d10a      	bne.n	80070b8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f007 fcde 	bl	800ea64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80070b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f005 f8f5 	bl	800c2ac <USB_ReadInterrupts>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d115      	bne.n	80070f8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f007 fcce 	bl	800ea80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6859      	ldr	r1, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	605a      	str	r2, [r3, #4]
 80070f4:	e000      	b.n	80070f8 <HAL_PCD_IRQHandler+0x938>
      return;
 80070f6:	bf00      	nop
    }
  }
}
 80070f8:	3734      	adds	r7, #52	; 0x34
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd90      	pop	{r4, r7, pc}

080070fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_PCD_SetAddress+0x1a>
 8007114:	2302      	movs	r3, #2
 8007116:	e013      	b.n	8007140 <HAL_PCD_SetAddress+0x42>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f005 f853 	bl	800c1dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	4603      	mov	r3, r0
 8007158:	70fb      	strb	r3, [r7, #3]
 800715a:	460b      	mov	r3, r1
 800715c:	803b      	strh	r3, [r7, #0]
 800715e:	4613      	mov	r3, r2
 8007160:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800716a:	2b00      	cmp	r3, #0
 800716c:	da0f      	bge.n	800718e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	3338      	adds	r3, #56	; 0x38
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	3304      	adds	r3, #4
 8007184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	705a      	strb	r2, [r3, #1]
 800718c:	e00f      	b.n	80071ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	f003 020f 	and.w	r2, r3, #15
 8007194:	4613      	mov	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4413      	add	r3, r2
 80071a4:	3304      	adds	r3, #4
 80071a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80071ba:	883a      	ldrh	r2, [r7, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	78ba      	ldrb	r2, [r7, #2]
 80071c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80071d8:	78bb      	ldrb	r3, [r7, #2]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d102      	bne.n	80071e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_PCD_EP_Open+0xaa>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e00e      	b.n	8007210 <HAL_PCD_EP_Open+0xc8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	4618      	mov	r0, r3
 8007202:	f004 f8d3 	bl	800b3ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800720e:	7afb      	ldrb	r3, [r7, #11]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007228:	2b00      	cmp	r3, #0
 800722a:	da0f      	bge.n	800724c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	f003 020f 	and.w	r2, r3, #15
 8007232:	4613      	mov	r3, r2
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	3338      	adds	r3, #56	; 0x38
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4413      	add	r3, r2
 8007240:	3304      	adds	r3, #4
 8007242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	705a      	strb	r2, [r3, #1]
 800724a:	e00f      	b.n	800726c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	f003 020f 	and.w	r2, r3, #15
 8007252:	4613      	mov	r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	4413      	add	r3, r2
 8007262:	3304      	adds	r3, #4
 8007264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	b2da      	uxtb	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_PCD_EP_Close+0x6e>
 8007282:	2302      	movs	r3, #2
 8007284:	e00e      	b.n	80072a4 <HAL_PCD_EP_Close+0x8c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	4618      	mov	r0, r3
 8007296:	f004 f911 	bl	800b4bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	460b      	mov	r3, r1
 80072ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	f003 020f 	and.w	r2, r3, #15
 80072c2:	4613      	mov	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	3304      	adds	r3, #4
 80072d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2200      	movs	r2, #0
 80072e6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2200      	movs	r2, #0
 80072ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072ee:	7afb      	ldrb	r3, [r7, #11]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d102      	bne.n	8007308 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007308:	7afb      	ldrb	r3, [r7, #11]
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	2b00      	cmp	r3, #0
 8007310:	d109      	bne.n	8007326 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	6979      	ldr	r1, [r7, #20]
 8007320:	f004 fbf0 	bl	800bb04 <USB_EP0StartXfer>
 8007324:	e008      	b.n	8007338 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	6979      	ldr	r1, [r7, #20]
 8007334:	f004 f99e 	bl	800b674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	f003 020f 	and.w	r2, r3, #15
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007364:	681b      	ldr	r3, [r3, #0]
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
 800737e:	460b      	mov	r3, r1
 8007380:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007382:	7afb      	ldrb	r3, [r7, #11]
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	4613      	mov	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	3338      	adds	r3, #56	; 0x38
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2200      	movs	r2, #0
 80073aa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2201      	movs	r2, #1
 80073b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d102      	bne.n	80073cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	f004 fb8e 	bl	800bb04 <USB_EP0StartXfer>
 80073e8:	e008      	b.n	80073fc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	f004 f93c 	bl	800b674 <USB_EPStartXfer>
  }

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d901      	bls.n	8007424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e050      	b.n	80074c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007428:	2b00      	cmp	r3, #0
 800742a:	da0f      	bge.n	800744c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	f003 020f 	and.w	r2, r3, #15
 8007432:	4613      	mov	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	3338      	adds	r3, #56	; 0x38
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	3304      	adds	r3, #4
 8007442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	705a      	strb	r2, [r3, #1]
 800744a:	e00d      	b.n	8007468 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800744c:	78fa      	ldrb	r2, [r7, #3]
 800744e:	4613      	mov	r3, r2
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	3304      	adds	r3, #4
 8007460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	b2da      	uxtb	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_PCD_EP_SetStall+0x82>
 8007484:	2302      	movs	r3, #2
 8007486:	e01e      	b.n	80074c6 <HAL_PCD_EP_SetStall+0xc0>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68f9      	ldr	r1, [r7, #12]
 8007496:	4618      	mov	r0, r3
 8007498:	f004 fdcc 	bl	800c034 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	b2d9      	uxtb	r1, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074b6:	461a      	mov	r2, r3
 80074b8:	f004 ffbc 	bl	800c434 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	f003 020f 	and.w	r2, r3, #15
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d901      	bls.n	80074ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e042      	b.n	8007572 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da0f      	bge.n	8007514 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	f003 020f 	and.w	r2, r3, #15
 80074fa:	4613      	mov	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	3338      	adds	r3, #56	; 0x38
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	3304      	adds	r3, #4
 800750a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	705a      	strb	r2, [r3, #1]
 8007512:	e00f      	b.n	8007534 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	f003 020f 	and.w	r2, r3, #15
 800751a:	4613      	mov	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	3304      	adds	r3, #4
 800752c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	b2da      	uxtb	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_PCD_EP_ClrStall+0x86>
 8007550:	2302      	movs	r3, #2
 8007552:	e00e      	b.n	8007572 <HAL_PCD_EP_ClrStall+0xa4>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68f9      	ldr	r1, [r7, #12]
 8007562:	4618      	mov	r0, r3
 8007564:	f004 fdd4 	bl	800c110 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800758a:	2b00      	cmp	r3, #0
 800758c:	da0c      	bge.n	80075a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	f003 020f 	and.w	r2, r3, #15
 8007594:	4613      	mov	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	3338      	adds	r3, #56	; 0x38
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4413      	add	r3, r2
 80075a2:	3304      	adds	r3, #4
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e00c      	b.n	80075c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	f003 020f 	and.w	r2, r3, #15
 80075ae:	4613      	mov	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	3304      	adds	r3, #4
 80075c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f004 fbf3 	bl	800bdb4 <USB_EPStopXfer>
 80075ce:	4603      	mov	r3, r0
 80075d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80075d2:	7afb      	ldrb	r3, [r7, #11]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	; 0x28
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	3338      	adds	r3, #56	; 0x38
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	3304      	adds	r3, #4
 8007602:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	429a      	cmp	r2, r3
 800760e:	d901      	bls.n	8007614 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e06c      	b.n	80076ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	429a      	cmp	r2, r3
 8007628:	d902      	bls.n	8007630 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	3303      	adds	r3, #3
 8007634:	089b      	lsrs	r3, r3, #2
 8007636:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007638:	e02b      	b.n	8007692 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	429a      	cmp	r2, r3
 800764e:	d902      	bls.n	8007656 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3303      	adds	r3, #3
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6919      	ldr	r1, [r3, #16]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800766e:	b2db      	uxtb	r3, r3
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	4603      	mov	r3, r0
 8007674:	6978      	ldr	r0, [r7, #20]
 8007676:	f004 fc47 	bl	800bf08 <USB_WritePacket>

    ep->xfer_buff  += len;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	441a      	add	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	441a      	add	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d809      	bhi.n	80076bc <PCD_WriteEmptyTxFifo+0xe0>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a1a      	ldr	r2, [r3, #32]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d203      	bcs.n	80076bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1be      	bne.n	800763a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d811      	bhi.n	80076ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	2201      	movs	r2, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	6939      	ldr	r1, [r7, #16]
 80076e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e8:	4013      	ands	r3, r2
 80076ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	333c      	adds	r3, #60	; 0x3c
 8007710:	3304      	adds	r3, #4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d17b      	bne.n	8007826 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d015      	beq.n	8007764 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4a61      	ldr	r2, [pc, #388]	; (80078c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	f240 80b9 	bls.w	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80b3 	beq.w	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775a:	461a      	mov	r2, r3
 800775c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007760:	6093      	str	r3, [r2, #8]
 8007762:	e0a7      	b.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	461a      	mov	r2, r3
 800777c:	2320      	movs	r3, #32
 800777e:	6093      	str	r3, [r2, #8]
 8007780:	e098      	b.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8093 	bne.w	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	4a4b      	ldr	r2, [pc, #300]	; (80078c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d90f      	bls.n	80077b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ac:	461a      	mov	r2, r3
 80077ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b2:	6093      	str	r3, [r2, #8]
 80077b4:	e07e      	b.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	3304      	adds	r3, #4
 80077ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	0159      	lsls	r1, r3, #5
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	440b      	add	r3, r1
 80077d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077e2:	1ad2      	subs	r2, r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d114      	bne.n	8007818 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007800:	461a      	mov	r2, r3
 8007802:	2101      	movs	r1, #1
 8007804:	f004 fe16 	bl	800c434 <USB_EP0_OutStart>
 8007808:	e006      	b.n	8007818 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	441a      	add	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f007 f85c 	bl	800e8dc <HAL_PCD_DataOutStageCallback>
 8007824:	e046      	b.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	4a26      	ldr	r2, [pc, #152]	; (80078c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d124      	bne.n	8007878 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007844:	461a      	mov	r2, r3
 8007846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784a:	6093      	str	r3, [r2, #8]
 800784c:	e032      	b.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	461a      	mov	r2, r3
 8007866:	2320      	movs	r3, #32
 8007868:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f007 f833 	bl	800e8dc <HAL_PCD_DataOutStageCallback>
 8007876:	e01d      	b.n	80078b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d114      	bne.n	80078a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	4613      	mov	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d108      	bne.n	80078a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80078a0:	461a      	mov	r2, r3
 80078a2:	2100      	movs	r1, #0
 80078a4:	f004 fdc6 	bl	800c434 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f007 f814 	bl	800e8dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	4f54300a 	.word	0x4f54300a
 80078c4:	4f54310a 	.word	0x4f54310a

080078c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	333c      	adds	r3, #60	; 0x3c
 80078e0:	3304      	adds	r3, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a15      	ldr	r2, [pc, #84]	; (8007950 <PCD_EP_OutSetupPacket_int+0x88>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d90e      	bls.n	800791c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007904:	2b00      	cmp	r3, #0
 8007906:	d009      	beq.n	800791c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f006 ffcb 	bl	800e8b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <PCD_EP_OutSetupPacket_int+0x88>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d90c      	bls.n	8007944 <PCD_EP_OutSetupPacket_int+0x7c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d108      	bne.n	8007944 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800793c:	461a      	mov	r2, r3
 800793e:	2101      	movs	r1, #1
 8007940:	f004 fd78 	bl	800c434 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	4f54300a 	.word	0x4f54300a

08007954 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
 8007960:	4613      	mov	r3, r2
 8007962:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007972:	883b      	ldrh	r3, [r7, #0]
 8007974:	0419      	lsls	r1, r3, #16
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	430a      	orrs	r2, r1
 800797e:	629a      	str	r2, [r3, #40]	; 0x28
 8007980:	e028      	b.n	80079d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
 8007994:	e00d      	b.n	80079b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	3340      	adds	r3, #64	; 0x40
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	4413      	add	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	3301      	adds	r3, #1
 80079b0:	73fb      	strb	r3, [r7, #15]
 80079b2:	7bfa      	ldrb	r2, [r7, #15]
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d3ec      	bcc.n	8007996 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80079bc:	883b      	ldrh	r3, [r7, #0]
 80079be:	0418      	lsls	r0, r3, #16
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	4302      	orrs	r2, r0
 80079cc:	3340      	adds	r3, #64	; 0x40
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	887a      	ldrh	r2, [r7, #2]
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e267      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d075      	beq.n	8007b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a3a:	4b88      	ldr	r3, [pc, #544]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 030c 	and.w	r3, r3, #12
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d00c      	beq.n	8007a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a46:	4b85      	ldr	r3, [pc, #532]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d112      	bne.n	8007a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a52:	4b82      	ldr	r3, [pc, #520]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a5e:	d10b      	bne.n	8007a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a60:	4b7e      	ldr	r3, [pc, #504]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d05b      	beq.n	8007b24 <HAL_RCC_OscConfig+0x108>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d157      	bne.n	8007b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e242      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a80:	d106      	bne.n	8007a90 <HAL_RCC_OscConfig+0x74>
 8007a82:	4b76      	ldr	r3, [pc, #472]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a75      	ldr	r2, [pc, #468]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	e01d      	b.n	8007acc <HAL_RCC_OscConfig+0xb0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a98:	d10c      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x98>
 8007a9a:	4b70      	ldr	r3, [pc, #448]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a6f      	ldr	r2, [pc, #444]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	4b6d      	ldr	r3, [pc, #436]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6c      	ldr	r2, [pc, #432]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e00b      	b.n	8007acc <HAL_RCC_OscConfig+0xb0>
 8007ab4:	4b69      	ldr	r3, [pc, #420]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a68      	ldr	r2, [pc, #416]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	4b66      	ldr	r3, [pc, #408]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a65      	ldr	r2, [pc, #404]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d013      	beq.n	8007afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad4:	f7fa fcb8 	bl	8002448 <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007adc:	f7fa fcb4 	bl	8002448 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b64      	cmp	r3, #100	; 0x64
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e207      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aee:	4b5b      	ldr	r3, [pc, #364]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0xc0>
 8007afa:	e014      	b.n	8007b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007afc:	f7fa fca4 	bl	8002448 <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b04:	f7fa fca0 	bl	8002448 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b64      	cmp	r3, #100	; 0x64
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e1f3      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b16:	4b51      	ldr	r3, [pc, #324]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0xe8>
 8007b22:	e000      	b.n	8007b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d063      	beq.n	8007bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b32:	4b4a      	ldr	r3, [pc, #296]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 030c 	and.w	r3, r3, #12
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b3e:	4b47      	ldr	r3, [pc, #284]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d11c      	bne.n	8007b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b4a:	4b44      	ldr	r3, [pc, #272]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d116      	bne.n	8007b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b56:	4b41      	ldr	r3, [pc, #260]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_RCC_OscConfig+0x152>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d001      	beq.n	8007b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e1c7      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6e:	4b3b      	ldr	r3, [pc, #236]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	4937      	ldr	r1, [pc, #220]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b82:	e03a      	b.n	8007bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d020      	beq.n	8007bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b8c:	4b34      	ldr	r3, [pc, #208]	; (8007c60 <HAL_RCC_OscConfig+0x244>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b92:	f7fa fc59 	bl	8002448 <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b9a:	f7fa fc55 	bl	8002448 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e1a8      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bac:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0f0      	beq.n	8007b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb8:	4b28      	ldr	r3, [pc, #160]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	4925      	ldr	r1, [pc, #148]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	600b      	str	r3, [r1, #0]
 8007bcc:	e015      	b.n	8007bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <HAL_RCC_OscConfig+0x244>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd4:	f7fa fc38 	bl	8002448 <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bdc:	f7fa fc34 	bl	8002448 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e187      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bee:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f0      	bne.n	8007bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d036      	beq.n	8007c74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d016      	beq.n	8007c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c0e:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <HAL_RCC_OscConfig+0x248>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c14:	f7fa fc18 	bl	8002448 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c1c:	f7fa fc14 	bl	8002448 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e167      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <HAL_RCC_OscConfig+0x240>)
 8007c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCC_OscConfig+0x200>
 8007c3a:	e01b      	b.n	8007c74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c3c:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <HAL_RCC_OscConfig+0x248>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c42:	f7fa fc01 	bl	8002448 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c48:	e00e      	b.n	8007c68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c4a:	f7fa fbfd 	bl	8002448 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d907      	bls.n	8007c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e150      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	42470000 	.word	0x42470000
 8007c64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c68:	4b88      	ldr	r3, [pc, #544]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1ea      	bne.n	8007c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8097 	beq.w	8007db0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c82:	2300      	movs	r3, #0
 8007c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c86:	4b81      	ldr	r3, [pc, #516]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10f      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c92:	2300      	movs	r3, #0
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	4b7d      	ldr	r3, [pc, #500]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	4a7c      	ldr	r2, [pc, #496]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ca2:	4b7a      	ldr	r3, [pc, #488]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007caa:	60bb      	str	r3, [r7, #8]
 8007cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cb2:	4b77      	ldr	r3, [pc, #476]	; (8007e90 <HAL_RCC_OscConfig+0x474>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d118      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cbe:	4b74      	ldr	r3, [pc, #464]	; (8007e90 <HAL_RCC_OscConfig+0x474>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a73      	ldr	r2, [pc, #460]	; (8007e90 <HAL_RCC_OscConfig+0x474>)
 8007cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cca:	f7fa fbbd 	bl	8002448 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cd2:	f7fa fbb9 	bl	8002448 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e10c      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce4:	4b6a      	ldr	r3, [pc, #424]	; (8007e90 <HAL_RCC_OscConfig+0x474>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0f0      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d106      	bne.n	8007d06 <HAL_RCC_OscConfig+0x2ea>
 8007cf8:	4b64      	ldr	r3, [pc, #400]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	4a63      	ldr	r2, [pc, #396]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	6713      	str	r3, [r2, #112]	; 0x70
 8007d04:	e01c      	b.n	8007d40 <HAL_RCC_OscConfig+0x324>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	d10c      	bne.n	8007d28 <HAL_RCC_OscConfig+0x30c>
 8007d0e:	4b5f      	ldr	r3, [pc, #380]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d12:	4a5e      	ldr	r2, [pc, #376]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d14:	f043 0304 	orr.w	r3, r3, #4
 8007d18:	6713      	str	r3, [r2, #112]	; 0x70
 8007d1a:	4b5c      	ldr	r3, [pc, #368]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1e:	4a5b      	ldr	r2, [pc, #364]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	6713      	str	r3, [r2, #112]	; 0x70
 8007d26:	e00b      	b.n	8007d40 <HAL_RCC_OscConfig+0x324>
 8007d28:	4b58      	ldr	r3, [pc, #352]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2c:	4a57      	ldr	r2, [pc, #348]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	6713      	str	r3, [r2, #112]	; 0x70
 8007d34:	4b55      	ldr	r3, [pc, #340]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d38:	4a54      	ldr	r2, [pc, #336]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d3a:	f023 0304 	bic.w	r3, r3, #4
 8007d3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d015      	beq.n	8007d74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d48:	f7fa fb7e 	bl	8002448 <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d4e:	e00a      	b.n	8007d66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d50:	f7fa fb7a 	bl	8002448 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e0cb      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d66:	4b49      	ldr	r3, [pc, #292]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0ee      	beq.n	8007d50 <HAL_RCC_OscConfig+0x334>
 8007d72:	e014      	b.n	8007d9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d74:	f7fa fb68 	bl	8002448 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d7a:	e00a      	b.n	8007d92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d7c:	f7fa fb64 	bl	8002448 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e0b5      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d92:	4b3e      	ldr	r3, [pc, #248]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1ee      	bne.n	8007d7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d105      	bne.n	8007db0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007da4:	4b39      	ldr	r3, [pc, #228]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	4a38      	ldr	r2, [pc, #224]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80a1 	beq.w	8007efc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dba:	4b34      	ldr	r3, [pc, #208]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 030c 	and.w	r3, r3, #12
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d05c      	beq.n	8007e80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d141      	bne.n	8007e52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dce:	4b31      	ldr	r3, [pc, #196]	; (8007e94 <HAL_RCC_OscConfig+0x478>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd4:	f7fa fb38 	bl	8002448 <HAL_GetTick>
 8007dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dda:	e008      	b.n	8007dee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ddc:	f7fa fb34 	bl	8002448 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e087      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dee:	4b27      	ldr	r3, [pc, #156]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1f0      	bne.n	8007ddc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69da      	ldr	r2, [r3, #28]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	019b      	lsls	r3, r3, #6
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	3b01      	subs	r3, #1
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	061b      	lsls	r3, r3, #24
 8007e1e:	491b      	ldr	r1, [pc, #108]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e24:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <HAL_RCC_OscConfig+0x478>)
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2a:	f7fa fb0d 	bl	8002448 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e32:	f7fa fb09 	bl	8002448 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e05c      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e44:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0f0      	beq.n	8007e32 <HAL_RCC_OscConfig+0x416>
 8007e50:	e054      	b.n	8007efc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e52:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <HAL_RCC_OscConfig+0x478>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e58:	f7fa faf6 	bl	8002448 <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e60:	f7fa faf2 	bl	8002448 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e045      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <HAL_RCC_OscConfig+0x470>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <HAL_RCC_OscConfig+0x444>
 8007e7e:	e03d      	b.n	8007efc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d107      	bne.n	8007e98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e038      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
 8007e8c:	40023800 	.word	0x40023800
 8007e90:	40007000 	.word	0x40007000
 8007e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e98:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <HAL_RCC_OscConfig+0x4ec>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d028      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d121      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d11a      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ec8:	4013      	ands	r3, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d111      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d107      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d001      	beq.n	8007efc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e000      	b.n	8007efe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40023800 	.word	0x40023800

08007f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e0cc      	b.n	80080ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f20:	4b68      	ldr	r3, [pc, #416]	; (80080c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d90c      	bls.n	8007f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f2e:	4b65      	ldr	r3, [pc, #404]	; (80080c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f36:	4b63      	ldr	r3, [pc, #396]	; (80080c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d001      	beq.n	8007f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0b8      	b.n	80080ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d020      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f60:	4b59      	ldr	r3, [pc, #356]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	4a58      	ldr	r2, [pc, #352]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0308 	and.w	r3, r3, #8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d005      	beq.n	8007f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f78:	4b53      	ldr	r3, [pc, #332]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4a52      	ldr	r2, [pc, #328]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f84:	4b50      	ldr	r3, [pc, #320]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	494d      	ldr	r1, [pc, #308]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d044      	beq.n	800802c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d107      	bne.n	8007fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007faa:	4b47      	ldr	r3, [pc, #284]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d119      	bne.n	8007fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e07f      	b.n	80080ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d003      	beq.n	8007fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d107      	bne.n	8007fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fca:	4b3f      	ldr	r3, [pc, #252]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e06f      	b.n	80080ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fda:	4b3b      	ldr	r3, [pc, #236]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e067      	b.n	80080ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fea:	4b37      	ldr	r3, [pc, #220]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f023 0203 	bic.w	r2, r3, #3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	4934      	ldr	r1, [pc, #208]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ffc:	f7fa fa24 	bl	8002448 <HAL_GetTick>
 8008000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008002:	e00a      	b.n	800801a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008004:	f7fa fa20 	bl	8002448 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008012:	4293      	cmp	r3, r2
 8008014:	d901      	bls.n	800801a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e04f      	b.n	80080ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801a:	4b2b      	ldr	r3, [pc, #172]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 020c 	and.w	r2, r3, #12
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	429a      	cmp	r2, r3
 800802a:	d1eb      	bne.n	8008004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800802c:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <HAL_RCC_ClockConfig+0x1b8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d20c      	bcs.n	8008054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800803a:	4b22      	ldr	r3, [pc, #136]	; (80080c4 <HAL_RCC_ClockConfig+0x1b8>)
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008042:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d001      	beq.n	8008054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e032      	b.n	80080ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008060:	4b19      	ldr	r3, [pc, #100]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	4916      	ldr	r1, [pc, #88]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	4313      	orrs	r3, r2
 8008070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800807e:	4b12      	ldr	r3, [pc, #72]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	490e      	ldr	r1, [pc, #56]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 800808e:	4313      	orrs	r3, r2
 8008090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008092:	f000 f821 	bl	80080d8 <HAL_RCC_GetSysClockFreq>
 8008096:	4602      	mov	r2, r0
 8008098:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <HAL_RCC_ClockConfig+0x1bc>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	091b      	lsrs	r3, r3, #4
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	490a      	ldr	r1, [pc, #40]	; (80080cc <HAL_RCC_ClockConfig+0x1c0>)
 80080a4:	5ccb      	ldrb	r3, [r1, r3]
 80080a6:	fa22 f303 	lsr.w	r3, r2, r3
 80080aa:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <HAL_RCC_ClockConfig+0x1c4>)
 80080ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <HAL_RCC_ClockConfig+0x1c8>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fa f984 	bl	80023c0 <HAL_InitTick>

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	40023c00 	.word	0x40023c00
 80080c8:	40023800 	.word	0x40023800
 80080cc:	080101c8 	.word	0x080101c8
 80080d0:	20000010 	.word	0x20000010
 80080d4:	20000014 	.word	0x20000014

080080d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080dc:	b094      	sub	sp, #80	; 0x50
 80080de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	647b      	str	r3, [r7, #68]	; 0x44
 80080e4:	2300      	movs	r3, #0
 80080e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e8:	2300      	movs	r3, #0
 80080ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080f0:	4b79      	ldr	r3, [pc, #484]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f003 030c 	and.w	r3, r3, #12
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d00d      	beq.n	8008118 <HAL_RCC_GetSysClockFreq+0x40>
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	f200 80e1 	bhi.w	80082c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <HAL_RCC_GetSysClockFreq+0x34>
 8008106:	2b04      	cmp	r3, #4
 8008108:	d003      	beq.n	8008112 <HAL_RCC_GetSysClockFreq+0x3a>
 800810a:	e0db      	b.n	80082c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800810c:	4b73      	ldr	r3, [pc, #460]	; (80082dc <HAL_RCC_GetSysClockFreq+0x204>)
 800810e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008110:	e0db      	b.n	80082ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008112:	4b73      	ldr	r3, [pc, #460]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008114:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008116:	e0d8      	b.n	80082ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008118:	4b6f      	ldr	r3, [pc, #444]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008120:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008122:	4b6d      	ldr	r3, [pc, #436]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d063      	beq.n	80081f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800812e:	4b6a      	ldr	r3, [pc, #424]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	099b      	lsrs	r3, r3, #6
 8008134:	2200      	movs	r2, #0
 8008136:	63bb      	str	r3, [r7, #56]	; 0x38
 8008138:	63fa      	str	r2, [r7, #60]	; 0x3c
 800813a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008140:	633b      	str	r3, [r7, #48]	; 0x30
 8008142:	2300      	movs	r3, #0
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
 8008146:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800814a:	4622      	mov	r2, r4
 800814c:	462b      	mov	r3, r5
 800814e:	f04f 0000 	mov.w	r0, #0
 8008152:	f04f 0100 	mov.w	r1, #0
 8008156:	0159      	lsls	r1, r3, #5
 8008158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800815c:	0150      	lsls	r0, r2, #5
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4621      	mov	r1, r4
 8008164:	1a51      	subs	r1, r2, r1
 8008166:	6139      	str	r1, [r7, #16]
 8008168:	4629      	mov	r1, r5
 800816a:	eb63 0301 	sbc.w	r3, r3, r1
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	f04f 0200 	mov.w	r2, #0
 8008174:	f04f 0300 	mov.w	r3, #0
 8008178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800817c:	4659      	mov	r1, fp
 800817e:	018b      	lsls	r3, r1, #6
 8008180:	4651      	mov	r1, sl
 8008182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008186:	4651      	mov	r1, sl
 8008188:	018a      	lsls	r2, r1, #6
 800818a:	4651      	mov	r1, sl
 800818c:	ebb2 0801 	subs.w	r8, r2, r1
 8008190:	4659      	mov	r1, fp
 8008192:	eb63 0901 	sbc.w	r9, r3, r1
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081aa:	4690      	mov	r8, r2
 80081ac:	4699      	mov	r9, r3
 80081ae:	4623      	mov	r3, r4
 80081b0:	eb18 0303 	adds.w	r3, r8, r3
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	462b      	mov	r3, r5
 80081b8:	eb49 0303 	adc.w	r3, r9, r3
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80081ca:	4629      	mov	r1, r5
 80081cc:	024b      	lsls	r3, r1, #9
 80081ce:	4621      	mov	r1, r4
 80081d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081d4:	4621      	mov	r1, r4
 80081d6:	024a      	lsls	r2, r1, #9
 80081d8:	4610      	mov	r0, r2
 80081da:	4619      	mov	r1, r3
 80081dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081de:	2200      	movs	r2, #0
 80081e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081e8:	f7f8 f842 	bl	8000270 <__aeabi_uldivmod>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4613      	mov	r3, r2
 80081f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081f4:	e058      	b.n	80082a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081f6:	4b38      	ldr	r3, [pc, #224]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	099b      	lsrs	r3, r3, #6
 80081fc:	2200      	movs	r2, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	4611      	mov	r1, r2
 8008202:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008206:	623b      	str	r3, [r7, #32]
 8008208:	2300      	movs	r3, #0
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
 800820c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008210:	4642      	mov	r2, r8
 8008212:	464b      	mov	r3, r9
 8008214:	f04f 0000 	mov.w	r0, #0
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	0159      	lsls	r1, r3, #5
 800821e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008222:	0150      	lsls	r0, r2, #5
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4641      	mov	r1, r8
 800822a:	ebb2 0a01 	subs.w	sl, r2, r1
 800822e:	4649      	mov	r1, r9
 8008230:	eb63 0b01 	sbc.w	fp, r3, r1
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008240:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008244:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008248:	ebb2 040a 	subs.w	r4, r2, sl
 800824c:	eb63 050b 	sbc.w	r5, r3, fp
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	00eb      	lsls	r3, r5, #3
 800825a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800825e:	00e2      	lsls	r2, r4, #3
 8008260:	4614      	mov	r4, r2
 8008262:	461d      	mov	r5, r3
 8008264:	4643      	mov	r3, r8
 8008266:	18e3      	adds	r3, r4, r3
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	464b      	mov	r3, r9
 800826c:	eb45 0303 	adc.w	r3, r5, r3
 8008270:	607b      	str	r3, [r7, #4]
 8008272:	f04f 0200 	mov.w	r2, #0
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800827e:	4629      	mov	r1, r5
 8008280:	028b      	lsls	r3, r1, #10
 8008282:	4621      	mov	r1, r4
 8008284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008288:	4621      	mov	r1, r4
 800828a:	028a      	lsls	r2, r1, #10
 800828c:	4610      	mov	r0, r2
 800828e:	4619      	mov	r1, r3
 8008290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008292:	2200      	movs	r2, #0
 8008294:	61bb      	str	r3, [r7, #24]
 8008296:	61fa      	str	r2, [r7, #28]
 8008298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800829c:	f7f7 ffe8 	bl	8000270 <__aeabi_uldivmod>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4613      	mov	r3, r2
 80082a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082a8:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	0c1b      	lsrs	r3, r3, #16
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	3301      	adds	r3, #1
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80082b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082c2:	e002      	b.n	80082ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <HAL_RCC_GetSysClockFreq+0x204>)
 80082c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3750      	adds	r7, #80	; 0x50
 80082d0:	46bd      	mov	sp, r7
 80082d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082d6:	bf00      	nop
 80082d8:	40023800 	.word	0x40023800
 80082dc:	00f42400 	.word	0x00f42400
 80082e0:	007a1200 	.word	0x007a1200

080082e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000010 	.word	0x20000010

080082fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008300:	f7ff fff0 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 8008304:	4602      	mov	r2, r0
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	0a9b      	lsrs	r3, r3, #10
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	4903      	ldr	r1, [pc, #12]	; (8008320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008312:	5ccb      	ldrb	r3, [r1, r3]
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008318:	4618      	mov	r0, r3
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40023800 	.word	0x40023800
 8008320:	080101d8 	.word	0x080101d8

08008324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008328:	f7ff ffdc 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 800832c:	4602      	mov	r2, r0
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	0b5b      	lsrs	r3, r3, #13
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	4903      	ldr	r1, [pc, #12]	; (8008348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800833a:	5ccb      	ldrb	r3, [r1, r3]
 800833c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008340:	4618      	mov	r0, r3
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40023800 	.word	0x40023800
 8008348:	080101d8 	.word	0x080101d8

0800834c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d105      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008370:	2b00      	cmp	r3, #0
 8008372:	d035      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008374:	4b62      	ldr	r3, [pc, #392]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800837a:	f7fa f865 	bl	8002448 <HAL_GetTick>
 800837e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008380:	e008      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008382:	f7fa f861 	bl	8002448 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e0b0      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008394:	4b5b      	ldr	r3, [pc, #364]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f0      	bne.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	019a      	lsls	r2, r3, #6
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	071b      	lsls	r3, r3, #28
 80083ac:	4955      	ldr	r1, [pc, #340]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083b4:	4b52      	ldr	r3, [pc, #328]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083ba:	f7fa f845 	bl	8002448 <HAL_GetTick>
 80083be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083c0:	e008      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083c2:	f7fa f841 	bl	8002448 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e090      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083d4:	4b4b      	ldr	r3, [pc, #300]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0f0      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8083 	beq.w	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	4b44      	ldr	r3, [pc, #272]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	4a43      	ldr	r2, [pc, #268]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083fc:	6413      	str	r3, [r2, #64]	; 0x40
 80083fe:	4b41      	ldr	r3, [pc, #260]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800840a:	4b3f      	ldr	r3, [pc, #252]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a3e      	ldr	r2, [pc, #248]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008414:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008416:	f7fa f817 	bl	8002448 <HAL_GetTick>
 800841a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800841c:	e008      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800841e:	f7fa f813 	bl	8002448 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e062      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008430:	4b35      	ldr	r3, [pc, #212]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0f0      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800843c:	4b31      	ldr	r3, [pc, #196]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008444:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d02f      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	429a      	cmp	r2, r3
 8008458:	d028      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800845a:	4b2a      	ldr	r3, [pc, #168]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800845c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008462:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008464:	4b29      	ldr	r3, [pc, #164]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008466:	2201      	movs	r2, #1
 8008468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800846a:	4b28      	ldr	r3, [pc, #160]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008470:	4a24      	ldr	r2, [pc, #144]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008476:	4b23      	ldr	r3, [pc, #140]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b01      	cmp	r3, #1
 8008480:	d114      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008482:	f7f9 ffe1 	bl	8002448 <HAL_GetTick>
 8008486:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008488:	e00a      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800848a:	f7f9 ffdd 	bl	8002448 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	f241 3288 	movw	r2, #5000	; 0x1388
 8008498:	4293      	cmp	r3, r2
 800849a:	d901      	bls.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e02a      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084a0:	4b18      	ldr	r3, [pc, #96]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0ee      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084b8:	d10d      	bne.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80084ba:	4b12      	ldr	r3, [pc, #72]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ce:	490d      	ldr	r1, [pc, #52]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	608b      	str	r3, [r1, #8]
 80084d4:	e005      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	4a0a      	ldr	r2, [pc, #40]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084e0:	6093      	str	r3, [r2, #8]
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ee:	4905      	ldr	r1, [pc, #20]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	42470068 	.word	0x42470068
 8008504:	40023800 	.word	0x40023800
 8008508:	40007000 	.word	0x40007000
 800850c:	42470e40 	.word	0x42470e40

08008510 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e066      	b.n	80085f4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7f5b      	ldrb	r3, [r3, #29]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7f8 ffbc 	bl	80014b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	22ca      	movs	r2, #202	; 0xca
 8008548:	625a      	str	r2, [r3, #36]	; 0x24
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2253      	movs	r2, #83	; 0x53
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f978 	bl	8008848 <RTC_EnterInitMode>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d12c      	bne.n	80085bc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008574:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6899      	ldr	r1, [r3, #8]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	431a      	orrs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	68d2      	ldr	r2, [r2, #12]
 800859c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6919      	ldr	r1, [r3, #16]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	041a      	lsls	r2, r3, #16
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f97f 	bl	80088b6 <RTC_ExitInitMode>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d113      	bne.n	80085ea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	22ff      	movs	r2, #255	; 0xff
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800862e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008632:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	0c1b      	lsrs	r3, r3, #16
 8008638:	b2db      	uxtb	r3, r3
 800863a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800863e:	b2da      	uxtb	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	b2db      	uxtb	r3, r3
 800864a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800864e:	b2da      	uxtb	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800865c:	b2da      	uxtb	r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	0d9b      	lsrs	r3, r3, #22
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	b2da      	uxtb	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11a      	bne.n	80086ae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f93f 	bl	8008900 <RTC_Bcd2ToByte>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f936 	bl	8008900 <RTC_Bcd2ToByte>
 8008694:	4603      	mov	r3, r0
 8008696:	461a      	mov	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	789b      	ldrb	r3, [r3, #2]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 f92d 	bl	8008900 <RTC_Bcd2ToByte>
 80086a6:	4603      	mov	r3, r0
 80086a8:	461a      	mov	r2, r3
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	0c1b      	lsrs	r3, r3, #16
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	0a1b      	lsrs	r3, r3, #8
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	0b5b      	lsrs	r3, r3, #13
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d11a      	bne.n	800874c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	78db      	ldrb	r3, [r3, #3]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f8f0 	bl	8008900 <RTC_Bcd2ToByte>
 8008720:	4603      	mov	r3, r0
 8008722:	461a      	mov	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 f8e7 	bl	8008900 <RTC_Bcd2ToByte>
 8008732:	4603      	mov	r3, r0
 8008734:	461a      	mov	r2, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	789b      	ldrb	r3, [r3, #2]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f8de 	bl	8008900 <RTC_Bcd2ToByte>
 8008744:	4603      	mov	r3, r0
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d012      	beq.n	8008794 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f831 	bl	80087e4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008792:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d012      	beq.n	80087c8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f8c1 	bl	8008938 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80087c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80087c8:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <HAL_RTC_AlarmIRQHandler+0x88>)
 80087ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80087ce:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	775a      	strb	r2, [r3, #29]
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	40013c00 	.word	0x40013c00

080087e4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008812:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008814:	f7f9 fe18 	bl	8002448 <HAL_GetTick>
 8008818:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800881a:	e009      	b.n	8008830 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800881c:	f7f9 fe14 	bl	8002448 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800882a:	d901      	bls.n	8008830 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e007      	b.n	8008840 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0ee      	beq.n	800881c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d122      	bne.n	80088ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008874:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008876:	f7f9 fde7 	bl	8002448 <HAL_GetTick>
 800887a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800887c:	e00c      	b.n	8008898 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800887e:	f7f9 fde3 	bl	8002448 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800888c:	d904      	bls.n	8008898 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2204      	movs	r2, #4
 8008892:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d102      	bne.n	80088ac <RTC_EnterInitMode+0x64>
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d1e8      	bne.n	800887e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ff89 	bl	80087f8 <HAL_RTC_WaitForSynchro>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2204      	movs	r2, #4
 80088f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	091b      	lsrs	r3, r3, #4
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	0092      	lsls	r2, r2, #2
 8008918:	4413      	add	r3, r2
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	b2da      	uxtb	r2, r3
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4413      	add	r3, r2
 800892a:	b2db      	uxtb	r3, r3
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e04c      	b.n	80089f8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d111      	bne.n	800898e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fe0a 	bl	800958c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a1f      	ldr	r2, [pc, #124]	; (8008a00 <HAL_TIM_Base_Init+0xb4>)
 8008984:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2202      	movs	r2, #2
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3304      	adds	r3, #4
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f000 fc93 	bl	80092cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	08001e29 	.word	0x08001e29

08008a04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d001      	beq.n	8008a1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e046      	b.n	8008aaa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a23      	ldr	r2, [pc, #140]	; (8008ab8 <HAL_TIM_Base_Start+0xb4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d022      	beq.n	8008a74 <HAL_TIM_Base_Start+0x70>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a36:	d01d      	beq.n	8008a74 <HAL_TIM_Base_Start+0x70>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1f      	ldr	r2, [pc, #124]	; (8008abc <HAL_TIM_Base_Start+0xb8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d018      	beq.n	8008a74 <HAL_TIM_Base_Start+0x70>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a1e      	ldr	r2, [pc, #120]	; (8008ac0 <HAL_TIM_Base_Start+0xbc>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d013      	beq.n	8008a74 <HAL_TIM_Base_Start+0x70>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1c      	ldr	r2, [pc, #112]	; (8008ac4 <HAL_TIM_Base_Start+0xc0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00e      	beq.n	8008a74 <HAL_TIM_Base_Start+0x70>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a1b      	ldr	r2, [pc, #108]	; (8008ac8 <HAL_TIM_Base_Start+0xc4>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d009      	beq.n	8008a74 <HAL_TIM_Base_Start+0x70>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a19      	ldr	r2, [pc, #100]	; (8008acc <HAL_TIM_Base_Start+0xc8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d004      	beq.n	8008a74 <HAL_TIM_Base_Start+0x70>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a18      	ldr	r2, [pc, #96]	; (8008ad0 <HAL_TIM_Base_Start+0xcc>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d111      	bne.n	8008a98 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b06      	cmp	r3, #6
 8008a84:	d010      	beq.n	8008aa8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0201 	orr.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a96:	e007      	b.n	8008aa8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0201 	orr.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40000800 	.word	0x40000800
 8008ac4:	40000c00 	.word	0x40000c00
 8008ac8:	40010400 	.word	0x40010400
 8008acc:	40014000 	.word	0x40014000
 8008ad0:	40001800 	.word	0x40001800

08008ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d001      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e04e      	b.n	8008b8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f042 0201 	orr.w	r2, r2, #1
 8008b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a23      	ldr	r2, [pc, #140]	; (8008b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d022      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b16:	d01d      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1f      	ldr	r2, [pc, #124]	; (8008b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d018      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d013      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a1c      	ldr	r2, [pc, #112]	; (8008ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00e      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a1b      	ldr	r2, [pc, #108]	; (8008ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d009      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a19      	ldr	r2, [pc, #100]	; (8008bac <HAL_TIM_Base_Start_IT+0xd8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d004      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d111      	bne.n	8008b78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b06      	cmp	r3, #6
 8008b64:	d010      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0201 	orr.w	r2, r2, #1
 8008b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b76:	e007      	b.n	8008b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40000400 	.word	0x40000400
 8008ba0:	40000800 	.word	0x40000800
 8008ba4:	40000c00 	.word	0x40000c00
 8008ba8:	40010400 	.word	0x40010400
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40001800 	.word	0x40001800

08008bb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e0a2      	b.n	8008d0e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d111      	bne.n	8008bf8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fcd5 	bl	800958c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a4a      	ldr	r2, [pc, #296]	; (8008d18 <HAL_TIM_Encoder_Init+0x164>)
 8008bee:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c0e:	f023 0307 	bic.w	r3, r3, #7
 8008c12:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f000 fb54 	bl	80092cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c4c:	f023 0303 	bic.w	r3, r3, #3
 8008c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008c6a:	f023 030c 	bic.w	r3, r3, #12
 8008c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	4313      	orrs	r3, r2
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	011a      	lsls	r2, r3, #4
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	031b      	lsls	r3, r3, #12
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008ca8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008cb0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	08001ca9 	.word	0x08001ca9

08008d1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d110      	bne.n	8008d6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d102      	bne.n	8008d58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d52:	7b7b      	ldrb	r3, [r7, #13]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d001      	beq.n	8008d5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e069      	b.n	8008e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d6c:	e031      	b.n	8008dd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d110      	bne.n	8008d96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d102      	bne.n	8008d80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d7a:	7b3b      	ldrb	r3, [r7, #12]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d001      	beq.n	8008d84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e055      	b.n	8008e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d94:	e01d      	b.n	8008dd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d108      	bne.n	8008dae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d105      	bne.n	8008dae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008da2:	7b7b      	ldrb	r3, [r7, #13]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d102      	bne.n	8008dae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008da8:	7b3b      	ldrb	r3, [r7, #12]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d001      	beq.n	8008db2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e03e      	b.n	8008e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <HAL_TIM_Encoder_Start+0xc4>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d008      	beq.n	8008df0 <HAL_TIM_Encoder_Start+0xd4>
 8008dde:	e00f      	b.n	8008e00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2201      	movs	r2, #1
 8008de6:	2100      	movs	r1, #0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fba9 	bl	8009540 <TIM_CCxChannelCmd>
      break;
 8008dee:	e016      	b.n	8008e1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2201      	movs	r2, #1
 8008df6:	2104      	movs	r1, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fba1 	bl	8009540 <TIM_CCxChannelCmd>
      break;
 8008dfe:	e00e      	b.n	8008e1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2201      	movs	r2, #1
 8008e06:	2100      	movs	r1, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fb99 	bl	8009540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2201      	movs	r2, #1
 8008e14:	2104      	movs	r1, #4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fb92 	bl	8009540 <TIM_CCxChannelCmd>
      break;
 8008e1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 0201 	orr.w	r2, r2, #1
 8008e2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d128      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d121      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0202 	mvn.w	r2, #2
 8008e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	4798      	blx	r3
 8008e84:	e009      	b.n	8008e9a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d128      	bne.n	8008f00 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d121      	bne.n	8008f00 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f06f 0204 	mvn.w	r2, #4
 8008ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
 8008ee4:	e009      	b.n	8008efa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f003 0308 	and.w	r3, r3, #8
 8008f0a:	2b08      	cmp	r3, #8
 8008f0c:	d128      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d121      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0208 	mvn.w	r2, #8
 8008f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2204      	movs	r2, #4
 8008f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	f003 0303 	and.w	r3, r3, #3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
 8008f44:	e009      	b.n	8008f5a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d128      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b10      	cmp	r3, #16
 8008f7a:	d121      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0210 	mvn.w	r2, #16
 8008f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2208      	movs	r2, #8
 8008f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
 8008fa4:	e009      	b.n	8008fba <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d110      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d109      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0201 	mvn.w	r2, #1
 8008fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffa:	2b80      	cmp	r3, #128	; 0x80
 8008ffc:	d110      	bne.n	8009020 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d109      	bne.n	8009020 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902a:	2b40      	cmp	r3, #64	; 0x40
 800902c:	d110      	bne.n	8009050 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009038:	2b40      	cmp	r3, #64	; 0x40
 800903a:	d109      	bne.n	8009050 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b20      	cmp	r3, #32
 800905c:	d110      	bne.n	8009080 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b20      	cmp	r3, #32
 800906a:	d109      	bne.n	8009080 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f06f 0220 	mvn.w	r2, #32
 8009074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800909c:	2b01      	cmp	r3, #1
 800909e:	d101      	bne.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c>
 80090a0:	2302      	movs	r3, #2
 80090a2:	e0b4      	b.n	800920e <HAL_TIM_ConfigClockSource+0x186>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090dc:	d03e      	beq.n	800915c <HAL_TIM_ConfigClockSource+0xd4>
 80090de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e2:	f200 8087 	bhi.w	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 80090e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ea:	f000 8086 	beq.w	80091fa <HAL_TIM_ConfigClockSource+0x172>
 80090ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090f2:	d87f      	bhi.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 80090f4:	2b70      	cmp	r3, #112	; 0x70
 80090f6:	d01a      	beq.n	800912e <HAL_TIM_ConfigClockSource+0xa6>
 80090f8:	2b70      	cmp	r3, #112	; 0x70
 80090fa:	d87b      	bhi.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 80090fc:	2b60      	cmp	r3, #96	; 0x60
 80090fe:	d050      	beq.n	80091a2 <HAL_TIM_ConfigClockSource+0x11a>
 8009100:	2b60      	cmp	r3, #96	; 0x60
 8009102:	d877      	bhi.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009104:	2b50      	cmp	r3, #80	; 0x50
 8009106:	d03c      	beq.n	8009182 <HAL_TIM_ConfigClockSource+0xfa>
 8009108:	2b50      	cmp	r3, #80	; 0x50
 800910a:	d873      	bhi.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d058      	beq.n	80091c2 <HAL_TIM_ConfigClockSource+0x13a>
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	d86f      	bhi.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009114:	2b30      	cmp	r3, #48	; 0x30
 8009116:	d064      	beq.n	80091e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009118:	2b30      	cmp	r3, #48	; 0x30
 800911a:	d86b      	bhi.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 800911c:	2b20      	cmp	r3, #32
 800911e:	d060      	beq.n	80091e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009120:	2b20      	cmp	r3, #32
 8009122:	d867      	bhi.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d05c      	beq.n	80091e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009128:	2b10      	cmp	r3, #16
 800912a:	d05a      	beq.n	80091e2 <HAL_TIM_ConfigClockSource+0x15a>
 800912c:	e062      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6899      	ldr	r1, [r3, #8]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f000 f9df 	bl	8009500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	609a      	str	r2, [r3, #8]
      break;
 800915a:	e04f      	b.n	80091fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	6899      	ldr	r1, [r3, #8]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f000 f9c8 	bl	8009500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800917e:	609a      	str	r2, [r3, #8]
      break;
 8009180:	e03c      	b.n	80091fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	6859      	ldr	r1, [r3, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	461a      	mov	r2, r3
 8009190:	f000 f93c 	bl	800940c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2150      	movs	r1, #80	; 0x50
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f995 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 80091a0:	e02c      	b.n	80091fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6859      	ldr	r1, [r3, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f000 f95b 	bl	800946a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2160      	movs	r1, #96	; 0x60
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 f985 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 80091c0:	e01c      	b.n	80091fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	6859      	ldr	r1, [r3, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	461a      	mov	r2, r3
 80091d0:	f000 f91c 	bl	800940c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2140      	movs	r1, #64	; 0x40
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f975 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 80091e0:	e00c      	b.n	80091fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f000 f96c 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 80091f2:	e003      	b.n	80091fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
      break;
 80091f8:	e000      	b.n	80091fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80092aa:	bf00      	nop
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
	...

080092cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a40      	ldr	r2, [pc, #256]	; (80093e0 <TIM_Base_SetConfig+0x114>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d013      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ea:	d00f      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a3d      	ldr	r2, [pc, #244]	; (80093e4 <TIM_Base_SetConfig+0x118>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00b      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a3c      	ldr	r2, [pc, #240]	; (80093e8 <TIM_Base_SetConfig+0x11c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d007      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a3b      	ldr	r2, [pc, #236]	; (80093ec <TIM_Base_SetConfig+0x120>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d003      	beq.n	800930c <TIM_Base_SetConfig+0x40>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a3a      	ldr	r2, [pc, #232]	; (80093f0 <TIM_Base_SetConfig+0x124>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d108      	bne.n	800931e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a2f      	ldr	r2, [pc, #188]	; (80093e0 <TIM_Base_SetConfig+0x114>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d02b      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932c:	d027      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2c      	ldr	r2, [pc, #176]	; (80093e4 <TIM_Base_SetConfig+0x118>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d023      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a2b      	ldr	r2, [pc, #172]	; (80093e8 <TIM_Base_SetConfig+0x11c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d01f      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2a      	ldr	r2, [pc, #168]	; (80093ec <TIM_Base_SetConfig+0x120>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d01b      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a29      	ldr	r2, [pc, #164]	; (80093f0 <TIM_Base_SetConfig+0x124>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d017      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a28      	ldr	r2, [pc, #160]	; (80093f4 <TIM_Base_SetConfig+0x128>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d013      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a27      	ldr	r2, [pc, #156]	; (80093f8 <TIM_Base_SetConfig+0x12c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d00f      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a26      	ldr	r2, [pc, #152]	; (80093fc <TIM_Base_SetConfig+0x130>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00b      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a25      	ldr	r2, [pc, #148]	; (8009400 <TIM_Base_SetConfig+0x134>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d007      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a24      	ldr	r2, [pc, #144]	; (8009404 <TIM_Base_SetConfig+0x138>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d003      	beq.n	800937e <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a23      	ldr	r2, [pc, #140]	; (8009408 <TIM_Base_SetConfig+0x13c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d108      	bne.n	8009390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	4313      	orrs	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a0a      	ldr	r2, [pc, #40]	; (80093e0 <TIM_Base_SetConfig+0x114>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d003      	beq.n	80093c4 <TIM_Base_SetConfig+0xf8>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a0c      	ldr	r2, [pc, #48]	; (80093f0 <TIM_Base_SetConfig+0x124>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d103      	bne.n	80093cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	691a      	ldr	r2, [r3, #16]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	615a      	str	r2, [r3, #20]
}
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	40010000 	.word	0x40010000
 80093e4:	40000400 	.word	0x40000400
 80093e8:	40000800 	.word	0x40000800
 80093ec:	40000c00 	.word	0x40000c00
 80093f0:	40010400 	.word	0x40010400
 80093f4:	40014000 	.word	0x40014000
 80093f8:	40014400 	.word	0x40014400
 80093fc:	40014800 	.word	0x40014800
 8009400:	40001800 	.word	0x40001800
 8009404:	40001c00 	.word	0x40001c00
 8009408:	40002000 	.word	0x40002000

0800940c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f023 0201 	bic.w	r2, r3, #1
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f023 030a 	bic.w	r3, r3, #10
 8009448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4313      	orrs	r3, r2
 8009450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	621a      	str	r2, [r3, #32]
}
 800945e:	bf00      	nop
 8009460:	371c      	adds	r7, #28
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800946a:	b480      	push	{r7}
 800946c:	b087      	sub	sp, #28
 800946e:	af00      	add	r7, sp, #0
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	f023 0210 	bic.w	r2, r3, #16
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6a1b      	ldr	r3, [r3, #32]
 800948c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	031b      	lsls	r3, r3, #12
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	621a      	str	r2, [r3, #32]
}
 80094be:	bf00      	nop
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f043 0307 	orr.w	r3, r3, #7
 80094ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	609a      	str	r2, [r3, #8]
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800951a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	021a      	lsls	r2, r3, #8
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	431a      	orrs	r2, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4313      	orrs	r3, r2
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	609a      	str	r2, [r3, #8]
}
 8009534:	bf00      	nop
 8009536:	371c      	adds	r7, #28
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f003 031f 	and.w	r3, r3, #31
 8009552:	2201      	movs	r2, #1
 8009554:	fa02 f303 	lsl.w	r3, r2, r3
 8009558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a1a      	ldr	r2, [r3, #32]
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	43db      	mvns	r3, r3
 8009562:	401a      	ands	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a1a      	ldr	r2, [r3, #32]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f003 031f 	and.w	r3, r3, #31
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	fa01 f303 	lsl.w	r3, r1, r3
 8009578:	431a      	orrs	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	621a      	str	r2, [r3, #32]
}
 800957e:	bf00      	nop
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
	...

0800958c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a1c      	ldr	r2, [pc, #112]	; (8009608 <TIM_ResetCallback+0x7c>)
 8009598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a1b      	ldr	r2, [pc, #108]	; (800960c <TIM_ResetCallback+0x80>)
 80095a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a1a      	ldr	r2, [pc, #104]	; (8009610 <TIM_ResetCallback+0x84>)
 80095a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a19      	ldr	r2, [pc, #100]	; (8009614 <TIM_ResetCallback+0x88>)
 80095b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a18      	ldr	r2, [pc, #96]	; (8009618 <TIM_ResetCallback+0x8c>)
 80095b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a17      	ldr	r2, [pc, #92]	; (800961c <TIM_ResetCallback+0x90>)
 80095c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a16      	ldr	r2, [pc, #88]	; (8009620 <TIM_ResetCallback+0x94>)
 80095c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a15      	ldr	r2, [pc, #84]	; (8009624 <TIM_ResetCallback+0x98>)
 80095d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a14      	ldr	r2, [pc, #80]	; (8009628 <TIM_ResetCallback+0x9c>)
 80095d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a13      	ldr	r2, [pc, #76]	; (800962c <TIM_ResetCallback+0xa0>)
 80095e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a12      	ldr	r2, [pc, #72]	; (8009630 <TIM_ResetCallback+0xa4>)
 80095e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a11      	ldr	r2, [pc, #68]	; (8009634 <TIM_ResetCallback+0xa8>)
 80095f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a10      	ldr	r2, [pc, #64]	; (8009638 <TIM_ResetCallback+0xac>)
 80095f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	08000e01 	.word	0x08000e01
 800960c:	08009217 	.word	0x08009217
 8009610:	0800928f 	.word	0x0800928f
 8009614:	080092a3 	.word	0x080092a3
 8009618:	0800923f 	.word	0x0800923f
 800961c:	08009253 	.word	0x08009253
 8009620:	0800922b 	.word	0x0800922b
 8009624:	08009267 	.word	0x08009267
 8009628:	0800927b 	.word	0x0800927b
 800962c:	080092b7 	.word	0x080092b7
 8009630:	08009735 	.word	0x08009735
 8009634:	08009749 	.word	0x08009749
 8009638:	0800975d 	.word	0x0800975d

0800963c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009650:	2302      	movs	r3, #2
 8009652:	e05a      	b.n	800970a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a21      	ldr	r2, [pc, #132]	; (8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d022      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a0:	d01d      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1d      	ldr	r2, [pc, #116]	; (800971c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d018      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a1b      	ldr	r2, [pc, #108]	; (8009720 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1a      	ldr	r2, [pc, #104]	; (8009724 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00e      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a18      	ldr	r2, [pc, #96]	; (8009728 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d009      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a17      	ldr	r2, [pc, #92]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d004      	beq.n	80096de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a15      	ldr	r2, [pc, #84]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d10c      	bne.n	80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	40010000 	.word	0x40010000
 800971c:	40000400 	.word	0x40000400
 8009720:	40000800 	.word	0x40000800
 8009724:	40000c00 	.word	0x40000c00
 8009728:	40010400 	.word	0x40010400
 800972c:	40014000 	.word	0x40014000
 8009730:	40001800 	.word	0x40001800

08009734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e04a      	b.n	8009818 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d111      	bne.n	80097b2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fc26 	bl	8009fe8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d102      	bne.n	80097aa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <HAL_UART_Init+0xb0>)
 80097a8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2224      	movs	r2, #36	; 0x24
 80097b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 f802 	bl	800a7d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695a      	ldr	r2, [r3, #20]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2220      	movs	r2, #32
 800980a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2220      	movs	r2, #32
 8009812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	08002155 	.word	0x08002155

08009824 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b20      	cmp	r3, #32
 800983c:	d130      	bne.n	80098a0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <HAL_UART_Transmit_IT+0x26>
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e029      	b.n	80098a2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <HAL_UART_Transmit_IT+0x38>
 8009858:	2302      	movs	r3, #2
 800985a:	e022      	b.n	80098a2 <HAL_UART_Transmit_IT+0x7e>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	88fa      	ldrh	r2, [r7, #6]
 8009874:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2221      	movs	r2, #33	; 0x21
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800989a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	e000      	b.n	80098a2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80098a0:	2302      	movs	r3, #2
  }
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
	...

080098b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08c      	sub	sp, #48	; 0x30
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b20      	cmp	r3, #32
 80098c8:	d165      	bne.n	8009996 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <HAL_UART_Transmit_DMA+0x26>
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e05e      	b.n	8009998 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d101      	bne.n	80098e8 <HAL_UART_Transmit_DMA+0x38>
 80098e4:	2302      	movs	r3, #2
 80098e6:	e057      	b.n	8009998 <HAL_UART_Transmit_DMA+0xe8>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	88fa      	ldrh	r2, [r7, #6]
 80098fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	88fa      	ldrh	r2, [r7, #6]
 8009900:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2221      	movs	r2, #33	; 0x21
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009914:	4a22      	ldr	r2, [pc, #136]	; (80099a0 <HAL_UART_Transmit_DMA+0xf0>)
 8009916:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991c:	4a21      	ldr	r2, [pc, #132]	; (80099a4 <HAL_UART_Transmit_DMA+0xf4>)
 800991e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009924:	4a20      	ldr	r2, [pc, #128]	; (80099a8 <HAL_UART_Transmit_DMA+0xf8>)
 8009926:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992c:	2200      	movs	r2, #0
 800992e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	6819      	ldr	r1, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3304      	adds	r3, #4
 8009944:	461a      	mov	r2, r3
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	f7f9 ff64 	bl	8003814 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009954:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3314      	adds	r3, #20
 8009964:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	617b      	str	r3, [r7, #20]
   return(result);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009974:	62bb      	str	r3, [r7, #40]	; 0x28
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3314      	adds	r3, #20
 800997c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800997e:	627a      	str	r2, [r7, #36]	; 0x24
 8009980:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6a39      	ldr	r1, [r7, #32]
 8009984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	61fb      	str	r3, [r7, #28]
   return(result);
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e5      	bne.n	800995e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	e000      	b.n	8009998 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009996:	2302      	movs	r3, #2
  }
}
 8009998:	4618      	mov	r0, r3
 800999a:	3730      	adds	r7, #48	; 0x30
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	0800a059 	.word	0x0800a059
 80099a4:	0800a0f5 	.word	0x0800a0f5
 80099a8:	0800a277 	.word	0x0800a277

080099ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d11d      	bne.n	8009a02 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_UART_Receive_DMA+0x26>
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e016      	b.n	8009a04 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_UART_Receive_DMA+0x38>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e00f      	b.n	8009a04 <HAL_UART_Receive_DMA+0x58>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	461a      	mov	r2, r3
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 fc87 	bl	800a30c <UART_Start_Receive_DMA>
 80099fe:	4603      	mov	r3, r0
 8009a00:	e000      	b.n	8009a04 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a02:	2302      	movs	r3, #2
  }
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b0ba      	sub	sp, #232	; 0xe8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10f      	bne.n	8009a72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a56:	f003 0320 	and.w	r3, r3, #32
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d009      	beq.n	8009a72 <HAL_UART_IRQHandler+0x66>
 8009a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fdf5 	bl	800a65a <UART_Receive_IT>
      return;
 8009a70:	e25b      	b.n	8009f2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 80e1 	beq.w	8009c3e <HAL_UART_IRQHandler+0x232>
 8009a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80d4 	beq.w	8009c3e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00b      	beq.n	8009aba <HAL_UART_IRQHandler+0xae>
 8009aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	f043 0201 	orr.w	r2, r3, #1
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00b      	beq.n	8009ade <HAL_UART_IRQHandler+0xd2>
 8009ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d005      	beq.n	8009ade <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	f043 0202 	orr.w	r2, r3, #2
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00b      	beq.n	8009b02 <HAL_UART_IRQHandler+0xf6>
 8009aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d005      	beq.n	8009b02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	f043 0204 	orr.w	r2, r3, #4
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b06:	f003 0308 	and.w	r3, r3, #8
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d011      	beq.n	8009b32 <HAL_UART_IRQHandler+0x126>
 8009b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d105      	bne.n	8009b26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d005      	beq.n	8009b32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	f043 0208 	orr.w	r2, r3, #8
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 81f2 	beq.w	8009f20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d008      	beq.n	8009b5a <HAL_UART_IRQHandler+0x14e>
 8009b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fd80 	bl	800a65a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b64:	2b40      	cmp	r3, #64	; 0x40
 8009b66:	bf0c      	ite	eq
 8009b68:	2301      	moveq	r3, #1
 8009b6a:	2300      	movne	r3, #0
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f003 0308 	and.w	r3, r3, #8
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d103      	bne.n	8009b86 <HAL_UART_IRQHandler+0x17a>
 8009b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d051      	beq.n	8009c2a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fc86 	bl	800a498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d142      	bne.n	8009c20 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3314      	adds	r3, #20
 8009ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3314      	adds	r3, #20
 8009bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1d9      	bne.n	8009b9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d013      	beq.n	8009c16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	4a7f      	ldr	r2, [pc, #508]	; (8009df0 <HAL_UART_IRQHandler+0x3e4>)
 8009bf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7f9 fed2 	bl	80039a4 <HAL_DMA_Abort_IT>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d019      	beq.n	8009c3a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c14:	e011      	b.n	8009c3a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c1e:	e00c      	b.n	8009c3a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c28:	e007      	b.n	8009c3a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c38:	e172      	b.n	8009f20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c3a:	bf00      	nop
    return;
 8009c3c:	e170      	b.n	8009f20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	f040 814c 	bne.w	8009ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4c:	f003 0310 	and.w	r3, r3, #16
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8145 	beq.w	8009ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c5a:	f003 0310 	and.w	r3, r3, #16
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 813e 	beq.w	8009ee0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c64:	2300      	movs	r3, #0
 8009c66:	60bb      	str	r3, [r7, #8]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60bb      	str	r3, [r7, #8]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	60bb      	str	r3, [r7, #8]
 8009c78:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c84:	2b40      	cmp	r3, #64	; 0x40
 8009c86:	f040 80b5 	bne.w	8009df4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 8142 	beq.w	8009f24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ca4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	f080 813b 	bcs.w	8009f24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cb4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc0:	f000 8088 	beq.w	8009dd4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	330c      	adds	r3, #12
 8009cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cd2:	e853 3f00 	ldrex	r3, [r3]
 8009cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	330c      	adds	r3, #12
 8009cec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009cf0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009cf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009cfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1d9      	bne.n	8009cc4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3314      	adds	r3, #20
 8009d16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d22:	f023 0301 	bic.w	r3, r3, #1
 8009d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3314      	adds	r3, #20
 8009d30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d40:	e841 2300 	strex	r3, r2, [r1]
 8009d44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e1      	bne.n	8009d10 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3314      	adds	r3, #20
 8009d52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3314      	adds	r3, #20
 8009d6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e3      	bne.n	8009d4c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	330c      	adds	r3, #12
 8009d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da4:	f023 0310 	bic.w	r3, r3, #16
 8009da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	330c      	adds	r3, #12
 8009db2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009db6:	65ba      	str	r2, [r7, #88]	; 0x58
 8009db8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e3      	bne.n	8009d92 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f9 fd78 	bl	80038c4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009de0:	b292      	uxth	r2, r2
 8009de2:	1a8a      	subs	r2, r1, r2
 8009de4:	b292      	uxth	r2, r2
 8009de6:	4611      	mov	r1, r2
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dec:	e09a      	b.n	8009f24 <HAL_UART_IRQHandler+0x518>
 8009dee:	bf00      	nop
 8009df0:	0800a55f 	.word	0x0800a55f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 808c 	beq.w	8009f28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 8087 	beq.w	8009f28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	330c      	adds	r3, #12
 8009e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	330c      	adds	r3, #12
 8009e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8009e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e3      	bne.n	8009e1a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3314      	adds	r3, #20
 8009e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	623b      	str	r3, [r7, #32]
   return(result);
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	f023 0301 	bic.w	r3, r3, #1
 8009e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3314      	adds	r3, #20
 8009e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e76:	633a      	str	r2, [r7, #48]	; 0x30
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e3      	bne.n	8009e52 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 0310 	bic.w	r3, r3, #16
 8009eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	330c      	adds	r3, #12
 8009eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ebc:	61fa      	str	r2, [r7, #28]
 8009ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	69b9      	ldr	r1, [r7, #24]
 8009ec2:	69fa      	ldr	r2, [r7, #28]
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e3      	bne.n	8009e98 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009ed8:	4611      	mov	r1, r2
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ede:	e023      	b.n	8009f28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d009      	beq.n	8009f00 <HAL_UART_IRQHandler+0x4f4>
 8009eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fb45 	bl	800a588 <UART_Transmit_IT>
    return;
 8009efe:	e014      	b.n	8009f2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00e      	beq.n	8009f2a <HAL_UART_IRQHandler+0x51e>
 8009f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d008      	beq.n	8009f2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fb85 	bl	800a628 <UART_EndTransmit_IT>
    return;
 8009f1e:	e004      	b.n	8009f2a <HAL_UART_IRQHandler+0x51e>
    return;
 8009f20:	bf00      	nop
 8009f22:	e002      	b.n	8009f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f24:	bf00      	nop
 8009f26:	e000      	b.n	8009f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f28:	bf00      	nop
  }
}
 8009f2a:	37e8      	adds	r7, #232	; 0xe8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a10      	ldr	r2, [pc, #64]	; (800a034 <UART_InitCallbacksToDefault+0x4c>)
 8009ff4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a0f      	ldr	r2, [pc, #60]	; (800a038 <UART_InitCallbacksToDefault+0x50>)
 8009ffa:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a0f      	ldr	r2, [pc, #60]	; (800a03c <UART_InitCallbacksToDefault+0x54>)
 800a000:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a0e      	ldr	r2, [pc, #56]	; (800a040 <UART_InitCallbacksToDefault+0x58>)
 800a006:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a0e      	ldr	r2, [pc, #56]	; (800a044 <UART_InitCallbacksToDefault+0x5c>)
 800a00c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a0d      	ldr	r2, [pc, #52]	; (800a048 <UART_InitCallbacksToDefault+0x60>)
 800a012:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a0d      	ldr	r2, [pc, #52]	; (800a04c <UART_InitCallbacksToDefault+0x64>)
 800a018:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a0c      	ldr	r2, [pc, #48]	; (800a050 <UART_InitCallbacksToDefault+0x68>)
 800a01e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a0c      	ldr	r2, [pc, #48]	; (800a054 <UART_InitCallbacksToDefault+0x6c>)
 800a024:	669a      	str	r2, [r3, #104]	; 0x68

}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	08009f45 	.word	0x08009f45
 800a038:	08009f31 	.word	0x08009f31
 800a03c:	08009f6d 	.word	0x08009f6d
 800a040:	08009f59 	.word	0x08009f59
 800a044:	08009f81 	.word	0x08009f81
 800a048:	08009f95 	.word	0x08009f95
 800a04c:	08009fa9 	.word	0x08009fa9
 800a050:	08009fbd 	.word	0x08009fbd
 800a054:	08009fd1 	.word	0x08009fd1

0800a058 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b090      	sub	sp, #64	; 0x40
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a064:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	d137      	bne.n	800a0e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	2200      	movs	r2, #0
 800a078:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3314      	adds	r3, #20
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	623b      	str	r3, [r7, #32]
   return(result);
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a090:	63bb      	str	r3, [r7, #56]	; 0x38
 800a092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3314      	adds	r3, #20
 800a098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a09a:	633a      	str	r2, [r7, #48]	; 0x30
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a2:	e841 2300 	strex	r3, r2, [r1]
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e5      	bne.n	800a07a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	330c      	adds	r3, #12
 800a0b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	330c      	adds	r3, #12
 800a0cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ce:	61fa      	str	r2, [r7, #28]
 800a0d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	69b9      	ldr	r1, [r7, #24]
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	617b      	str	r3, [r7, #20]
   return(result);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e5      	bne.n	800a0ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0e2:	e003      	b.n	800a0ec <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800a0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a0ea:	4798      	blx	r3
}
 800a0ec:	bf00      	nop
 800a0ee:	3740      	adds	r7, #64	; 0x40
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a100:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b09c      	sub	sp, #112	; 0x70
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d172      	bne.n	800a214 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a130:	2200      	movs	r2, #0
 800a132:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	330c      	adds	r3, #12
 800a13a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a14a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	330c      	adds	r3, #12
 800a152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a154:	65ba      	str	r2, [r7, #88]	; 0x58
 800a156:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a15a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a15c:	e841 2300 	strex	r3, r2, [r1]
 800a160:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e5      	bne.n	800a134 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3314      	adds	r3, #20
 800a16e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	f023 0301 	bic.w	r3, r3, #1
 800a17e:	667b      	str	r3, [r7, #100]	; 0x64
 800a180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3314      	adds	r3, #20
 800a186:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a188:	647a      	str	r2, [r7, #68]	; 0x44
 800a18a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e5      	bne.n	800a168 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a19c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3314      	adds	r3, #20
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b2:	663b      	str	r3, [r7, #96]	; 0x60
 800a1b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3314      	adds	r3, #20
 800a1ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1bc:	633a      	str	r2, [r7, #48]	; 0x30
 800a1be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e5      	bne.n	800a19c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d119      	bne.n	800a214 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0310 	bic.w	r3, r3, #16
 800a1f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	330c      	adds	r3, #12
 800a1fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a200:	61fa      	str	r2, [r7, #28]
 800a202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	69b9      	ldr	r1, [r7, #24]
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	617b      	str	r3, [r7, #20]
   return(result);
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d107      	bne.n	800a22c <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a21c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a21e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a220:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a222:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a224:	4611      	mov	r1, r2
 800a226:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a228:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a22a:	e003      	b.n	800a234 <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 800a22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a230:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a232:	4798      	blx	r3
}
 800a234:	bf00      	nop
 800a236:	3770      	adds	r7, #112	; 0x70
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a248:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d109      	bne.n	800a266 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a25a:	0852      	lsrs	r2, r2, #1
 800a25c:	b292      	uxth	r2, r2
 800a25e:	4611      	mov	r1, r2
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a264:	e003      	b.n	800a26e <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	4798      	blx	r3
}
 800a26e:	bf00      	nop
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a286:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a292:	2b80      	cmp	r3, #128	; 0x80
 800a294:	bf0c      	ite	eq
 800a296:	2301      	moveq	r3, #1
 800a298:	2300      	movne	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b21      	cmp	r3, #33	; 0x21
 800a2a8:	d108      	bne.n	800a2bc <UART_DMAError+0x46>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a2b6:	68b8      	ldr	r0, [r7, #8]
 800a2b8:	f000 f8c6 	bl	800a448 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c6:	2b40      	cmp	r3, #64	; 0x40
 800a2c8:	bf0c      	ite	eq
 800a2ca:	2301      	moveq	r3, #1
 800a2cc:	2300      	movne	r3, #0
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b22      	cmp	r3, #34	; 0x22
 800a2dc:	d108      	bne.n	800a2f0 <UART_DMAError+0x7a>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a2ea:	68b8      	ldr	r0, [r7, #8]
 800a2ec:	f000 f8d4 	bl	800a498 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	f043 0210 	orr.w	r2, r3, #16
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a300:	68b8      	ldr	r0, [r7, #8]
 800a302:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a304:	bf00      	nop
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b098      	sub	sp, #96	; 0x60
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	88fa      	ldrh	r2, [r7, #6]
 800a324:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2222      	movs	r2, #34	; 0x22
 800a330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	4a40      	ldr	r2, [pc, #256]	; (800a43c <UART_Start_Receive_DMA+0x130>)
 800a33a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a340:	4a3f      	ldr	r2, [pc, #252]	; (800a440 <UART_Start_Receive_DMA+0x134>)
 800a342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	4a3e      	ldr	r2, [pc, #248]	; (800a444 <UART_Start_Receive_DMA+0x138>)
 800a34a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a350:	2200      	movs	r2, #0
 800a352:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a354:	f107 0308 	add.w	r3, r7, #8
 800a358:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3304      	adds	r3, #4
 800a364:	4619      	mov	r1, r3
 800a366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	f7f9 fa52 	bl	8003814 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a370:	2300      	movs	r3, #0
 800a372:	613b      	str	r3, [r7, #16]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	613b      	str	r3, [r7, #16]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	613b      	str	r3, [r7, #16]
 800a384:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d019      	beq.n	800a3ca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	330c      	adds	r3, #12
 800a39c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a0:	e853 3f00 	ldrex	r3, [r3]
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	330c      	adds	r3, #12
 800a3b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a3b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a3bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3be:	e841 2300 	strex	r3, r2, [r1]
 800a3c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e5      	bne.n	800a396 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	f043 0301 	orr.w	r3, r3, #1
 800a3e0:	657b      	str	r3, [r7, #84]	; 0x54
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3314      	adds	r3, #20
 800a3e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3ea:	63ba      	str	r2, [r7, #56]	; 0x38
 800a3ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a3f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e5      	bne.n	800a3ca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3314      	adds	r3, #20
 800a404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	617b      	str	r3, [r7, #20]
   return(result);
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a414:	653b      	str	r3, [r7, #80]	; 0x50
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3314      	adds	r3, #20
 800a41c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a41e:	627a      	str	r2, [r7, #36]	; 0x24
 800a420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6a39      	ldr	r1, [r7, #32]
 800a424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e5      	bne.n	800a3fe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3760      	adds	r7, #96	; 0x60
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	0800a113 	.word	0x0800a113
 800a440:	0800a23d 	.word	0x0800a23d
 800a444:	0800a277 	.word	0x0800a277

0800a448 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a448:	b480      	push	{r7}
 800a44a:	b089      	sub	sp, #36	; 0x24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	330c      	adds	r3, #12
 800a456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	e853 3f00 	ldrex	r3, [r3]
 800a45e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	330c      	adds	r3, #12
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	61ba      	str	r2, [r7, #24]
 800a472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a474:	6979      	ldr	r1, [r7, #20]
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	e841 2300 	strex	r3, r2, [r1]
 800a47c:	613b      	str	r3, [r7, #16]
   return(result);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e5      	bne.n	800a450 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a48c:	bf00      	nop
 800a48e:	3724      	adds	r7, #36	; 0x24
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b095      	sub	sp, #84	; 0x54
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	330c      	adds	r3, #12
 800a4a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	330c      	adds	r3, #12
 800a4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4c0:	643a      	str	r2, [r7, #64]	; 0x40
 800a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e5      	bne.n	800a4a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3314      	adds	r3, #20
 800a4da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3314      	adds	r3, #20
 800a4f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e5      	bne.n	800a4d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d119      	bne.n	800a544 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	330c      	adds	r3, #12
 800a516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	e853 3f00 	ldrex	r3, [r3]
 800a51e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f023 0310 	bic.w	r3, r3, #16
 800a526:	647b      	str	r3, [r7, #68]	; 0x44
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	330c      	adds	r3, #12
 800a52e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a530:	61ba      	str	r2, [r7, #24]
 800a532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	6979      	ldr	r1, [r7, #20]
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	613b      	str	r3, [r7, #16]
   return(result);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e5      	bne.n	800a510 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2220      	movs	r2, #32
 800a548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a552:	bf00      	nop
 800a554:	3754      	adds	r7, #84	; 0x54
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b21      	cmp	r3, #33	; 0x21
 800a59a:	d13e      	bne.n	800a61a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a4:	d114      	bne.n	800a5d0 <UART_Transmit_IT+0x48>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d110      	bne.n	800a5d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	1c9a      	adds	r2, r3, #2
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	621a      	str	r2, [r3, #32]
 800a5ce:	e008      	b.n	800a5e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	1c59      	adds	r1, r3, #1
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6211      	str	r1, [r2, #32]
 800a5da:	781a      	ldrb	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10f      	bne.n	800a616 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68da      	ldr	r2, [r3, #12]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a604:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68da      	ldr	r2, [r3, #12]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a614:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	e000      	b.n	800a61c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a61a:	2302      	movs	r3, #2
  }
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a63e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2220      	movs	r2, #32
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b08c      	sub	sp, #48	; 0x30
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b22      	cmp	r3, #34	; 0x22
 800a66c:	f040 80ad 	bne.w	800a7ca <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a678:	d117      	bne.n	800a6aa <UART_Receive_IT+0x50>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d113      	bne.n	800a6aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	b29b      	uxth	r3, r3
 800a694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a698:	b29a      	uxth	r2, r3
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	1c9a      	adds	r2, r3, #2
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	629a      	str	r2, [r3, #40]	; 0x28
 800a6a8:	e026      	b.n	800a6f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6bc:	d007      	beq.n	800a6ce <UART_Receive_IT+0x74>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10a      	bne.n	800a6dc <UART_Receive_IT+0x82>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	e008      	b.n	800a6ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b29b      	uxth	r3, r3
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	4619      	mov	r1, r3
 800a706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d15c      	bne.n	800a7c6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0220 	bic.w	r2, r2, #32
 800a71a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a72a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	695a      	ldr	r2, [r3, #20]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0201 	bic.w	r2, r2, #1
 800a73a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d136      	bne.n	800a7ba <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	330c      	adds	r3, #12
 800a758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	e853 3f00 	ldrex	r3, [r3]
 800a760:	613b      	str	r3, [r7, #16]
   return(result);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f023 0310 	bic.w	r3, r3, #16
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	330c      	adds	r3, #12
 800a770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a772:	623a      	str	r2, [r7, #32]
 800a774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	69f9      	ldr	r1, [r7, #28]
 800a778:	6a3a      	ldr	r2, [r7, #32]
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e5      	bne.n	800a752 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	2b10      	cmp	r3, #16
 800a792:	d10a      	bne.n	800a7aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	4798      	blx	r3
 800a7b8:	e003      	b.n	800a7c2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e002      	b.n	800a7cc <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e000      	b.n	800a7cc <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800a7ca:	2302      	movs	r3, #2
  }
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3730      	adds	r7, #48	; 0x30
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7d8:	b0c0      	sub	sp, #256	; 0x100
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f0:	68d9      	ldr	r1, [r3, #12]
 800a7f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	ea40 0301 	orr.w	r3, r0, r1
 800a7fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	431a      	orrs	r2, r3
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a82c:	f021 010c 	bic.w	r1, r1, #12
 800a830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a83a:	430b      	orrs	r3, r1
 800a83c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84e:	6999      	ldr	r1, [r3, #24]
 800a850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	ea40 0301 	orr.w	r3, r0, r1
 800a85a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b8f      	ldr	r3, [pc, #572]	; (800aaa0 <UART_SetConfig+0x2cc>)
 800a864:	429a      	cmp	r2, r3
 800a866:	d005      	beq.n	800a874 <UART_SetConfig+0xa0>
 800a868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	4b8d      	ldr	r3, [pc, #564]	; (800aaa4 <UART_SetConfig+0x2d0>)
 800a870:	429a      	cmp	r2, r3
 800a872:	d104      	bne.n	800a87e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a874:	f7fd fd56 	bl	8008324 <HAL_RCC_GetPCLK2Freq>
 800a878:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a87c:	e003      	b.n	800a886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a87e:	f7fd fd3d 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 800a882:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a890:	f040 810c 	bne.w	800aaac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a89e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a8a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	1891      	adds	r1, r2, r2
 800a8ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800a8ae:	415b      	adcs	r3, r3
 800a8b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	eb12 0801 	adds.w	r8, r2, r1
 800a8bc:	4629      	mov	r1, r5
 800a8be:	eb43 0901 	adc.w	r9, r3, r1
 800a8c2:	f04f 0200 	mov.w	r2, #0
 800a8c6:	f04f 0300 	mov.w	r3, #0
 800a8ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8d6:	4690      	mov	r8, r2
 800a8d8:	4699      	mov	r9, r3
 800a8da:	4623      	mov	r3, r4
 800a8dc:	eb18 0303 	adds.w	r3, r8, r3
 800a8e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	eb49 0303 	adc.w	r3, r9, r3
 800a8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a8fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a902:	460b      	mov	r3, r1
 800a904:	18db      	adds	r3, r3, r3
 800a906:	653b      	str	r3, [r7, #80]	; 0x50
 800a908:	4613      	mov	r3, r2
 800a90a:	eb42 0303 	adc.w	r3, r2, r3
 800a90e:	657b      	str	r3, [r7, #84]	; 0x54
 800a910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a918:	f7f5 fcaa 	bl	8000270 <__aeabi_uldivmod>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4b61      	ldr	r3, [pc, #388]	; (800aaa8 <UART_SetConfig+0x2d4>)
 800a922:	fba3 2302 	umull	r2, r3, r3, r2
 800a926:	095b      	lsrs	r3, r3, #5
 800a928:	011c      	lsls	r4, r3, #4
 800a92a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a92e:	2200      	movs	r2, #0
 800a930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a934:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a93c:	4642      	mov	r2, r8
 800a93e:	464b      	mov	r3, r9
 800a940:	1891      	adds	r1, r2, r2
 800a942:	64b9      	str	r1, [r7, #72]	; 0x48
 800a944:	415b      	adcs	r3, r3
 800a946:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a94c:	4641      	mov	r1, r8
 800a94e:	eb12 0a01 	adds.w	sl, r2, r1
 800a952:	4649      	mov	r1, r9
 800a954:	eb43 0b01 	adc.w	fp, r3, r1
 800a958:	f04f 0200 	mov.w	r2, #0
 800a95c:	f04f 0300 	mov.w	r3, #0
 800a960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a96c:	4692      	mov	sl, r2
 800a96e:	469b      	mov	fp, r3
 800a970:	4643      	mov	r3, r8
 800a972:	eb1a 0303 	adds.w	r3, sl, r3
 800a976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a97a:	464b      	mov	r3, r9
 800a97c:	eb4b 0303 	adc.w	r3, fp, r3
 800a980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a990:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a998:	460b      	mov	r3, r1
 800a99a:	18db      	adds	r3, r3, r3
 800a99c:	643b      	str	r3, [r7, #64]	; 0x40
 800a99e:	4613      	mov	r3, r2
 800a9a0:	eb42 0303 	adc.w	r3, r2, r3
 800a9a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a9a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a9ae:	f7f5 fc5f 	bl	8000270 <__aeabi_uldivmod>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4b3b      	ldr	r3, [pc, #236]	; (800aaa8 <UART_SetConfig+0x2d4>)
 800a9ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a9be:	095b      	lsrs	r3, r3, #5
 800a9c0:	2264      	movs	r2, #100	; 0x64
 800a9c2:	fb02 f303 	mul.w	r3, r2, r3
 800a9c6:	1acb      	subs	r3, r1, r3
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a9ce:	4b36      	ldr	r3, [pc, #216]	; (800aaa8 <UART_SetConfig+0x2d4>)
 800a9d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a9d4:	095b      	lsrs	r3, r3, #5
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9dc:	441c      	add	r4, r3
 800a9de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a9ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	1891      	adds	r1, r2, r2
 800a9f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a9f8:	415b      	adcs	r3, r3
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa00:	4641      	mov	r1, r8
 800aa02:	1851      	adds	r1, r2, r1
 800aa04:	6339      	str	r1, [r7, #48]	; 0x30
 800aa06:	4649      	mov	r1, r9
 800aa08:	414b      	adcs	r3, r1
 800aa0a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	f04f 0300 	mov.w	r3, #0
 800aa14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aa18:	4659      	mov	r1, fp
 800aa1a:	00cb      	lsls	r3, r1, #3
 800aa1c:	4651      	mov	r1, sl
 800aa1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa22:	4651      	mov	r1, sl
 800aa24:	00ca      	lsls	r2, r1, #3
 800aa26:	4610      	mov	r0, r2
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	4642      	mov	r2, r8
 800aa2e:	189b      	adds	r3, r3, r2
 800aa30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa34:	464b      	mov	r3, r9
 800aa36:	460a      	mov	r2, r1
 800aa38:	eb42 0303 	adc.w	r3, r2, r3
 800aa3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa54:	460b      	mov	r3, r1
 800aa56:	18db      	adds	r3, r3, r3
 800aa58:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	eb42 0303 	adc.w	r3, r2, r3
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa6a:	f7f5 fc01 	bl	8000270 <__aeabi_uldivmod>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4b0d      	ldr	r3, [pc, #52]	; (800aaa8 <UART_SetConfig+0x2d4>)
 800aa74:	fba3 1302 	umull	r1, r3, r3, r2
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	2164      	movs	r1, #100	; 0x64
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	00db      	lsls	r3, r3, #3
 800aa84:	3332      	adds	r3, #50	; 0x32
 800aa86:	4a08      	ldr	r2, [pc, #32]	; (800aaa8 <UART_SetConfig+0x2d4>)
 800aa88:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	f003 0207 	and.w	r2, r3, #7
 800aa92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4422      	add	r2, r4
 800aa9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa9c:	e106      	b.n	800acac <UART_SetConfig+0x4d8>
 800aa9e:	bf00      	nop
 800aaa0:	40011000 	.word	0x40011000
 800aaa4:	40011400 	.word	0x40011400
 800aaa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aaac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aab6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aaba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aabe:	4642      	mov	r2, r8
 800aac0:	464b      	mov	r3, r9
 800aac2:	1891      	adds	r1, r2, r2
 800aac4:	6239      	str	r1, [r7, #32]
 800aac6:	415b      	adcs	r3, r3
 800aac8:	627b      	str	r3, [r7, #36]	; 0x24
 800aaca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aace:	4641      	mov	r1, r8
 800aad0:	1854      	adds	r4, r2, r1
 800aad2:	4649      	mov	r1, r9
 800aad4:	eb43 0501 	adc.w	r5, r3, r1
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	f04f 0300 	mov.w	r3, #0
 800aae0:	00eb      	lsls	r3, r5, #3
 800aae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aae6:	00e2      	lsls	r2, r4, #3
 800aae8:	4614      	mov	r4, r2
 800aaea:	461d      	mov	r5, r3
 800aaec:	4643      	mov	r3, r8
 800aaee:	18e3      	adds	r3, r4, r3
 800aaf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aaf4:	464b      	mov	r3, r9
 800aaf6:	eb45 0303 	adc.w	r3, r5, r3
 800aafa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	f04f 0300 	mov.w	r3, #0
 800ab16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	008b      	lsls	r3, r1, #2
 800ab1e:	4621      	mov	r1, r4
 800ab20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab24:	4621      	mov	r1, r4
 800ab26:	008a      	lsls	r2, r1, #2
 800ab28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab2c:	f7f5 fba0 	bl	8000270 <__aeabi_uldivmod>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4b60      	ldr	r3, [pc, #384]	; (800acb8 <UART_SetConfig+0x4e4>)
 800ab36:	fba3 2302 	umull	r2, r3, r3, r2
 800ab3a:	095b      	lsrs	r3, r3, #5
 800ab3c:	011c      	lsls	r4, r3, #4
 800ab3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab50:	4642      	mov	r2, r8
 800ab52:	464b      	mov	r3, r9
 800ab54:	1891      	adds	r1, r2, r2
 800ab56:	61b9      	str	r1, [r7, #24]
 800ab58:	415b      	adcs	r3, r3
 800ab5a:	61fb      	str	r3, [r7, #28]
 800ab5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab60:	4641      	mov	r1, r8
 800ab62:	1851      	adds	r1, r2, r1
 800ab64:	6139      	str	r1, [r7, #16]
 800ab66:	4649      	mov	r1, r9
 800ab68:	414b      	adcs	r3, r1
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	f04f 0200 	mov.w	r2, #0
 800ab70:	f04f 0300 	mov.w	r3, #0
 800ab74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab78:	4659      	mov	r1, fp
 800ab7a:	00cb      	lsls	r3, r1, #3
 800ab7c:	4651      	mov	r1, sl
 800ab7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab82:	4651      	mov	r1, sl
 800ab84:	00ca      	lsls	r2, r1, #3
 800ab86:	4610      	mov	r0, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	189b      	adds	r3, r3, r2
 800ab90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab94:	464b      	mov	r3, r9
 800ab96:	460a      	mov	r2, r1
 800ab98:	eb42 0303 	adc.w	r3, r2, r3
 800ab9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	67bb      	str	r3, [r7, #120]	; 0x78
 800abaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	f04f 0300 	mov.w	r3, #0
 800abb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800abb8:	4649      	mov	r1, r9
 800abba:	008b      	lsls	r3, r1, #2
 800abbc:	4641      	mov	r1, r8
 800abbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abc2:	4641      	mov	r1, r8
 800abc4:	008a      	lsls	r2, r1, #2
 800abc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800abca:	f7f5 fb51 	bl	8000270 <__aeabi_uldivmod>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4611      	mov	r1, r2
 800abd4:	4b38      	ldr	r3, [pc, #224]	; (800acb8 <UART_SetConfig+0x4e4>)
 800abd6:	fba3 2301 	umull	r2, r3, r3, r1
 800abda:	095b      	lsrs	r3, r3, #5
 800abdc:	2264      	movs	r2, #100	; 0x64
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	1acb      	subs	r3, r1, r3
 800abe4:	011b      	lsls	r3, r3, #4
 800abe6:	3332      	adds	r3, #50	; 0x32
 800abe8:	4a33      	ldr	r2, [pc, #204]	; (800acb8 <UART_SetConfig+0x4e4>)
 800abea:	fba2 2303 	umull	r2, r3, r2, r3
 800abee:	095b      	lsrs	r3, r3, #5
 800abf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abf4:	441c      	add	r4, r3
 800abf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abfa:	2200      	movs	r2, #0
 800abfc:	673b      	str	r3, [r7, #112]	; 0x70
 800abfe:	677a      	str	r2, [r7, #116]	; 0x74
 800ac00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ac04:	4642      	mov	r2, r8
 800ac06:	464b      	mov	r3, r9
 800ac08:	1891      	adds	r1, r2, r2
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	415b      	adcs	r3, r3
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac14:	4641      	mov	r1, r8
 800ac16:	1851      	adds	r1, r2, r1
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	414b      	adcs	r3, r1
 800ac1e:	607b      	str	r3, [r7, #4]
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	f04f 0300 	mov.w	r3, #0
 800ac28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	00cb      	lsls	r3, r1, #3
 800ac30:	4651      	mov	r1, sl
 800ac32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac36:	4651      	mov	r1, sl
 800ac38:	00ca      	lsls	r2, r1, #3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4642      	mov	r2, r8
 800ac42:	189b      	adds	r3, r3, r2
 800ac44:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac46:	464b      	mov	r3, r9
 800ac48:	460a      	mov	r2, r1
 800ac4a:	eb42 0303 	adc.w	r3, r2, r3
 800ac4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	663b      	str	r3, [r7, #96]	; 0x60
 800ac5a:	667a      	str	r2, [r7, #100]	; 0x64
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac68:	4649      	mov	r1, r9
 800ac6a:	008b      	lsls	r3, r1, #2
 800ac6c:	4641      	mov	r1, r8
 800ac6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac72:	4641      	mov	r1, r8
 800ac74:	008a      	lsls	r2, r1, #2
 800ac76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac7a:	f7f5 faf9 	bl	8000270 <__aeabi_uldivmod>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <UART_SetConfig+0x4e4>)
 800ac84:	fba3 1302 	umull	r1, r3, r3, r2
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	2164      	movs	r1, #100	; 0x64
 800ac8c:	fb01 f303 	mul.w	r3, r1, r3
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	3332      	adds	r3, #50	; 0x32
 800ac96:	4a08      	ldr	r2, [pc, #32]	; (800acb8 <UART_SetConfig+0x4e4>)
 800ac98:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	f003 020f 	and.w	r2, r3, #15
 800aca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4422      	add	r2, r4
 800acaa:	609a      	str	r2, [r3, #8]
}
 800acac:	bf00      	nop
 800acae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800acb2:	46bd      	mov	sp, r7
 800acb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acb8:	51eb851f 	.word	0x51eb851f

0800acbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acbc:	b084      	sub	sp, #16
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	f107 001c 	add.w	r0, r7, #28
 800acca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d122      	bne.n	800ad1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ace8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d105      	bne.n	800ad0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 fbee 	bl	800c4f0 <USB_CoreReset>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]
 800ad18:	e01a      	b.n	800ad50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 fbe2 	bl	800c4f0 <USB_CoreReset>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	639a      	str	r2, [r3, #56]	; 0x38
 800ad42:	e005      	b.n	800ad50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d10b      	bne.n	800ad6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f043 0206 	orr.w	r2, r3, #6
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f043 0220 	orr.w	r2, r3, #32
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad7a:	b004      	add	sp, #16
 800ad7c:	4770      	bx	lr
	...

0800ad80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b087      	sub	sp, #28
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d165      	bne.n	800ae60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	4a41      	ldr	r2, [pc, #260]	; (800ae9c <USB_SetTurnaroundTime+0x11c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d906      	bls.n	800adaa <USB_SetTurnaroundTime+0x2a>
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4a40      	ldr	r2, [pc, #256]	; (800aea0 <USB_SetTurnaroundTime+0x120>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d202      	bcs.n	800adaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ada4:	230f      	movs	r3, #15
 800ada6:	617b      	str	r3, [r7, #20]
 800ada8:	e062      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	4a3c      	ldr	r2, [pc, #240]	; (800aea0 <USB_SetTurnaroundTime+0x120>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d306      	bcc.n	800adc0 <USB_SetTurnaroundTime+0x40>
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	4a3b      	ldr	r2, [pc, #236]	; (800aea4 <USB_SetTurnaroundTime+0x124>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d202      	bcs.n	800adc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800adba:	230e      	movs	r3, #14
 800adbc:	617b      	str	r3, [r7, #20]
 800adbe:	e057      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	4a38      	ldr	r2, [pc, #224]	; (800aea4 <USB_SetTurnaroundTime+0x124>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d306      	bcc.n	800add6 <USB_SetTurnaroundTime+0x56>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	4a37      	ldr	r2, [pc, #220]	; (800aea8 <USB_SetTurnaroundTime+0x128>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d202      	bcs.n	800add6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800add0:	230d      	movs	r3, #13
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	e04c      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	4a33      	ldr	r2, [pc, #204]	; (800aea8 <USB_SetTurnaroundTime+0x128>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d306      	bcc.n	800adec <USB_SetTurnaroundTime+0x6c>
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	4a32      	ldr	r2, [pc, #200]	; (800aeac <USB_SetTurnaroundTime+0x12c>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d802      	bhi.n	800adec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ade6:	230c      	movs	r3, #12
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	e041      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	4a2f      	ldr	r2, [pc, #188]	; (800aeac <USB_SetTurnaroundTime+0x12c>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d906      	bls.n	800ae02 <USB_SetTurnaroundTime+0x82>
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4a2e      	ldr	r2, [pc, #184]	; (800aeb0 <USB_SetTurnaroundTime+0x130>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d802      	bhi.n	800ae02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800adfc:	230b      	movs	r3, #11
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	e036      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	4a2a      	ldr	r2, [pc, #168]	; (800aeb0 <USB_SetTurnaroundTime+0x130>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d906      	bls.n	800ae18 <USB_SetTurnaroundTime+0x98>
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	4a29      	ldr	r2, [pc, #164]	; (800aeb4 <USB_SetTurnaroundTime+0x134>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d802      	bhi.n	800ae18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ae12:	230a      	movs	r3, #10
 800ae14:	617b      	str	r3, [r7, #20]
 800ae16:	e02b      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	4a26      	ldr	r2, [pc, #152]	; (800aeb4 <USB_SetTurnaroundTime+0x134>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d906      	bls.n	800ae2e <USB_SetTurnaroundTime+0xae>
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	4a25      	ldr	r2, [pc, #148]	; (800aeb8 <USB_SetTurnaroundTime+0x138>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d202      	bcs.n	800ae2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ae28:	2309      	movs	r3, #9
 800ae2a:	617b      	str	r3, [r7, #20]
 800ae2c:	e020      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	4a21      	ldr	r2, [pc, #132]	; (800aeb8 <USB_SetTurnaroundTime+0x138>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d306      	bcc.n	800ae44 <USB_SetTurnaroundTime+0xc4>
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	4a20      	ldr	r2, [pc, #128]	; (800aebc <USB_SetTurnaroundTime+0x13c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d802      	bhi.n	800ae44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ae3e:	2308      	movs	r3, #8
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	e015      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	4a1d      	ldr	r2, [pc, #116]	; (800aebc <USB_SetTurnaroundTime+0x13c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d906      	bls.n	800ae5a <USB_SetTurnaroundTime+0xda>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	4a1c      	ldr	r2, [pc, #112]	; (800aec0 <USB_SetTurnaroundTime+0x140>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d202      	bcs.n	800ae5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae54:	2307      	movs	r3, #7
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	e00a      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae5a:	2306      	movs	r3, #6
 800ae5c:	617b      	str	r3, [r7, #20]
 800ae5e:	e007      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d102      	bne.n	800ae6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ae66:	2309      	movs	r3, #9
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e001      	b.n	800ae70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ae6c:	2309      	movs	r3, #9
 800ae6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68da      	ldr	r2, [r3, #12]
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	029b      	lsls	r3, r3, #10
 800ae84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	371c      	adds	r7, #28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	00d8acbf 	.word	0x00d8acbf
 800aea0:	00e4e1c0 	.word	0x00e4e1c0
 800aea4:	00f42400 	.word	0x00f42400
 800aea8:	01067380 	.word	0x01067380
 800aeac:	011a499f 	.word	0x011a499f
 800aeb0:	01312cff 	.word	0x01312cff
 800aeb4:	014ca43f 	.word	0x014ca43f
 800aeb8:	016e3600 	.word	0x016e3600
 800aebc:	01a6ab1f 	.word	0x01a6ab1f
 800aec0:	01e84800 	.word	0x01e84800

0800aec4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f043 0201 	orr.w	r2, r3, #1
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f023 0201 	bic.w	r2, r3, #1
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d115      	bne.n	800af56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af36:	2001      	movs	r0, #1
 800af38:	f7f7 fa92 	bl	8002460 <HAL_Delay>
      ms++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 fa45 	bl	800c3d2 <USB_GetMode>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d01e      	beq.n	800af8c <USB_SetCurrentMode+0x84>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b31      	cmp	r3, #49	; 0x31
 800af52:	d9f0      	bls.n	800af36 <USB_SetCurrentMode+0x2e>
 800af54:	e01a      	b.n	800af8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d115      	bne.n	800af88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af68:	2001      	movs	r0, #1
 800af6a:	f7f7 fa79 	bl	8002460 <HAL_Delay>
      ms++;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3301      	adds	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 fa2c 	bl	800c3d2 <USB_GetMode>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d005      	beq.n	800af8c <USB_SetCurrentMode+0x84>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b31      	cmp	r3, #49	; 0x31
 800af84:	d9f0      	bls.n	800af68 <USB_SetCurrentMode+0x60>
 800af86:	e001      	b.n	800af8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e005      	b.n	800af98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b32      	cmp	r3, #50	; 0x32
 800af90:	d101      	bne.n	800af96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e000      	b.n	800af98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afa0:	b084      	sub	sp, #16
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b086      	sub	sp, #24
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800afae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800afba:	2300      	movs	r3, #0
 800afbc:	613b      	str	r3, [r7, #16]
 800afbe:	e009      	b.n	800afd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	3340      	adds	r3, #64	; 0x40
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	2200      	movs	r2, #0
 800afcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3301      	adds	r3, #1
 800afd2:	613b      	str	r3, [r7, #16]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	2b0e      	cmp	r3, #14
 800afd8:	d9f2      	bls.n	800afc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800afda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d11c      	bne.n	800b01a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afee:	f043 0302 	orr.w	r3, r3, #2
 800aff2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b010:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	639a      	str	r2, [r3, #56]	; 0x38
 800b018:	e00b      	b.n	800b032 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b038:	461a      	mov	r2, r3
 800b03a:	2300      	movs	r3, #0
 800b03c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b044:	4619      	mov	r1, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b04c:	461a      	mov	r2, r3
 800b04e:	680b      	ldr	r3, [r1, #0]
 800b050:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	2b01      	cmp	r3, #1
 800b056:	d10c      	bne.n	800b072 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d104      	bne.n	800b068 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b05e:	2100      	movs	r1, #0
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f965 	bl	800b330 <USB_SetDevSpeed>
 800b066:	e008      	b.n	800b07a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b068:	2101      	movs	r1, #1
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f960 	bl	800b330 <USB_SetDevSpeed>
 800b070:	e003      	b.n	800b07a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b072:	2103      	movs	r1, #3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f95b 	bl	800b330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b07a:	2110      	movs	r1, #16
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f8f3 	bl	800b268 <USB_FlushTxFifo>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f91f 	bl	800b2d0 <USB_FlushRxFifo>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	e043      	b.n	800b14e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	015a      	lsls	r2, r3, #5
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0dc:	d118      	bne.n	800b110 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	e013      	b.n	800b122 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	461a      	mov	r2, r3
 800b108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	e008      	b.n	800b122 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11c:	461a      	mov	r2, r3
 800b11e:	2300      	movs	r3, #0
 800b120:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12e:	461a      	mov	r2, r3
 800b130:	2300      	movs	r3, #0
 800b132:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b140:	461a      	mov	r2, r3
 800b142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b146:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	3301      	adds	r3, #1
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	429a      	cmp	r2, r3
 800b154:	d3b7      	bcc.n	800b0c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b156:	2300      	movs	r3, #0
 800b158:	613b      	str	r3, [r7, #16]
 800b15a:	e043      	b.n	800b1e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b16e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b172:	d118      	bne.n	800b1a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b186:	461a      	mov	r2, r3
 800b188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e013      	b.n	800b1b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19c:	461a      	mov	r2, r3
 800b19e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	e008      	b.n	800b1b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b1dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	613b      	str	r3, [r7, #16]
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d3b7      	bcc.n	800b15c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b20c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	f043 0210 	orr.w	r2, r3, #16
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	699a      	ldr	r2, [r3, #24]
 800b224:	4b0f      	ldr	r3, [pc, #60]	; (800b264 <USB_DevInit+0x2c4>)
 800b226:	4313      	orrs	r3, r2
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d005      	beq.n	800b23e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	f043 0208 	orr.w	r2, r3, #8
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b240:	2b01      	cmp	r3, #1
 800b242:	d107      	bne.n	800b254 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b24c:	f043 0304 	orr.w	r3, r3, #4
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b254:	7dfb      	ldrb	r3, [r7, #23]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b260:	b004      	add	sp, #16
 800b262:	4770      	bx	lr
 800b264:	803c3800 	.word	0x803c3800

0800b268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4a13      	ldr	r2, [pc, #76]	; (800b2cc <USB_FlushTxFifo+0x64>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d901      	bls.n	800b288 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e01b      	b.n	800b2c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	daf2      	bge.n	800b276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	019b      	lsls	r3, r3, #6
 800b298:	f043 0220 	orr.w	r2, r3, #32
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4a08      	ldr	r2, [pc, #32]	; (800b2cc <USB_FlushTxFifo+0x64>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d901      	bls.n	800b2b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e006      	b.n	800b2c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d0f0      	beq.n	800b2a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	00030d40 	.word	0x00030d40

0800b2d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4a11      	ldr	r2, [pc, #68]	; (800b32c <USB_FlushRxFifo+0x5c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d901      	bls.n	800b2ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e018      	b.n	800b320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	daf2      	bge.n	800b2dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2210      	movs	r2, #16
 800b2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a08      	ldr	r2, [pc, #32]	; (800b32c <USB_FlushRxFifo+0x5c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d901      	bls.n	800b312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e006      	b.n	800b320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	2b10      	cmp	r3, #16
 800b31c:	d0f0      	beq.n	800b300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	00030d40 	.word	0x00030d40

0800b330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	68f9      	ldr	r1, [r7, #12]
 800b34c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b350:	4313      	orrs	r3, r2
 800b352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b362:	b480      	push	{r7}
 800b364:	b087      	sub	sp, #28
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f003 0306 	and.w	r3, r3, #6
 800b37a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d102      	bne.n	800b388 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
 800b386:	e00a      	b.n	800b39e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d002      	beq.n	800b394 <USB_GetDevSpeed+0x32>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b06      	cmp	r3, #6
 800b392:	d102      	bne.n	800b39a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b394:	2302      	movs	r3, #2
 800b396:	75fb      	strb	r3, [r7, #23]
 800b398:	e001      	b.n	800b39e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b39a:	230f      	movs	r3, #15
 800b39c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	785b      	ldrb	r3, [r3, #1]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d13a      	bne.n	800b43e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ce:	69da      	ldr	r2, [r3, #28]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	f003 030f 	and.w	r3, r3, #15
 800b3d8:	2101      	movs	r1, #1
 800b3da:	fa01 f303 	lsl.w	r3, r1, r3
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d155      	bne.n	800b4ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	791b      	ldrb	r3, [r3, #4]
 800b41a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b41c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	059b      	lsls	r3, r3, #22
 800b422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b424:	4313      	orrs	r3, r2
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	0151      	lsls	r1, r2, #5
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	440a      	add	r2, r1
 800b42e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	e036      	b.n	800b4ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b444:	69da      	ldr	r2, [r3, #28]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	f003 030f 	and.w	r3, r3, #15
 800b44e:	2101      	movs	r1, #1
 800b450:	fa01 f303 	lsl.w	r3, r1, r3
 800b454:	041b      	lsls	r3, r3, #16
 800b456:	68f9      	ldr	r1, [r7, #12]
 800b458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b45c:	4313      	orrs	r3, r2
 800b45e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	4413      	add	r3, r2
 800b468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d11a      	bne.n	800b4ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	015a      	lsls	r2, r3, #5
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	791b      	ldrb	r3, [r3, #4]
 800b490:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b492:	430b      	orrs	r3, r1
 800b494:	4313      	orrs	r3, r2
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	0151      	lsls	r1, r2, #5
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	440a      	add	r2, r1
 800b49e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
	...

0800b4bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	785b      	ldrb	r3, [r3, #1]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d161      	bne.n	800b59c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4ee:	d11f      	bne.n	800b530 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	0151      	lsls	r1, r2, #5
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	440a      	add	r2, r1
 800b506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b50a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b50e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	440a      	add	r2, r1
 800b526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b52a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b52e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	2101      	movs	r1, #1
 800b542:	fa01 f303 	lsl.w	r3, r1, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	43db      	mvns	r3, r3
 800b54a:	68f9      	ldr	r1, [r7, #12]
 800b54c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b550:	4013      	ands	r3, r2
 800b552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b55a:	69da      	ldr	r2, [r3, #28]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 030f 	and.w	r3, r3, #15
 800b564:	2101      	movs	r1, #1
 800b566:	fa01 f303 	lsl.w	r3, r1, r3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	43db      	mvns	r3, r3
 800b56e:	68f9      	ldr	r1, [r7, #12]
 800b570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b574:	4013      	ands	r3, r2
 800b576:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	0159      	lsls	r1, r3, #5
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	440b      	add	r3, r1
 800b58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b592:	4619      	mov	r1, r3
 800b594:	4b35      	ldr	r3, [pc, #212]	; (800b66c <USB_DeactivateEndpoint+0x1b0>)
 800b596:	4013      	ands	r3, r2
 800b598:	600b      	str	r3, [r1, #0]
 800b59a:	e060      	b.n	800b65e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5b2:	d11f      	bne.n	800b5f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	0151      	lsls	r1, r2, #5
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	440a      	add	r2, r1
 800b5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	0151      	lsls	r1, r2, #5
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	440a      	add	r2, r1
 800b5ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	f003 030f 	and.w	r3, r3, #15
 800b604:	2101      	movs	r1, #1
 800b606:	fa01 f303 	lsl.w	r3, r1, r3
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	43db      	mvns	r3, r3
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b614:	4013      	ands	r3, r2
 800b616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61e:	69da      	ldr	r2, [r3, #28]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f003 030f 	and.w	r3, r3, #15
 800b628:	2101      	movs	r1, #1
 800b62a:	fa01 f303 	lsl.w	r3, r1, r3
 800b62e:	041b      	lsls	r3, r3, #16
 800b630:	43db      	mvns	r3, r3
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b638:	4013      	ands	r3, r2
 800b63a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	0159      	lsls	r1, r3, #5
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	440b      	add	r3, r1
 800b652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b656:	4619      	mov	r1, r3
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <USB_DeactivateEndpoint+0x1b4>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	ec337800 	.word	0xec337800
 800b670:	eff37800 	.word	0xeff37800

0800b674 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08a      	sub	sp, #40	; 0x28
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	785b      	ldrb	r3, [r3, #1]
 800b690:	2b01      	cmp	r3, #1
 800b692:	f040 815c 	bne.w	800b94e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d132      	bne.n	800b704 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	69ba      	ldr	r2, [r7, #24]
 800b6ae:	0151      	lsls	r1, r2, #5
 800b6b0:	69fa      	ldr	r2, [r7, #28]
 800b6b2:	440a      	add	r2, r1
 800b6b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	015a      	lsls	r2, r3, #5
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	69ba      	ldr	r2, [r7, #24]
 800b6d2:	0151      	lsls	r1, r2, #5
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	440a      	add	r2, r1
 800b6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	0151      	lsls	r1, r2, #5
 800b6f4:	69fa      	ldr	r2, [r7, #28]
 800b6f6:	440a      	add	r2, r1
 800b6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6fc:	0cdb      	lsrs	r3, r3, #19
 800b6fe:	04db      	lsls	r3, r3, #19
 800b700:	6113      	str	r3, [r2, #16]
 800b702:	e074      	b.n	800b7ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	0151      	lsls	r1, r2, #5
 800b716:	69fa      	ldr	r2, [r7, #28]
 800b718:	440a      	add	r2, r1
 800b71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b71e:	0cdb      	lsrs	r3, r3, #19
 800b720:	04db      	lsls	r3, r3, #19
 800b722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	69ba      	ldr	r2, [r7, #24]
 800b734:	0151      	lsls	r1, r2, #5
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	440a      	add	r2, r1
 800b73a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b73e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	4413      	add	r3, r2
 800b750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b754:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6999      	ldr	r1, [r3, #24]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	440b      	add	r3, r1
 800b760:	1e59      	subs	r1, r3, #1
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	fbb1 f3f3 	udiv	r3, r1, r3
 800b76a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b76c:	4b9d      	ldr	r3, [pc, #628]	; (800b9e4 <USB_EPStartXfer+0x370>)
 800b76e:	400b      	ands	r3, r1
 800b770:	69b9      	ldr	r1, [r7, #24]
 800b772:	0148      	lsls	r0, r1, #5
 800b774:	69f9      	ldr	r1, [r7, #28]
 800b776:	4401      	add	r1, r0
 800b778:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b77c:	4313      	orrs	r3, r2
 800b77e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78c:	691a      	ldr	r2, [r3, #16]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	699b      	ldr	r3, [r3, #24]
 800b792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b796:	69b9      	ldr	r1, [r7, #24]
 800b798:	0148      	lsls	r0, r1, #5
 800b79a:	69f9      	ldr	r1, [r7, #28]
 800b79c:	4401      	add	r1, r0
 800b79e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	791b      	ldrb	r3, [r3, #4]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d11f      	bne.n	800b7ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	015a      	lsls	r2, r3, #5
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	0151      	lsls	r1, r2, #5
 800b7c0:	69fa      	ldr	r2, [r7, #28]
 800b7c2:	440a      	add	r2, r1
 800b7c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b7cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	015a      	lsls	r2, r3, #5
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	0151      	lsls	r1, r2, #5
 800b7e0:	69fa      	ldr	r2, [r7, #28]
 800b7e2:	440a      	add	r2, r1
 800b7e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d14b      	bne.n	800b88c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	4413      	add	r3, r2
 800b804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b808:	461a      	mov	r2, r3
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	791b      	ldrb	r3, [r3, #4]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d128      	bne.n	800b86a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b824:	2b00      	cmp	r3, #0
 800b826:	d110      	bne.n	800b84a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	0151      	lsls	r1, r2, #5
 800b83a:	69fa      	ldr	r2, [r7, #28]
 800b83c:	440a      	add	r2, r1
 800b83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	e00f      	b.n	800b86a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	015a      	lsls	r2, r3, #5
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	4413      	add	r3, r2
 800b852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	0151      	lsls	r1, r2, #5
 800b85c:	69fa      	ldr	r2, [r7, #28]
 800b85e:	440a      	add	r2, r1
 800b860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b868:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	4413      	add	r3, r2
 800b872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	0151      	lsls	r1, r2, #5
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	440a      	add	r2, r1
 800b880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b888:	6013      	str	r3, [r2, #0]
 800b88a:	e133      	b.n	800baf4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	4413      	add	r3, r2
 800b894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	0151      	lsls	r1, r2, #5
 800b89e:	69fa      	ldr	r2, [r7, #28]
 800b8a0:	440a      	add	r2, r1
 800b8a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	791b      	ldrb	r3, [r3, #4]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d015      	beq.n	800b8e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 811b 	beq.w	800baf4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	f003 030f 	and.w	r3, r3, #15
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d4:	69f9      	ldr	r1, [r7, #28]
 800b8d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	634b      	str	r3, [r1, #52]	; 0x34
 800b8de:	e109      	b.n	800baf4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d110      	bne.n	800b912 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	0151      	lsls	r1, r2, #5
 800b902:	69fa      	ldr	r2, [r7, #28]
 800b904:	440a      	add	r2, r1
 800b906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b90a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b90e:	6013      	str	r3, [r2, #0]
 800b910:	e00f      	b.n	800b932 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	69ba      	ldr	r2, [r7, #24]
 800b922:	0151      	lsls	r1, r2, #5
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	440a      	add	r2, r1
 800b928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b92c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b930:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	6919      	ldr	r1, [r3, #16]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	b298      	uxth	r0, r3
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	4603      	mov	r3, r0
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 fade 	bl	800bf08 <USB_WritePacket>
 800b94c:	e0d2      	b.n	800baf4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	4413      	add	r3, r2
 800b956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	0151      	lsls	r1, r2, #5
 800b960:	69fa      	ldr	r2, [r7, #28]
 800b962:	440a      	add	r2, r1
 800b964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b968:	0cdb      	lsrs	r3, r3, #19
 800b96a:	04db      	lsls	r3, r3, #19
 800b96c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	015a      	lsls	r2, r3, #5
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	4413      	add	r3, r2
 800b976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	0151      	lsls	r1, r2, #5
 800b980:	69fa      	ldr	r2, [r7, #28]
 800b982:	440a      	add	r2, r1
 800b984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b98c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b990:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d126      	bne.n	800b9e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	015a      	lsls	r2, r3, #5
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a6:	691a      	ldr	r2, [r3, #16]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9b0:	69b9      	ldr	r1, [r7, #24]
 800b9b2:	0148      	lsls	r0, r1, #5
 800b9b4:	69f9      	ldr	r1, [r7, #28]
 800b9b6:	4401      	add	r1, r0
 800b9b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	69ba      	ldr	r2, [r7, #24]
 800b9d0:	0151      	lsls	r1, r2, #5
 800b9d2:	69fa      	ldr	r2, [r7, #28]
 800b9d4:	440a      	add	r2, r1
 800b9d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9de:	6113      	str	r3, [r2, #16]
 800b9e0:	e03a      	b.n	800ba58 <USB_EPStartXfer+0x3e4>
 800b9e2:	bf00      	nop
 800b9e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	699a      	ldr	r2, [r3, #24]
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	1e5a      	subs	r2, r3, #1
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	8afa      	ldrh	r2, [r7, #22]
 800ba04:	fb03 f202 	mul.w	r2, r3, r2
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	015a      	lsls	r2, r3, #5
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	4413      	add	r3, r2
 800ba14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba18:	691a      	ldr	r2, [r3, #16]
 800ba1a:	8afb      	ldrh	r3, [r7, #22]
 800ba1c:	04d9      	lsls	r1, r3, #19
 800ba1e:	4b38      	ldr	r3, [pc, #224]	; (800bb00 <USB_EPStartXfer+0x48c>)
 800ba20:	400b      	ands	r3, r1
 800ba22:	69b9      	ldr	r1, [r7, #24]
 800ba24:	0148      	lsls	r0, r1, #5
 800ba26:	69f9      	ldr	r1, [r7, #28]
 800ba28:	4401      	add	r1, r0
 800ba2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba3e:	691a      	ldr	r2, [r3, #16]
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba48:	69b9      	ldr	r1, [r7, #24]
 800ba4a:	0148      	lsls	r0, r1, #5
 800ba4c:	69f9      	ldr	r1, [r7, #28]
 800ba4e:	4401      	add	r1, r0
 800ba50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba54:	4313      	orrs	r3, r2
 800ba56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d10d      	bne.n	800ba7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d009      	beq.n	800ba7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6919      	ldr	r1, [r3, #16]
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba76:	460a      	mov	r2, r1
 800ba78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	791b      	ldrb	r3, [r3, #4]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d128      	bne.n	800bad4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d110      	bne.n	800bab4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	015a      	lsls	r2, r3, #5
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	0151      	lsls	r1, r2, #5
 800baa4:	69fa      	ldr	r2, [r7, #28]
 800baa6:	440a      	add	r2, r1
 800baa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	e00f      	b.n	800bad4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	4413      	add	r3, r2
 800babc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	0151      	lsls	r1, r2, #5
 800bac6:	69fa      	ldr	r2, [r7, #28]
 800bac8:	440a      	add	r2, r1
 800baca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bad2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	0151      	lsls	r1, r2, #5
 800bae6:	69fa      	ldr	r2, [r7, #28]
 800bae8:	440a      	add	r2, r1
 800baea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800baf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3720      	adds	r7, #32
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	1ff80000 	.word	0x1ff80000

0800bb04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	f040 80ce 	bne.w	800bcc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d132      	bne.n	800bb94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	0151      	lsls	r1, r2, #5
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	440a      	add	r2, r1
 800bb44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	0151      	lsls	r1, r2, #5
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	440a      	add	r2, r1
 800bb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	0151      	lsls	r1, r2, #5
 800bb84:	697a      	ldr	r2, [r7, #20]
 800bb86:	440a      	add	r2, r1
 800bb88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb8c:	0cdb      	lsrs	r3, r3, #19
 800bb8e:	04db      	lsls	r3, r3, #19
 800bb90:	6113      	str	r3, [r2, #16]
 800bb92:	e04e      	b.n	800bc32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	015a      	lsls	r2, r3, #5
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	0151      	lsls	r1, r2, #5
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	440a      	add	r2, r1
 800bbaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbae:	0cdb      	lsrs	r3, r3, #19
 800bbb0:	04db      	lsls	r3, r3, #19
 800bbb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	693a      	ldr	r2, [r7, #16]
 800bbc4:	0151      	lsls	r1, r2, #5
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	440a      	add	r2, r1
 800bbca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	699a      	ldr	r2, [r3, #24]
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d903      	bls.n	800bbec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	68da      	ldr	r2, [r3, #12]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	0151      	lsls	r1, r2, #5
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	440a      	add	r2, r1
 800bc02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc18:	691a      	ldr	r2, [r3, #16]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc22:	6939      	ldr	r1, [r7, #16]
 800bc24:	0148      	lsls	r0, r1, #5
 800bc26:	6979      	ldr	r1, [r7, #20]
 800bc28:	4401      	add	r1, r0
 800bc2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d11e      	bne.n	800bc76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d009      	beq.n	800bc54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	015a      	lsls	r2, r3, #5
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	4413      	add	r3, r2
 800bc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	0151      	lsls	r1, r2, #5
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	440a      	add	r2, r1
 800bc6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	e097      	b.n	800bda6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	015a      	lsls	r2, r3, #5
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	0151      	lsls	r1, r2, #5
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	440a      	add	r2, r1
 800bc8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 8083 	beq.w	800bda6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	f003 030f 	and.w	r3, r3, #15
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bcb6:	6979      	ldr	r1, [r7, #20]
 800bcb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	634b      	str	r3, [r1, #52]	; 0x34
 800bcc0:	e071      	b.n	800bda6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	015a      	lsls	r2, r3, #5
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	4413      	add	r3, r2
 800bcca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	0151      	lsls	r1, r2, #5
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	440a      	add	r2, r1
 800bcd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcdc:	0cdb      	lsrs	r3, r3, #19
 800bcde:	04db      	lsls	r3, r3, #19
 800bce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	0151      	lsls	r1, r2, #5
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	440a      	add	r2, r1
 800bcf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	699b      	ldr	r3, [r3, #24]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	68da      	ldr	r2, [r3, #12]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	0151      	lsls	r1, r2, #5
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	440a      	add	r2, r1
 800bd34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4a:	691a      	ldr	r2, [r3, #16]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd54:	6939      	ldr	r1, [r7, #16]
 800bd56:	0148      	lsls	r0, r1, #5
 800bd58:	6979      	ldr	r1, [r7, #20]
 800bd5a:	4401      	add	r1, r0
 800bd5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd60:	4313      	orrs	r3, r2
 800bd62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bd64:	79fb      	ldrb	r3, [r7, #7]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d10d      	bne.n	800bd86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d009      	beq.n	800bd86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	6919      	ldr	r1, [r3, #16]
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	460a      	mov	r2, r1
 800bd84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	0151      	lsls	r1, r2, #5
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	440a      	add	r2, r1
 800bd9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bda0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bda4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	371c      	adds	r7, #28
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	785b      	ldrb	r3, [r3, #1]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d14a      	bne.n	800be68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bde6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdea:	f040 8086 	bne.w	800befa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	015a      	lsls	r2, r3, #5
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	7812      	ldrb	r2, [r2, #0]
 800be02:	0151      	lsls	r1, r2, #5
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	440a      	add	r2, r1
 800be08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	015a      	lsls	r2, r3, #5
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	7812      	ldrb	r2, [r2, #0]
 800be26:	0151      	lsls	r1, r2, #5
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	440a      	add	r2, r1
 800be2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3301      	adds	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f242 7210 	movw	r2, #10000	; 0x2710
 800be42:	4293      	cmp	r3, r2
 800be44:	d902      	bls.n	800be4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	75fb      	strb	r3, [r7, #23]
          break;
 800be4a:	e056      	b.n	800befa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	015a      	lsls	r2, r3, #5
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	4413      	add	r3, r2
 800be56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be64:	d0e7      	beq.n	800be36 <USB_EPStopXfer+0x82>
 800be66:	e048      	b.n	800befa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	015a      	lsls	r2, r3, #5
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	4413      	add	r3, r2
 800be72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be80:	d13b      	bne.n	800befa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	7812      	ldrb	r2, [r2, #0]
 800be96:	0151      	lsls	r1, r2, #5
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	440a      	add	r2, r1
 800be9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bea4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	7812      	ldrb	r2, [r2, #0]
 800beba:	0151      	lsls	r1, r2, #5
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	440a      	add	r2, r1
 800bec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bec8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3301      	adds	r3, #1
 800bece:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f242 7210 	movw	r2, #10000	; 0x2710
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d902      	bls.n	800bee0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	75fb      	strb	r3, [r7, #23]
          break;
 800bede:	e00c      	b.n	800befa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bef8:	d0e7      	beq.n	800beca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800befa:	7dfb      	ldrb	r3, [r7, #23]
}
 800befc:	4618      	mov	r0, r3
 800befe:	371c      	adds	r7, #28
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b089      	sub	sp, #36	; 0x24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4611      	mov	r1, r2
 800bf14:	461a      	mov	r2, r3
 800bf16:	460b      	mov	r3, r1
 800bf18:	71fb      	strb	r3, [r7, #7]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bf26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d123      	bne.n	800bf76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bf2e:	88bb      	ldrh	r3, [r7, #4]
 800bf30:	3303      	adds	r3, #3
 800bf32:	089b      	lsrs	r3, r3, #2
 800bf34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bf36:	2300      	movs	r3, #0
 800bf38:	61bb      	str	r3, [r7, #24]
 800bf3a:	e018      	b.n	800bf6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf3c:	79fb      	ldrb	r3, [r7, #7]
 800bf3e:	031a      	lsls	r2, r3, #12
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	4413      	add	r3, r2
 800bf44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf48:	461a      	mov	r2, r3
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	3301      	adds	r3, #1
 800bf54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	3301      	adds	r3, #1
 800bf66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	61bb      	str	r3, [r7, #24]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d3e2      	bcc.n	800bf3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3724      	adds	r7, #36	; 0x24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b08b      	sub	sp, #44	; 0x2c
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf9a:	88fb      	ldrh	r3, [r7, #6]
 800bf9c:	089b      	lsrs	r3, r3, #2
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	f003 0303 	and.w	r3, r3, #3
 800bfa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bfaa:	2300      	movs	r3, #0
 800bfac:	623b      	str	r3, [r7, #32]
 800bfae:	e014      	b.n	800bfda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfba:	601a      	str	r2, [r3, #0]
    pDest++;
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	3301      	adds	r3, #1
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bfd4:	6a3b      	ldr	r3, [r7, #32]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	623b      	str	r3, [r7, #32]
 800bfda:	6a3a      	ldr	r2, [r7, #32]
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d3e6      	bcc.n	800bfb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bfe2:	8bfb      	ldrh	r3, [r7, #30]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01e      	beq.n	800c026 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bff2:	461a      	mov	r2, r3
 800bff4:	f107 0310 	add.w	r3, r7, #16
 800bff8:	6812      	ldr	r2, [r2, #0]
 800bffa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bffc:	693a      	ldr	r2, [r7, #16]
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	b2db      	uxtb	r3, r3
 800c002:	00db      	lsls	r3, r3, #3
 800c004:	fa22 f303 	lsr.w	r3, r2, r3
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	701a      	strb	r2, [r3, #0]
      i++;
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	3301      	adds	r3, #1
 800c012:	623b      	str	r3, [r7, #32]
      pDest++;
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	3301      	adds	r3, #1
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c01a:	8bfb      	ldrh	r3, [r7, #30]
 800c01c:	3b01      	subs	r3, #1
 800c01e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c020:	8bfb      	ldrh	r3, [r7, #30]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1ea      	bne.n	800bffc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c028:	4618      	mov	r0, r3
 800c02a:	372c      	adds	r7, #44	; 0x2c
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	785b      	ldrb	r3, [r3, #1]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d12c      	bne.n	800c0aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	015a      	lsls	r2, r3, #5
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4413      	add	r3, r2
 800c058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	db12      	blt.n	800c088 <USB_EPSetStall+0x54>
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00f      	beq.n	800c088 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	0151      	lsls	r1, r2, #5
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	440a      	add	r2, r1
 800c07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c082:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c086:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	015a      	lsls	r2, r3, #5
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4413      	add	r3, r2
 800c090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	0151      	lsls	r1, r2, #5
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	440a      	add	r2, r1
 800c09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0a6:	6013      	str	r3, [r2, #0]
 800c0a8:	e02b      	b.n	800c102 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	015a      	lsls	r2, r3, #5
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	db12      	blt.n	800c0e2 <USB_EPSetStall+0xae>
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00f      	beq.n	800c0e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	015a      	lsls	r2, r3, #5
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	0151      	lsls	r1, r2, #5
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	440a      	add	r2, r1
 800c0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c0e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	0151      	lsls	r1, r2, #5
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	440a      	add	r2, r1
 800c0f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c100:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	785b      	ldrb	r3, [r3, #1]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d128      	bne.n	800c17e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	0151      	lsls	r1, r2, #5
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	440a      	add	r2, r1
 800c142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c14a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	791b      	ldrb	r3, [r3, #4]
 800c150:	2b03      	cmp	r3, #3
 800c152:	d003      	beq.n	800c15c <USB_EPClearStall+0x4c>
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	791b      	ldrb	r3, [r3, #4]
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d138      	bne.n	800c1ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	015a      	lsls	r2, r3, #5
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4413      	add	r3, r2
 800c164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	0151      	lsls	r1, r2, #5
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	440a      	add	r2, r1
 800c172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	e027      	b.n	800c1ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	015a      	lsls	r2, r3, #5
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	4413      	add	r3, r2
 800c186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	0151      	lsls	r1, r2, #5
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	440a      	add	r2, r1
 800c194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c198:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c19c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	791b      	ldrb	r3, [r3, #4]
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	d003      	beq.n	800c1ae <USB_EPClearStall+0x9e>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	791b      	ldrb	r3, [r3, #4]
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d10f      	bne.n	800c1ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	0151      	lsls	r1, r2, #5
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	440a      	add	r2, r1
 800c1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3714      	adds	r7, #20
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c1fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	78fb      	ldrb	r3, [r7, #3]
 800c20a:	011b      	lsls	r3, r3, #4
 800c20c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c210:	68f9      	ldr	r1, [r7, #12]
 800c212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c216:	4313      	orrs	r3, r2
 800c218:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c256:	f023 0302 	bic.w	r3, r3, #2
 800c25a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b085      	sub	sp, #20
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c284:	f023 0303 	bic.w	r3, r3, #3
 800c288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c298:	f043 0302 	orr.w	r3, r3, #2
 800c29c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	695b      	ldr	r3, [r3, #20]
 800c2b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3714      	adds	r7, #20
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b085      	sub	sp, #20
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ee:	69db      	ldr	r3, [r3, #28]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	0c1b      	lsrs	r3, r3, #16
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c306:	b480      	push	{r7}
 800c308:	b085      	sub	sp, #20
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c322:	69db      	ldr	r3, [r3, #28]
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	4013      	ands	r3, r2
 800c328:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	b29b      	uxth	r3, r3
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3714      	adds	r7, #20
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b085      	sub	sp, #20
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	460b      	mov	r3, r1
 800c344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c34a:	78fb      	ldrb	r3, [r7, #3]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4413      	add	r3, r2
 800c352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	4013      	ands	r3, r2
 800c366:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c368:	68bb      	ldr	r3, [r7, #8]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c376:	b480      	push	{r7}
 800c378:	b087      	sub	sp, #28
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	460b      	mov	r3, r1
 800c380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c398:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c39a:	78fb      	ldrb	r3, [r7, #3]
 800c39c:	f003 030f 	and.w	r3, r3, #15
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a6:	01db      	lsls	r3, r3, #7
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	371c      	adds	r7, #28
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b083      	sub	sp, #12
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	f003 0301 	and.w	r3, r3, #1
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c408:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c40c:	f023 0307 	bic.w	r3, r3, #7
 800c410:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c434:	b480      	push	{r7}
 800c436:	b087      	sub	sp, #28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	460b      	mov	r3, r1
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	333c      	adds	r3, #60	; 0x3c
 800c44a:	3304      	adds	r3, #4
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	4a26      	ldr	r2, [pc, #152]	; (800c4ec <USB_EP0_OutStart+0xb8>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d90a      	bls.n	800c46e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c468:	d101      	bne.n	800c46e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	e037      	b.n	800c4de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c474:	461a      	mov	r2, r3
 800c476:	2300      	movs	r3, #0
 800c478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c48c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c49c:	f043 0318 	orr.w	r3, r3, #24
 800c4a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c4b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d10f      	bne.n	800c4dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c4da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4dc:	2300      	movs	r3, #0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	371c      	adds	r7, #28
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	4f54300a 	.word	0x4f54300a

0800c4f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	3301      	adds	r3, #1
 800c500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	4a13      	ldr	r2, [pc, #76]	; (800c554 <USB_CoreReset+0x64>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d901      	bls.n	800c50e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e01b      	b.n	800c546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	daf2      	bge.n	800c4fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	f043 0201 	orr.w	r2, r3, #1
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	3301      	adds	r3, #1
 800c52a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4a09      	ldr	r2, [pc, #36]	; (800c554 <USB_CoreReset+0x64>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d901      	bls.n	800c538 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c534:	2303      	movs	r3, #3
 800c536:	e006      	b.n	800c546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b01      	cmp	r3, #1
 800c542:	d0f0      	beq.n	800c526 <USB_CoreReset+0x36>

  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	00030d40 	.word	0x00030d40

0800c558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	460b      	mov	r3, r1
 800c562:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c564:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c568:	f002 fc22 	bl	800edb0 <USBD_static_malloc>
 800c56c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d109      	bne.n	800c588 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	32b0      	adds	r2, #176	; 0xb0
 800c57e:	2100      	movs	r1, #0
 800c580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c584:	2302      	movs	r3, #2
 800c586:	e0d4      	b.n	800c732 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c588:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c58c:	2100      	movs	r1, #0
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f002 ffb0 	bl	800f4f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	32b0      	adds	r2, #176	; 0xb0
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	32b0      	adds	r2, #176	; 0xb0
 800c5ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7c1b      	ldrb	r3, [r3, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d138      	bne.n	800c632 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c5c0:	4b5e      	ldr	r3, [pc, #376]	; (800c73c <USBD_CDC_Init+0x1e4>)
 800c5c2:	7819      	ldrb	r1, [r3, #0]
 800c5c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f002 facd 	bl	800eb6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c5d0:	4b5a      	ldr	r3, [pc, #360]	; (800c73c <USBD_CDC_Init+0x1e4>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	f003 020f 	and.w	r2, r3, #15
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	3324      	adds	r3, #36	; 0x24
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c5ea:	4b55      	ldr	r3, [pc, #340]	; (800c740 <USBD_CDC_Init+0x1e8>)
 800c5ec:	7819      	ldrb	r1, [r3, #0]
 800c5ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f002 fab8 	bl	800eb6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c5fa:	4b51      	ldr	r3, [pc, #324]	; (800c740 <USBD_CDC_Init+0x1e8>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	f003 020f 	and.w	r2, r3, #15
 800c602:	6879      	ldr	r1, [r7, #4]
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	440b      	add	r3, r1
 800c60e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c612:	2201      	movs	r2, #1
 800c614:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c616:	4b4b      	ldr	r3, [pc, #300]	; (800c744 <USBD_CDC_Init+0x1ec>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	f003 020f 	and.w	r2, r3, #15
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	440b      	add	r3, r1
 800c62a:	3326      	adds	r3, #38	; 0x26
 800c62c:	2210      	movs	r2, #16
 800c62e:	801a      	strh	r2, [r3, #0]
 800c630:	e035      	b.n	800c69e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c632:	4b42      	ldr	r3, [pc, #264]	; (800c73c <USBD_CDC_Init+0x1e4>)
 800c634:	7819      	ldrb	r1, [r3, #0]
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	2202      	movs	r2, #2
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f002 fa95 	bl	800eb6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c640:	4b3e      	ldr	r3, [pc, #248]	; (800c73c <USBD_CDC_Init+0x1e4>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	f003 020f 	and.w	r2, r3, #15
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	4613      	mov	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	440b      	add	r3, r1
 800c654:	3324      	adds	r3, #36	; 0x24
 800c656:	2201      	movs	r2, #1
 800c658:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c65a:	4b39      	ldr	r3, [pc, #228]	; (800c740 <USBD_CDC_Init+0x1e8>)
 800c65c:	7819      	ldrb	r1, [r3, #0]
 800c65e:	2340      	movs	r3, #64	; 0x40
 800c660:	2202      	movs	r2, #2
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f002 fa81 	bl	800eb6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c668:	4b35      	ldr	r3, [pc, #212]	; (800c740 <USBD_CDC_Init+0x1e8>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	f003 020f 	and.w	r2, r3, #15
 800c670:	6879      	ldr	r1, [r7, #4]
 800c672:	4613      	mov	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4413      	add	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	440b      	add	r3, r1
 800c67c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c680:	2201      	movs	r2, #1
 800c682:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c684:	4b2f      	ldr	r3, [pc, #188]	; (800c744 <USBD_CDC_Init+0x1ec>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	f003 020f 	and.w	r2, r3, #15
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	3326      	adds	r3, #38	; 0x26
 800c69a:	2210      	movs	r2, #16
 800c69c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c69e:	4b29      	ldr	r3, [pc, #164]	; (800c744 <USBD_CDC_Init+0x1ec>)
 800c6a0:	7819      	ldrb	r1, [r3, #0]
 800c6a2:	2308      	movs	r3, #8
 800c6a4:	2203      	movs	r2, #3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f002 fa5f 	bl	800eb6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c6ac:	4b25      	ldr	r3, [pc, #148]	; (800c744 <USBD_CDC_Init+0x1ec>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	f003 020f 	and.w	r2, r3, #15
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	440b      	add	r3, r1
 800c6c0:	3324      	adds	r3, #36	; 0x24
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	33b0      	adds	r3, #176	; 0xb0
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	e018      	b.n	800c732 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7c1b      	ldrb	r3, [r3, #16]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10a      	bne.n	800c71e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c708:	4b0d      	ldr	r3, [pc, #52]	; (800c740 <USBD_CDC_Init+0x1e8>)
 800c70a:	7819      	ldrb	r1, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c712:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f002 fb16 	bl	800ed48 <USBD_LL_PrepareReceive>
 800c71c:	e008      	b.n	800c730 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c71e:	4b08      	ldr	r3, [pc, #32]	; (800c740 <USBD_CDC_Init+0x1e8>)
 800c720:	7819      	ldrb	r1, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c728:	2340      	movs	r3, #64	; 0x40
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f002 fb0c 	bl	800ed48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	200000a3 	.word	0x200000a3
 800c740:	200000a4 	.word	0x200000a4
 800c744:	200000a5 	.word	0x200000a5

0800c748 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c754:	4b3a      	ldr	r3, [pc, #232]	; (800c840 <USBD_CDC_DeInit+0xf8>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f002 fa2b 	bl	800ebb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c760:	4b37      	ldr	r3, [pc, #220]	; (800c840 <USBD_CDC_DeInit+0xf8>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	f003 020f 	and.w	r2, r3, #15
 800c768:	6879      	ldr	r1, [r7, #4]
 800c76a:	4613      	mov	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4413      	add	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	440b      	add	r3, r1
 800c774:	3324      	adds	r3, #36	; 0x24
 800c776:	2200      	movs	r2, #0
 800c778:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c77a:	4b32      	ldr	r3, [pc, #200]	; (800c844 <USBD_CDC_DeInit+0xfc>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f002 fa18 	bl	800ebb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c786:	4b2f      	ldr	r3, [pc, #188]	; (800c844 <USBD_CDC_DeInit+0xfc>)
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	f003 020f 	and.w	r2, r3, #15
 800c78e:	6879      	ldr	r1, [r7, #4]
 800c790:	4613      	mov	r3, r2
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	440b      	add	r3, r1
 800c79a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c79e:	2200      	movs	r2, #0
 800c7a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c7a2:	4b29      	ldr	r3, [pc, #164]	; (800c848 <USBD_CDC_DeInit+0x100>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f002 fa04 	bl	800ebb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c7ae:	4b26      	ldr	r3, [pc, #152]	; (800c848 <USBD_CDC_DeInit+0x100>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 020f 	and.w	r2, r3, #15
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	3324      	adds	r3, #36	; 0x24
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c7c8:	4b1f      	ldr	r3, [pc, #124]	; (800c848 <USBD_CDC_DeInit+0x100>)
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	f003 020f 	and.w	r2, r3, #15
 800c7d0:	6879      	ldr	r1, [r7, #4]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	440b      	add	r3, r1
 800c7dc:	3326      	adds	r3, #38	; 0x26
 800c7de:	2200      	movs	r2, #0
 800c7e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	32b0      	adds	r2, #176	; 0xb0
 800c7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d01f      	beq.n	800c834 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	33b0      	adds	r3, #176	; 0xb0
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4413      	add	r3, r2
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	32b0      	adds	r2, #176	; 0xb0
 800c812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c816:	4618      	mov	r0, r3
 800c818:	f002 fad8 	bl	800edcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	32b0      	adds	r2, #176	; 0xb0
 800c826:	2100      	movs	r1, #0
 800c828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	200000a3 	.word	0x200000a3
 800c844:	200000a4 	.word	0x200000a4
 800c848:	200000a5 	.word	0x200000a5

0800c84c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	32b0      	adds	r2, #176	; 0xb0
 800c860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c864:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c866:	2300      	movs	r3, #0
 800c868:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c878:	2303      	movs	r3, #3
 800c87a:	e0bf      	b.n	800c9fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c884:	2b00      	cmp	r3, #0
 800c886:	d050      	beq.n	800c92a <USBD_CDC_Setup+0xde>
 800c888:	2b20      	cmp	r3, #32
 800c88a:	f040 80af 	bne.w	800c9ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	88db      	ldrh	r3, [r3, #6]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d03a      	beq.n	800c90c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	b25b      	sxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	da1b      	bge.n	800c8d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	33b0      	adds	r3, #176	; 0xb0
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c8b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	88d2      	ldrh	r2, [r2, #6]
 800c8bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	88db      	ldrh	r3, [r3, #6]
 800c8c2:	2b07      	cmp	r3, #7
 800c8c4:	bf28      	it	cs
 800c8c6:	2307      	movcs	r3, #7
 800c8c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	89fa      	ldrh	r2, [r7, #14]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f001 fd43 	bl	800e35c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c8d6:	e090      	b.n	800c9fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	785a      	ldrb	r2, [r3, #1]
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	88db      	ldrh	r3, [r3, #6]
 800c8e6:	2b3f      	cmp	r3, #63	; 0x3f
 800c8e8:	d803      	bhi.n	800c8f2 <USBD_CDC_Setup+0xa6>
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	88db      	ldrh	r3, [r3, #6]
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	e000      	b.n	800c8f4 <USBD_CDC_Setup+0xa8>
 800c8f2:	2240      	movs	r2, #64	; 0x40
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c8fa:	6939      	ldr	r1, [r7, #16]
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c902:	461a      	mov	r2, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 fd55 	bl	800e3b4 <USBD_CtlPrepareRx>
      break;
 800c90a:	e076      	b.n	800c9fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	33b0      	adds	r3, #176	; 0xb0
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4413      	add	r3, r2
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	7850      	ldrb	r0, [r2, #1]
 800c922:	2200      	movs	r2, #0
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	4798      	blx	r3
      break;
 800c928:	e067      	b.n	800c9fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b0b      	cmp	r3, #11
 800c930:	d851      	bhi.n	800c9d6 <USBD_CDC_Setup+0x18a>
 800c932:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <USBD_CDC_Setup+0xec>)
 800c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c938:	0800c969 	.word	0x0800c969
 800c93c:	0800c9e5 	.word	0x0800c9e5
 800c940:	0800c9d7 	.word	0x0800c9d7
 800c944:	0800c9d7 	.word	0x0800c9d7
 800c948:	0800c9d7 	.word	0x0800c9d7
 800c94c:	0800c9d7 	.word	0x0800c9d7
 800c950:	0800c9d7 	.word	0x0800c9d7
 800c954:	0800c9d7 	.word	0x0800c9d7
 800c958:	0800c9d7 	.word	0x0800c9d7
 800c95c:	0800c9d7 	.word	0x0800c9d7
 800c960:	0800c993 	.word	0x0800c993
 800c964:	0800c9bd 	.word	0x0800c9bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2b03      	cmp	r3, #3
 800c972:	d107      	bne.n	800c984 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c974:	f107 030a 	add.w	r3, r7, #10
 800c978:	2202      	movs	r2, #2
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f001 fced 	bl	800e35c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c982:	e032      	b.n	800c9ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f001 fc77 	bl	800e27a <USBD_CtlError>
            ret = USBD_FAIL;
 800c98c:	2303      	movs	r3, #3
 800c98e:	75fb      	strb	r3, [r7, #23]
          break;
 800c990:	e02b      	b.n	800c9ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b03      	cmp	r3, #3
 800c99c:	d107      	bne.n	800c9ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c99e:	f107 030d 	add.w	r3, r7, #13
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f001 fcd8 	bl	800e35c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9ac:	e01d      	b.n	800c9ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f001 fc62 	bl	800e27a <USBD_CtlError>
            ret = USBD_FAIL;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	75fb      	strb	r3, [r7, #23]
          break;
 800c9ba:	e016      	b.n	800c9ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d00f      	beq.n	800c9e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f001 fc55 	bl	800e27a <USBD_CtlError>
            ret = USBD_FAIL;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c9d4:	e008      	b.n	800c9e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f001 fc4e 	bl	800e27a <USBD_CtlError>
          ret = USBD_FAIL;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c9e2:	e002      	b.n	800c9ea <USBD_CDC_Setup+0x19e>
          break;
 800c9e4:	bf00      	nop
 800c9e6:	e008      	b.n	800c9fa <USBD_CDC_Setup+0x1ae>
          break;
 800c9e8:	bf00      	nop
      }
      break;
 800c9ea:	e006      	b.n	800c9fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c9ec:	6839      	ldr	r1, [r7, #0]
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f001 fc43 	bl	800e27a <USBD_CtlError>
      ret = USBD_FAIL;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c9f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	32b0      	adds	r2, #176	; 0xb0
 800ca22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d101      	bne.n	800ca2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	e065      	b.n	800cafa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	32b0      	adds	r2, #176	; 0xb0
 800ca38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca3e:	78fb      	ldrb	r3, [r7, #3]
 800ca40:	f003 020f 	and.w	r2, r3, #15
 800ca44:	6879      	ldr	r1, [r7, #4]
 800ca46:	4613      	mov	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	440b      	add	r3, r1
 800ca50:	3318      	adds	r3, #24
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d02f      	beq.n	800cab8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ca58:	78fb      	ldrb	r3, [r7, #3]
 800ca5a:	f003 020f 	and.w	r2, r3, #15
 800ca5e:	6879      	ldr	r1, [r7, #4]
 800ca60:	4613      	mov	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	440b      	add	r3, r1
 800ca6a:	3318      	adds	r3, #24
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	78fb      	ldrb	r3, [r7, #3]
 800ca70:	f003 010f 	and.w	r1, r3, #15
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	460b      	mov	r3, r1
 800ca78:	00db      	lsls	r3, r3, #3
 800ca7a:	440b      	add	r3, r1
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4403      	add	r3, r0
 800ca80:	3348      	adds	r3, #72	; 0x48
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	fbb2 f1f3 	udiv	r1, r2, r3
 800ca88:	fb01 f303 	mul.w	r3, r1, r3
 800ca8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d112      	bne.n	800cab8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ca92:	78fb      	ldrb	r3, [r7, #3]
 800ca94:	f003 020f 	and.w	r2, r3, #15
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	440b      	add	r3, r1
 800caa4:	3318      	adds	r3, #24
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800caaa:	78f9      	ldrb	r1, [r7, #3]
 800caac:	2300      	movs	r3, #0
 800caae:	2200      	movs	r2, #0
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f002 f928 	bl	800ed06 <USBD_LL_Transmit>
 800cab6:	e01f      	b.n	800caf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2200      	movs	r2, #0
 800cabc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	33b0      	adds	r3, #176	; 0xb0
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d010      	beq.n	800caf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	33b0      	adds	r3, #176	; 0xb0
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800caf4:	78fa      	ldrb	r2, [r7, #3]
 800caf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	32b0      	adds	r2, #176	; 0xb0
 800cb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	32b0      	adds	r2, #176	; 0xb0
 800cb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cb30:	2303      	movs	r3, #3
 800cb32:	e01a      	b.n	800cb6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cb34:	78fb      	ldrb	r3, [r7, #3]
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f002 f926 	bl	800ed8a <USBD_LL_GetRxDataSize>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	33b0      	adds	r3, #176	; 0xb0
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cb64:	4611      	mov	r1, r2
 800cb66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b084      	sub	sp, #16
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	32b0      	adds	r2, #176	; 0xb0
 800cb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb90:	2303      	movs	r3, #3
 800cb92:	e025      	b.n	800cbe0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	33b0      	adds	r3, #176	; 0xb0
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d01a      	beq.n	800cbde <USBD_CDC_EP0_RxReady+0x6c>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cbae:	2bff      	cmp	r3, #255	; 0xff
 800cbb0:	d015      	beq.n	800cbde <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	33b0      	adds	r3, #176	; 0xb0
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cbca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cbd2:	b292      	uxth	r2, r2
 800cbd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	22ff      	movs	r2, #255	; 0xff
 800cbda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cbf0:	2182      	movs	r1, #130	; 0x82
 800cbf2:	4818      	ldr	r0, [pc, #96]	; (800cc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbf4:	f000 fd09 	bl	800d60a <USBD_GetEpDesc>
 800cbf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	4815      	ldr	r0, [pc, #84]	; (800cc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbfe:	f000 fd04 	bl	800d60a <USBD_GetEpDesc>
 800cc02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc04:	2181      	movs	r1, #129	; 0x81
 800cc06:	4813      	ldr	r0, [pc, #76]	; (800cc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc08:	f000 fcff 	bl	800d60a <USBD_GetEpDesc>
 800cc0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	2210      	movs	r2, #16
 800cc18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d006      	beq.n	800cc2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc28:	711a      	strb	r2, [r3, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d006      	beq.n	800cc42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc3c:	711a      	strb	r2, [r3, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2243      	movs	r2, #67	; 0x43
 800cc46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc48:	4b02      	ldr	r3, [pc, #8]	; (800cc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20000060 	.word	0x20000060

0800cc58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc60:	2182      	movs	r1, #130	; 0x82
 800cc62:	4818      	ldr	r0, [pc, #96]	; (800ccc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc64:	f000 fcd1 	bl	800d60a <USBD_GetEpDesc>
 800cc68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	4815      	ldr	r0, [pc, #84]	; (800ccc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc6e:	f000 fccc 	bl	800d60a <USBD_GetEpDesc>
 800cc72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc74:	2181      	movs	r1, #129	; 0x81
 800cc76:	4813      	ldr	r0, [pc, #76]	; (800ccc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc78:	f000 fcc7 	bl	800d60a <USBD_GetEpDesc>
 800cc7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	2210      	movs	r2, #16
 800cc88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d006      	beq.n	800cc9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	2200      	movs	r2, #0
 800cc94:	711a      	strb	r2, [r3, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f042 0202 	orr.w	r2, r2, #2
 800cc9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d006      	beq.n	800ccb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2200      	movs	r2, #0
 800cca8:	711a      	strb	r2, [r3, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f042 0202 	orr.w	r2, r2, #2
 800ccb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2243      	movs	r2, #67	; 0x43
 800ccb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ccb8:	4b02      	ldr	r3, [pc, #8]	; (800ccc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000060 	.word	0x20000060

0800ccc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ccd0:	2182      	movs	r1, #130	; 0x82
 800ccd2:	4818      	ldr	r0, [pc, #96]	; (800cd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ccd4:	f000 fc99 	bl	800d60a <USBD_GetEpDesc>
 800ccd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ccda:	2101      	movs	r1, #1
 800ccdc:	4815      	ldr	r0, [pc, #84]	; (800cd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ccde:	f000 fc94 	bl	800d60a <USBD_GetEpDesc>
 800cce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cce4:	2181      	movs	r1, #129	; 0x81
 800cce6:	4813      	ldr	r0, [pc, #76]	; (800cd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cce8:	f000 fc8f 	bl	800d60a <USBD_GetEpDesc>
 800ccec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d002      	beq.n	800ccfa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2210      	movs	r2, #16
 800ccf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d006      	beq.n	800cd0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd08:	711a      	strb	r2, [r3, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d006      	beq.n	800cd22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd1c:	711a      	strb	r2, [r3, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2243      	movs	r2, #67	; 0x43
 800cd26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cd28:	4b02      	ldr	r3, [pc, #8]	; (800cd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3718      	adds	r7, #24
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	20000060 	.word	0x20000060

0800cd38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	220a      	movs	r2, #10
 800cd44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd46:	4b03      	ldr	r3, [pc, #12]	; (800cd54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr
 800cd54:	2000001c 	.word	0x2000001c

0800cd58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e009      	b.n	800cd80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	33b0      	adds	r3, #176	; 0xb0
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b087      	sub	sp, #28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	32b0      	adds	r2, #176	; 0xb0
 800cda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e008      	b.n	800cdc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	371c      	adds	r7, #28
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	32b0      	adds	r2, #176	; 0xb0
 800cde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e004      	b.n	800cdfe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
	...

0800ce0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	32b0      	adds	r2, #176	; 0xb0
 800ce1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	32b0      	adds	r2, #176	; 0xb0
 800ce2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e018      	b.n	800ce6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7c1b      	ldrb	r3, [r3, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce42:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <USBD_CDC_ReceivePacket+0x68>)
 800ce44:	7819      	ldrb	r1, [r3, #0]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 ff79 	bl	800ed48 <USBD_LL_PrepareReceive>
 800ce56:	e008      	b.n	800ce6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce58:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <USBD_CDC_ReceivePacket+0x68>)
 800ce5a:	7819      	ldrb	r1, [r3, #0]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce62:	2340      	movs	r3, #64	; 0x40
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 ff6f 	bl	800ed48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	200000a4 	.word	0x200000a4

0800ce78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e01f      	b.n	800ced0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	79fa      	ldrb	r2, [r7, #7]
 800cec2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f001 fde9 	bl	800ea9c <USBD_LL_Init>
 800ceca:	4603      	mov	r3, r0
 800cecc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cece:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e025      	b.n	800cf3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	32ae      	adds	r2, #174	; 0xae
 800cf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00f      	beq.n	800cf2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	32ae      	adds	r2, #174	; 0xae
 800cf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	f107 020e 	add.w	r2, r7, #14
 800cf20:	4610      	mov	r0, r2
 800cf22:	4798      	blx	r3
 800cf24:	4602      	mov	r2, r0
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f001 fdf1 	bl	800eb34 <USBD_LL_Start>
 800cf52:	4603      	mov	r3, r0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d009      	beq.n	800cfa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	4611      	mov	r1, r2
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	4798      	blx	r3
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	4798      	blx	r3
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f001 f908 	bl	800e206 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d004:	461a      	mov	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d012:	f003 031f 	and.w	r3, r3, #31
 800d016:	2b02      	cmp	r3, #2
 800d018:	d01a      	beq.n	800d050 <USBD_LL_SetupStage+0x72>
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d822      	bhi.n	800d064 <USBD_LL_SetupStage+0x86>
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <USBD_LL_SetupStage+0x4a>
 800d022:	2b01      	cmp	r3, #1
 800d024:	d00a      	beq.n	800d03c <USBD_LL_SetupStage+0x5e>
 800d026:	e01d      	b.n	800d064 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fb5f 	bl	800d6f4 <USBD_StdDevReq>
 800d036:	4603      	mov	r3, r0
 800d038:	73fb      	strb	r3, [r7, #15]
      break;
 800d03a:	e020      	b.n	800d07e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 fbc7 	bl	800d7d8 <USBD_StdItfReq>
 800d04a:	4603      	mov	r3, r0
 800d04c:	73fb      	strb	r3, [r7, #15]
      break;
 800d04e:	e016      	b.n	800d07e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fc29 	bl	800d8b0 <USBD_StdEPReq>
 800d05e:	4603      	mov	r3, r0
 800d060:	73fb      	strb	r3, [r7, #15]
      break;
 800d062:	e00c      	b.n	800d07e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d06a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 fdbe 	bl	800ebf4 <USBD_LL_StallEP>
 800d078:	4603      	mov	r3, r0
 800d07a:	73fb      	strb	r3, [r7, #15]
      break;
 800d07c:	bf00      	nop
  }

  return ret;
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	460b      	mov	r3, r1
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d09a:	7afb      	ldrb	r3, [r7, #11]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d16e      	bne.n	800d17e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d0a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	f040 8098 	bne.w	800d1e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d913      	bls.n	800d0e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	1ad2      	subs	r2, r2, r3
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	bf28      	it	cs
 800d0da:	4613      	movcs	r3, r2
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f001 f984 	bl	800e3ee <USBD_CtlContinueRx>
 800d0e6:	e07d      	b.n	800d1e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d0ee:	f003 031f 	and.w	r3, r3, #31
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d014      	beq.n	800d120 <USBD_LL_DataOutStage+0x98>
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d81d      	bhi.n	800d136 <USBD_LL_DataOutStage+0xae>
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <USBD_LL_DataOutStage+0x7c>
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d003      	beq.n	800d10a <USBD_LL_DataOutStage+0x82>
 800d102:	e018      	b.n	800d136 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d104:	2300      	movs	r3, #0
 800d106:	75bb      	strb	r3, [r7, #22]
            break;
 800d108:	e018      	b.n	800d13c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d110:	b2db      	uxtb	r3, r3
 800d112:	4619      	mov	r1, r3
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 fa5e 	bl	800d5d6 <USBD_CoreFindIF>
 800d11a:	4603      	mov	r3, r0
 800d11c:	75bb      	strb	r3, [r7, #22]
            break;
 800d11e:	e00d      	b.n	800d13c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d126:	b2db      	uxtb	r3, r3
 800d128:	4619      	mov	r1, r3
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f000 fa60 	bl	800d5f0 <USBD_CoreFindEP>
 800d130:	4603      	mov	r3, r0
 800d132:	75bb      	strb	r3, [r7, #22]
            break;
 800d134:	e002      	b.n	800d13c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d136:	2300      	movs	r3, #0
 800d138:	75bb      	strb	r3, [r7, #22]
            break;
 800d13a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d13c:	7dbb      	ldrb	r3, [r7, #22]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d119      	bne.n	800d176 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b03      	cmp	r3, #3
 800d14c:	d113      	bne.n	800d176 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d14e:	7dba      	ldrb	r2, [r7, #22]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	32ae      	adds	r2, #174	; 0xae
 800d154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00b      	beq.n	800d176 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d15e:	7dba      	ldrb	r2, [r7, #22]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d166:	7dba      	ldrb	r2, [r7, #22]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	32ae      	adds	r2, #174	; 0xae
 800d16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f001 f94a 	bl	800e410 <USBD_CtlSendStatus>
 800d17c:	e032      	b.n	800d1e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d184:	b2db      	uxtb	r3, r3
 800d186:	4619      	mov	r1, r3
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 fa31 	bl	800d5f0 <USBD_CoreFindEP>
 800d18e:	4603      	mov	r3, r0
 800d190:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d192:	7dbb      	ldrb	r3, [r7, #22]
 800d194:	2bff      	cmp	r3, #255	; 0xff
 800d196:	d025      	beq.n	800d1e4 <USBD_LL_DataOutStage+0x15c>
 800d198:	7dbb      	ldrb	r3, [r7, #22]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d122      	bne.n	800d1e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b03      	cmp	r3, #3
 800d1a8:	d117      	bne.n	800d1da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d1aa:	7dba      	ldrb	r2, [r7, #22]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	32ae      	adds	r2, #174	; 0xae
 800d1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b4:	699b      	ldr	r3, [r3, #24]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00f      	beq.n	800d1da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d1ba:	7dba      	ldrb	r2, [r7, #22]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d1c2:	7dba      	ldrb	r2, [r7, #22]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	32ae      	adds	r2, #174	; 0xae
 800d1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	7afa      	ldrb	r2, [r7, #11]
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	4798      	blx	r3
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d1da:	7dfb      	ldrb	r3, [r7, #23]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	e000      	b.n	800d1e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	607a      	str	r2, [r7, #4]
 800d1fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d1fc:	7afb      	ldrb	r3, [r7, #11]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d16f      	bne.n	800d2e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3314      	adds	r3, #20
 800d206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d15a      	bne.n	800d2c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	689a      	ldr	r2, [r3, #8]
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d914      	bls.n	800d248 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	689a      	ldr	r2, [r3, #8]
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	1ad2      	subs	r2, r2, r3
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	461a      	mov	r2, r3
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f001 f8ac 	bl	800e392 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d23a:	2300      	movs	r3, #0
 800d23c:	2200      	movs	r2, #0
 800d23e:	2100      	movs	r1, #0
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f001 fd81 	bl	800ed48 <USBD_LL_PrepareReceive>
 800d246:	e03f      	b.n	800d2c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	68da      	ldr	r2, [r3, #12]
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	429a      	cmp	r2, r3
 800d252:	d11c      	bne.n	800d28e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d316      	bcc.n	800d28e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	685a      	ldr	r2, [r3, #4]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d20f      	bcs.n	800d28e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d26e:	2200      	movs	r2, #0
 800d270:	2100      	movs	r1, #0
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f001 f88d 	bl	800e392 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d280:	2300      	movs	r3, #0
 800d282:	2200      	movs	r2, #0
 800d284:	2100      	movs	r1, #0
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f001 fd5e 	bl	800ed48 <USBD_LL_PrepareReceive>
 800d28c:	e01c      	b.n	800d2c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d294:	b2db      	uxtb	r3, r3
 800d296:	2b03      	cmp	r3, #3
 800d298:	d10f      	bne.n	800d2ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d009      	beq.n	800d2ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2ba:	2180      	movs	r1, #128	; 0x80
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f001 fc99 	bl	800ebf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f001 f8b7 	bl	800e436 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d03a      	beq.n	800d348 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fe42 	bl	800cf5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d2e0:	e032      	b.n	800d348 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d2e2:	7afb      	ldrb	r3, [r7, #11]
 800d2e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 f97f 	bl	800d5f0 <USBD_CoreFindEP>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
 800d2f8:	2bff      	cmp	r3, #255	; 0xff
 800d2fa:	d025      	beq.n	800d348 <USBD_LL_DataInStage+0x15a>
 800d2fc:	7dfb      	ldrb	r3, [r7, #23]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d122      	bne.n	800d348 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d11c      	bne.n	800d348 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d30e:	7dfa      	ldrb	r2, [r7, #23]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	32ae      	adds	r2, #174	; 0xae
 800d314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d318:	695b      	ldr	r3, [r3, #20]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d014      	beq.n	800d348 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d31e:	7dfa      	ldrb	r2, [r7, #23]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d326:	7dfa      	ldrb	r2, [r7, #23]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	32ae      	adds	r2, #174	; 0xae
 800d32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	7afa      	ldrb	r2, [r7, #11]
 800d334:	4611      	mov	r1, r2
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	4798      	blx	r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d33e:	7dbb      	ldrb	r3, [r7, #22]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d344:	7dbb      	ldrb	r3, [r7, #22]
 800d346:	e000      	b.n	800d34a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b084      	sub	sp, #16
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d014      	beq.n	800d3b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00e      	beq.n	800d3b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	6852      	ldr	r2, [r2, #4]
 800d3a6:	b2d2      	uxtb	r2, r2
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	4798      	blx	r3
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d3b8:	2340      	movs	r3, #64	; 0x40
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	2100      	movs	r1, #0
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f001 fbd3 	bl	800eb6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2240      	movs	r2, #64	; 0x40
 800d3d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d3d4:	2340      	movs	r3, #64	; 0x40
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2180      	movs	r1, #128	; 0x80
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f001 fbc5 	bl	800eb6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2240      	movs	r2, #64	; 0x40
 800d3ea:	621a      	str	r2, [r3, #32]

  return ret;
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	78fa      	ldrb	r2, [r7, #3]
 800d406:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	370c      	adds	r7, #12
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr

0800d416 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d416:	b480      	push	{r7}
 800d418:	b083      	sub	sp, #12
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d424:	b2da      	uxtb	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2204      	movs	r2, #4
 800d430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d442:	b480      	push	{r7}
 800d444:	b083      	sub	sp, #12
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b04      	cmp	r3, #4
 800d454:	d106      	bne.n	800d464 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	370c      	adds	r7, #12
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr

0800d472 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b082      	sub	sp, #8
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b03      	cmp	r3, #3
 800d484:	d110      	bne.n	800d4a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00b      	beq.n	800d4a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d496:	69db      	ldr	r3, [r3, #28]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d005      	beq.n	800d4a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a2:	69db      	ldr	r3, [r3, #28]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b082      	sub	sp, #8
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	32ae      	adds	r2, #174	; 0xae
 800d4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	e01c      	b.n	800d50e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	d115      	bne.n	800d50c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	32ae      	adds	r2, #174	; 0xae
 800d4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ee:	6a1b      	ldr	r3, [r3, #32]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00b      	beq.n	800d50c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	32ae      	adds	r2, #174	; 0xae
 800d4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d502:	6a1b      	ldr	r3, [r3, #32]
 800d504:	78fa      	ldrb	r2, [r7, #3]
 800d506:	4611      	mov	r1, r2
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b082      	sub	sp, #8
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	460b      	mov	r3, r1
 800d520:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	32ae      	adds	r2, #174	; 0xae
 800d52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d534:	2303      	movs	r3, #3
 800d536:	e01c      	b.n	800d572 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b03      	cmp	r3, #3
 800d542:	d115      	bne.n	800d570 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	32ae      	adds	r2, #174	; 0xae
 800d54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00b      	beq.n	800d570 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	32ae      	adds	r2, #174	; 0xae
 800d562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	78fa      	ldrb	r2, [r7, #3]
 800d56a:	4611      	mov	r1, r2
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b083      	sub	sp, #12
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d598:	2300      	movs	r3, #0
 800d59a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00e      	beq.n	800d5cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	6852      	ldr	r2, [r2, #4]
 800d5ba:	b2d2      	uxtb	r2, r2
 800d5bc:	4611      	mov	r1, r2
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	4798      	blx	r3
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d5d6:	b480      	push	{r7}
 800d5d8:	b083      	sub	sp, #12
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	460b      	mov	r3, r1
 800d5e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d5e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d5fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b086      	sub	sp, #24
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	460b      	mov	r3, r1
 800d614:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	885b      	ldrh	r3, [r3, #2]
 800d626:	b29a      	uxth	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	429a      	cmp	r2, r3
 800d630:	d920      	bls.n	800d674 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	b29b      	uxth	r3, r3
 800d638:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d63a:	e013      	b.n	800d664 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d63c:	f107 030a 	add.w	r3, r7, #10
 800d640:	4619      	mov	r1, r3
 800d642:	6978      	ldr	r0, [r7, #20]
 800d644:	f000 f81b 	bl	800d67e <USBD_GetNextDesc>
 800d648:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	785b      	ldrb	r3, [r3, #1]
 800d64e:	2b05      	cmp	r3, #5
 800d650:	d108      	bne.n	800d664 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	789b      	ldrb	r3, [r3, #2]
 800d65a:	78fa      	ldrb	r2, [r7, #3]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d008      	beq.n	800d672 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d660:	2300      	movs	r3, #0
 800d662:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	885b      	ldrh	r3, [r3, #2]
 800d668:	b29a      	uxth	r2, r3
 800d66a:	897b      	ldrh	r3, [r7, #10]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d8e5      	bhi.n	800d63c <USBD_GetEpDesc+0x32>
 800d670:	e000      	b.n	800d674 <USBD_GetEpDesc+0x6a>
          break;
 800d672:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d674:	693b      	ldr	r3, [r7, #16]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3718      	adds	r7, #24
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d67e:	b480      	push	{r7}
 800d680:	b085      	sub	sp, #20
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	881a      	ldrh	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	b29b      	uxth	r3, r3
 800d696:	4413      	add	r3, r2
 800d698:	b29a      	uxth	r2, r3
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b087      	sub	sp, #28
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d6d6:	8a3b      	ldrh	r3, [r7, #16]
 800d6d8:	021b      	lsls	r3, r3, #8
 800d6da:	b21a      	sxth	r2, r3
 800d6dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	b21b      	sxth	r3, r3
 800d6e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d6e6:	89fb      	ldrh	r3, [r7, #14]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	371c      	adds	r7, #28
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d70a:	2b40      	cmp	r3, #64	; 0x40
 800d70c:	d005      	beq.n	800d71a <USBD_StdDevReq+0x26>
 800d70e:	2b40      	cmp	r3, #64	; 0x40
 800d710:	d857      	bhi.n	800d7c2 <USBD_StdDevReq+0xce>
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00f      	beq.n	800d736 <USBD_StdDevReq+0x42>
 800d716:	2b20      	cmp	r3, #32
 800d718:	d153      	bne.n	800d7c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	32ae      	adds	r2, #174	; 0xae
 800d724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	4798      	blx	r3
 800d730:	4603      	mov	r3, r0
 800d732:	73fb      	strb	r3, [r7, #15]
      break;
 800d734:	e04a      	b.n	800d7cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	785b      	ldrb	r3, [r3, #1]
 800d73a:	2b09      	cmp	r3, #9
 800d73c:	d83b      	bhi.n	800d7b6 <USBD_StdDevReq+0xc2>
 800d73e:	a201      	add	r2, pc, #4	; (adr r2, 800d744 <USBD_StdDevReq+0x50>)
 800d740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d744:	0800d799 	.word	0x0800d799
 800d748:	0800d7ad 	.word	0x0800d7ad
 800d74c:	0800d7b7 	.word	0x0800d7b7
 800d750:	0800d7a3 	.word	0x0800d7a3
 800d754:	0800d7b7 	.word	0x0800d7b7
 800d758:	0800d777 	.word	0x0800d777
 800d75c:	0800d76d 	.word	0x0800d76d
 800d760:	0800d7b7 	.word	0x0800d7b7
 800d764:	0800d78f 	.word	0x0800d78f
 800d768:	0800d781 	.word	0x0800d781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa3c 	bl	800dbec <USBD_GetDescriptor>
          break;
 800d774:	e024      	b.n	800d7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 fba1 	bl	800dec0 <USBD_SetAddress>
          break;
 800d77e:	e01f      	b.n	800d7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fbe0 	bl	800df48 <USBD_SetConfig>
 800d788:	4603      	mov	r3, r0
 800d78a:	73fb      	strb	r3, [r7, #15]
          break;
 800d78c:	e018      	b.n	800d7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 fc83 	bl	800e09c <USBD_GetConfig>
          break;
 800d796:	e013      	b.n	800d7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d798:	6839      	ldr	r1, [r7, #0]
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fcb4 	bl	800e108 <USBD_GetStatus>
          break;
 800d7a0:	e00e      	b.n	800d7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d7a2:	6839      	ldr	r1, [r7, #0]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 fce3 	bl	800e170 <USBD_SetFeature>
          break;
 800d7aa:	e009      	b.n	800d7c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fd07 	bl	800e1c2 <USBD_ClrFeature>
          break;
 800d7b4:	e004      	b.n	800d7c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d7b6:	6839      	ldr	r1, [r7, #0]
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 fd5e 	bl	800e27a <USBD_CtlError>
          break;
 800d7be:	bf00      	nop
      }
      break;
 800d7c0:	e004      	b.n	800d7cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fd58 	bl	800e27a <USBD_CtlError>
      break;
 800d7ca:	bf00      	nop
  }

  return ret;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop

0800d7d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7ee:	2b40      	cmp	r3, #64	; 0x40
 800d7f0:	d005      	beq.n	800d7fe <USBD_StdItfReq+0x26>
 800d7f2:	2b40      	cmp	r3, #64	; 0x40
 800d7f4:	d852      	bhi.n	800d89c <USBD_StdItfReq+0xc4>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <USBD_StdItfReq+0x26>
 800d7fa:	2b20      	cmp	r3, #32
 800d7fc:	d14e      	bne.n	800d89c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d804:	b2db      	uxtb	r3, r3
 800d806:	3b01      	subs	r3, #1
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d840      	bhi.n	800d88e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	889b      	ldrh	r3, [r3, #4]
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b01      	cmp	r3, #1
 800d814:	d836      	bhi.n	800d884 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	889b      	ldrh	r3, [r3, #4]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff fed9 	bl	800d5d6 <USBD_CoreFindIF>
 800d824:	4603      	mov	r3, r0
 800d826:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	2bff      	cmp	r3, #255	; 0xff
 800d82c:	d01d      	beq.n	800d86a <USBD_StdItfReq+0x92>
 800d82e:	7bbb      	ldrb	r3, [r7, #14]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d11a      	bne.n	800d86a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d834:	7bba      	ldrb	r2, [r7, #14]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	32ae      	adds	r2, #174	; 0xae
 800d83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00f      	beq.n	800d864 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d844:	7bba      	ldrb	r2, [r7, #14]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d84c:	7bba      	ldrb	r2, [r7, #14]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	32ae      	adds	r2, #174	; 0xae
 800d852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	4798      	blx	r3
 800d85e:	4603      	mov	r3, r0
 800d860:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d862:	e004      	b.n	800d86e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d864:	2303      	movs	r3, #3
 800d866:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d868:	e001      	b.n	800d86e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d86a:	2303      	movs	r3, #3
 800d86c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	88db      	ldrh	r3, [r3, #6]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d110      	bne.n	800d898 <USBD_StdItfReq+0xc0>
 800d876:	7bfb      	ldrb	r3, [r7, #15]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10d      	bne.n	800d898 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fdc7 	bl	800e410 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d882:	e009      	b.n	800d898 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fcf7 	bl	800e27a <USBD_CtlError>
          break;
 800d88c:	e004      	b.n	800d898 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 fcf2 	bl	800e27a <USBD_CtlError>
          break;
 800d896:	e000      	b.n	800d89a <USBD_StdItfReq+0xc2>
          break;
 800d898:	bf00      	nop
      }
      break;
 800d89a:	e004      	b.n	800d8a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fceb 	bl	800e27a <USBD_CtlError>
      break;
 800d8a4:	bf00      	nop
  }

  return ret;
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	889b      	ldrh	r3, [r3, #4]
 800d8c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8cc:	2b40      	cmp	r3, #64	; 0x40
 800d8ce:	d007      	beq.n	800d8e0 <USBD_StdEPReq+0x30>
 800d8d0:	2b40      	cmp	r3, #64	; 0x40
 800d8d2:	f200 817f 	bhi.w	800dbd4 <USBD_StdEPReq+0x324>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d02a      	beq.n	800d930 <USBD_StdEPReq+0x80>
 800d8da:	2b20      	cmp	r3, #32
 800d8dc:	f040 817a 	bne.w	800dbd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d8e0:	7bbb      	ldrb	r3, [r7, #14]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f7ff fe83 	bl	800d5f0 <USBD_CoreFindEP>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8ee:	7b7b      	ldrb	r3, [r7, #13]
 800d8f0:	2bff      	cmp	r3, #255	; 0xff
 800d8f2:	f000 8174 	beq.w	800dbde <USBD_StdEPReq+0x32e>
 800d8f6:	7b7b      	ldrb	r3, [r7, #13]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f040 8170 	bne.w	800dbde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d8fe:	7b7a      	ldrb	r2, [r7, #13]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d906:	7b7a      	ldrb	r2, [r7, #13]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	32ae      	adds	r2, #174	; 0xae
 800d90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 8163 	beq.w	800dbde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d918:	7b7a      	ldrb	r2, [r7, #13]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	32ae      	adds	r2, #174	; 0xae
 800d91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	4798      	blx	r3
 800d92a:	4603      	mov	r3, r0
 800d92c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d92e:	e156      	b.n	800dbde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	785b      	ldrb	r3, [r3, #1]
 800d934:	2b03      	cmp	r3, #3
 800d936:	d008      	beq.n	800d94a <USBD_StdEPReq+0x9a>
 800d938:	2b03      	cmp	r3, #3
 800d93a:	f300 8145 	bgt.w	800dbc8 <USBD_StdEPReq+0x318>
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 809b 	beq.w	800da7a <USBD_StdEPReq+0x1ca>
 800d944:	2b01      	cmp	r3, #1
 800d946:	d03c      	beq.n	800d9c2 <USBD_StdEPReq+0x112>
 800d948:	e13e      	b.n	800dbc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b02      	cmp	r3, #2
 800d954:	d002      	beq.n	800d95c <USBD_StdEPReq+0xac>
 800d956:	2b03      	cmp	r3, #3
 800d958:	d016      	beq.n	800d988 <USBD_StdEPReq+0xd8>
 800d95a:	e02c      	b.n	800d9b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00d      	beq.n	800d97e <USBD_StdEPReq+0xce>
 800d962:	7bbb      	ldrb	r3, [r7, #14]
 800d964:	2b80      	cmp	r3, #128	; 0x80
 800d966:	d00a      	beq.n	800d97e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d968:	7bbb      	ldrb	r3, [r7, #14]
 800d96a:	4619      	mov	r1, r3
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f001 f941 	bl	800ebf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d972:	2180      	movs	r1, #128	; 0x80
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f001 f93d 	bl	800ebf4 <USBD_LL_StallEP>
 800d97a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d97c:	e020      	b.n	800d9c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 fc7a 	bl	800e27a <USBD_CtlError>
              break;
 800d986:	e01b      	b.n	800d9c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	885b      	ldrh	r3, [r3, #2]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10e      	bne.n	800d9ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00b      	beq.n	800d9ae <USBD_StdEPReq+0xfe>
 800d996:	7bbb      	ldrb	r3, [r7, #14]
 800d998:	2b80      	cmp	r3, #128	; 0x80
 800d99a:	d008      	beq.n	800d9ae <USBD_StdEPReq+0xfe>
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	88db      	ldrh	r3, [r3, #6]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d104      	bne.n	800d9ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9a4:	7bbb      	ldrb	r3, [r7, #14]
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f001 f923 	bl	800ebf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fd2e 	bl	800e410 <USBD_CtlSendStatus>

              break;
 800d9b4:	e004      	b.n	800d9c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fc5e 	bl	800e27a <USBD_CtlError>
              break;
 800d9be:	bf00      	nop
          }
          break;
 800d9c0:	e107      	b.n	800dbd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d002      	beq.n	800d9d4 <USBD_StdEPReq+0x124>
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d016      	beq.n	800da00 <USBD_StdEPReq+0x150>
 800d9d2:	e04b      	b.n	800da6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9d4:	7bbb      	ldrb	r3, [r7, #14]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00d      	beq.n	800d9f6 <USBD_StdEPReq+0x146>
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	2b80      	cmp	r3, #128	; 0x80
 800d9de:	d00a      	beq.n	800d9f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9e0:	7bbb      	ldrb	r3, [r7, #14]
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f001 f905 	bl	800ebf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9ea:	2180      	movs	r1, #128	; 0x80
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f001 f901 	bl	800ebf4 <USBD_LL_StallEP>
 800d9f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9f4:	e040      	b.n	800da78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fc3e 	bl	800e27a <USBD_CtlError>
              break;
 800d9fe:	e03b      	b.n	800da78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	885b      	ldrh	r3, [r3, #2]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d136      	bne.n	800da76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da08:	7bbb      	ldrb	r3, [r7, #14]
 800da0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d004      	beq.n	800da1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da12:	7bbb      	ldrb	r3, [r7, #14]
 800da14:	4619      	mov	r1, r3
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f001 f90b 	bl	800ec32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 fcf7 	bl	800e410 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	4619      	mov	r1, r3
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7ff fde2 	bl	800d5f0 <USBD_CoreFindEP>
 800da2c:	4603      	mov	r3, r0
 800da2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da30:	7b7b      	ldrb	r3, [r7, #13]
 800da32:	2bff      	cmp	r3, #255	; 0xff
 800da34:	d01f      	beq.n	800da76 <USBD_StdEPReq+0x1c6>
 800da36:	7b7b      	ldrb	r3, [r7, #13]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d11c      	bne.n	800da76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800da3c:	7b7a      	ldrb	r2, [r7, #13]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800da44:	7b7a      	ldrb	r2, [r7, #13]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	32ae      	adds	r2, #174	; 0xae
 800da4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d010      	beq.n	800da76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da54:	7b7a      	ldrb	r2, [r7, #13]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	32ae      	adds	r2, #174	; 0xae
 800da5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	6839      	ldr	r1, [r7, #0]
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	4798      	blx	r3
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800da6a:	e004      	b.n	800da76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fc03 	bl	800e27a <USBD_CtlError>
              break;
 800da74:	e000      	b.n	800da78 <USBD_StdEPReq+0x1c8>
              break;
 800da76:	bf00      	nop
          }
          break;
 800da78:	e0ab      	b.n	800dbd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da80:	b2db      	uxtb	r3, r3
 800da82:	2b02      	cmp	r3, #2
 800da84:	d002      	beq.n	800da8c <USBD_StdEPReq+0x1dc>
 800da86:	2b03      	cmp	r3, #3
 800da88:	d032      	beq.n	800daf0 <USBD_StdEPReq+0x240>
 800da8a:	e097      	b.n	800dbbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d007      	beq.n	800daa2 <USBD_StdEPReq+0x1f2>
 800da92:	7bbb      	ldrb	r3, [r7, #14]
 800da94:	2b80      	cmp	r3, #128	; 0x80
 800da96:	d004      	beq.n	800daa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fbed 	bl	800e27a <USBD_CtlError>
                break;
 800daa0:	e091      	b.n	800dbc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	da0b      	bge.n	800dac2 <USBD_StdEPReq+0x212>
 800daaa:	7bbb      	ldrb	r3, [r7, #14]
 800daac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	3310      	adds	r3, #16
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	4413      	add	r3, r2
 800dabe:	3304      	adds	r3, #4
 800dac0:	e00b      	b.n	800dada <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dac2:	7bbb      	ldrb	r3, [r7, #14]
 800dac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dac8:	4613      	mov	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4413      	add	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	4413      	add	r3, r2
 800dad8:	3304      	adds	r3, #4
 800dada:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	2200      	movs	r2, #0
 800dae0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2202      	movs	r2, #2
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fc37 	bl	800e35c <USBD_CtlSendData>
              break;
 800daee:	e06a      	b.n	800dbc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800daf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	da11      	bge.n	800db1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800daf8:	7bbb      	ldrb	r3, [r7, #14]
 800dafa:	f003 020f 	and.w	r2, r3, #15
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	4613      	mov	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4413      	add	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	440b      	add	r3, r1
 800db0a:	3324      	adds	r3, #36	; 0x24
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d117      	bne.n	800db42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fbb0 	bl	800e27a <USBD_CtlError>
                  break;
 800db1a:	e054      	b.n	800dbc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	f003 020f 	and.w	r2, r3, #15
 800db22:	6879      	ldr	r1, [r7, #4]
 800db24:	4613      	mov	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	440b      	add	r3, r1
 800db2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d104      	bne.n	800db42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fb9d 	bl	800e27a <USBD_CtlError>
                  break;
 800db40:	e041      	b.n	800dbc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db46:	2b00      	cmp	r3, #0
 800db48:	da0b      	bge.n	800db62 <USBD_StdEPReq+0x2b2>
 800db4a:	7bbb      	ldrb	r3, [r7, #14]
 800db4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db50:	4613      	mov	r3, r2
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	3310      	adds	r3, #16
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	4413      	add	r3, r2
 800db5e:	3304      	adds	r3, #4
 800db60:	e00b      	b.n	800db7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db62:	7bbb      	ldrb	r3, [r7, #14]
 800db64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db68:	4613      	mov	r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4413      	add	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	4413      	add	r3, r2
 800db78:	3304      	adds	r3, #4
 800db7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800db7c:	7bbb      	ldrb	r3, [r7, #14]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <USBD_StdEPReq+0x2d8>
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	2b80      	cmp	r3, #128	; 0x80
 800db86:	d103      	bne.n	800db90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2200      	movs	r2, #0
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	e00e      	b.n	800dbae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800db90:	7bbb      	ldrb	r3, [r7, #14]
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f001 f86b 	bl	800ec70 <USBD_LL_IsStallEP>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d003      	beq.n	800dba8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2201      	movs	r2, #1
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	e002      	b.n	800dbae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2202      	movs	r2, #2
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fbd1 	bl	800e35c <USBD_CtlSendData>
              break;
 800dbba:	e004      	b.n	800dbc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fb5b 	bl	800e27a <USBD_CtlError>
              break;
 800dbc4:	bf00      	nop
          }
          break;
 800dbc6:	e004      	b.n	800dbd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fb55 	bl	800e27a <USBD_CtlError>
          break;
 800dbd0:	bf00      	nop
      }
      break;
 800dbd2:	e005      	b.n	800dbe0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dbd4:	6839      	ldr	r1, [r7, #0]
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fb4f 	bl	800e27a <USBD_CtlError>
      break;
 800dbdc:	e000      	b.n	800dbe0 <USBD_StdEPReq+0x330>
      break;
 800dbde:	bf00      	nop
  }

  return ret;
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
	...

0800dbec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	885b      	ldrh	r3, [r3, #2]
 800dc06:	0a1b      	lsrs	r3, r3, #8
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	2b06      	cmp	r3, #6
 800dc0e:	f200 8128 	bhi.w	800de62 <USBD_GetDescriptor+0x276>
 800dc12:	a201      	add	r2, pc, #4	; (adr r2, 800dc18 <USBD_GetDescriptor+0x2c>)
 800dc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc18:	0800dc35 	.word	0x0800dc35
 800dc1c:	0800dc4d 	.word	0x0800dc4d
 800dc20:	0800dc8d 	.word	0x0800dc8d
 800dc24:	0800de63 	.word	0x0800de63
 800dc28:	0800de63 	.word	0x0800de63
 800dc2c:	0800de03 	.word	0x0800de03
 800dc30:	0800de2f 	.word	0x0800de2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	7c12      	ldrb	r2, [r2, #16]
 800dc40:	f107 0108 	add.w	r1, r7, #8
 800dc44:	4610      	mov	r0, r2
 800dc46:	4798      	blx	r3
 800dc48:	60f8      	str	r0, [r7, #12]
      break;
 800dc4a:	e112      	b.n	800de72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	7c1b      	ldrb	r3, [r3, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10d      	bne.n	800dc70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5c:	f107 0208 	add.w	r2, r7, #8
 800dc60:	4610      	mov	r0, r2
 800dc62:	4798      	blx	r3
 800dc64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dc6e:	e100      	b.n	800de72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	f107 0208 	add.w	r2, r7, #8
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	4798      	blx	r3
 800dc80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	3301      	adds	r3, #1
 800dc86:	2202      	movs	r2, #2
 800dc88:	701a      	strb	r2, [r3, #0]
      break;
 800dc8a:	e0f2      	b.n	800de72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	885b      	ldrh	r3, [r3, #2]
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	2b05      	cmp	r3, #5
 800dc94:	f200 80ac 	bhi.w	800ddf0 <USBD_GetDescriptor+0x204>
 800dc98:	a201      	add	r2, pc, #4	; (adr r2, 800dca0 <USBD_GetDescriptor+0xb4>)
 800dc9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc9e:	bf00      	nop
 800dca0:	0800dcb9 	.word	0x0800dcb9
 800dca4:	0800dced 	.word	0x0800dced
 800dca8:	0800dd21 	.word	0x0800dd21
 800dcac:	0800dd55 	.word	0x0800dd55
 800dcb0:	0800dd89 	.word	0x0800dd89
 800dcb4:	0800ddbd 	.word	0x0800ddbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00b      	beq.n	800dcdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	7c12      	ldrb	r2, [r2, #16]
 800dcd0:	f107 0108 	add.w	r1, r7, #8
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	4798      	blx	r3
 800dcd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcda:	e091      	b.n	800de00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 facb 	bl	800e27a <USBD_CtlError>
            err++;
 800dce4:	7afb      	ldrb	r3, [r7, #11]
 800dce6:	3301      	adds	r3, #1
 800dce8:	72fb      	strb	r3, [r7, #11]
          break;
 800dcea:	e089      	b.n	800de00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00b      	beq.n	800dd10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	7c12      	ldrb	r2, [r2, #16]
 800dd04:	f107 0108 	add.w	r1, r7, #8
 800dd08:	4610      	mov	r0, r2
 800dd0a:	4798      	blx	r3
 800dd0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd0e:	e077      	b.n	800de00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fab1 	bl	800e27a <USBD_CtlError>
            err++;
 800dd18:	7afb      	ldrb	r3, [r7, #11]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	72fb      	strb	r3, [r7, #11]
          break;
 800dd1e:	e06f      	b.n	800de00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00b      	beq.n	800dd44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	7c12      	ldrb	r2, [r2, #16]
 800dd38:	f107 0108 	add.w	r1, r7, #8
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	4798      	blx	r3
 800dd40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd42:	e05d      	b.n	800de00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fa97 	bl	800e27a <USBD_CtlError>
            err++;
 800dd4c:	7afb      	ldrb	r3, [r7, #11]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	72fb      	strb	r3, [r7, #11]
          break;
 800dd52:	e055      	b.n	800de00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00b      	beq.n	800dd78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	7c12      	ldrb	r2, [r2, #16]
 800dd6c:	f107 0108 	add.w	r1, r7, #8
 800dd70:	4610      	mov	r0, r2
 800dd72:	4798      	blx	r3
 800dd74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd76:	e043      	b.n	800de00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd78:	6839      	ldr	r1, [r7, #0]
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 fa7d 	bl	800e27a <USBD_CtlError>
            err++;
 800dd80:	7afb      	ldrb	r3, [r7, #11]
 800dd82:	3301      	adds	r3, #1
 800dd84:	72fb      	strb	r3, [r7, #11]
          break;
 800dd86:	e03b      	b.n	800de00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00b      	beq.n	800ddac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd9a:	695b      	ldr	r3, [r3, #20]
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	7c12      	ldrb	r2, [r2, #16]
 800dda0:	f107 0108 	add.w	r1, r7, #8
 800dda4:	4610      	mov	r0, r2
 800dda6:	4798      	blx	r3
 800dda8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddaa:	e029      	b.n	800de00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddac:	6839      	ldr	r1, [r7, #0]
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 fa63 	bl	800e27a <USBD_CtlError>
            err++;
 800ddb4:	7afb      	ldrb	r3, [r7, #11]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	72fb      	strb	r3, [r7, #11]
          break;
 800ddba:	e021      	b.n	800de00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddc2:	699b      	ldr	r3, [r3, #24]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00b      	beq.n	800dde0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	7c12      	ldrb	r2, [r2, #16]
 800ddd4:	f107 0108 	add.w	r1, r7, #8
 800ddd8:	4610      	mov	r0, r2
 800ddda:	4798      	blx	r3
 800dddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddde:	e00f      	b.n	800de00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fa49 	bl	800e27a <USBD_CtlError>
            err++;
 800dde8:	7afb      	ldrb	r3, [r7, #11]
 800ddea:	3301      	adds	r3, #1
 800ddec:	72fb      	strb	r3, [r7, #11]
          break;
 800ddee:	e007      	b.n	800de00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 fa41 	bl	800e27a <USBD_CtlError>
          err++;
 800ddf8:	7afb      	ldrb	r3, [r7, #11]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ddfe:	bf00      	nop
      }
      break;
 800de00:	e037      	b.n	800de72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	7c1b      	ldrb	r3, [r3, #16]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d109      	bne.n	800de1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de12:	f107 0208 	add.w	r2, r7, #8
 800de16:	4610      	mov	r0, r2
 800de18:	4798      	blx	r3
 800de1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de1c:	e029      	b.n	800de72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fa2a 	bl	800e27a <USBD_CtlError>
        err++;
 800de26:	7afb      	ldrb	r3, [r7, #11]
 800de28:	3301      	adds	r3, #1
 800de2a:	72fb      	strb	r3, [r7, #11]
      break;
 800de2c:	e021      	b.n	800de72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	7c1b      	ldrb	r3, [r3, #16]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10d      	bne.n	800de52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3e:	f107 0208 	add.w	r2, r7, #8
 800de42:	4610      	mov	r0, r2
 800de44:	4798      	blx	r3
 800de46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3301      	adds	r3, #1
 800de4c:	2207      	movs	r2, #7
 800de4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de50:	e00f      	b.n	800de72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de52:	6839      	ldr	r1, [r7, #0]
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 fa10 	bl	800e27a <USBD_CtlError>
        err++;
 800de5a:	7afb      	ldrb	r3, [r7, #11]
 800de5c:	3301      	adds	r3, #1
 800de5e:	72fb      	strb	r3, [r7, #11]
      break;
 800de60:	e007      	b.n	800de72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800de62:	6839      	ldr	r1, [r7, #0]
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fa08 	bl	800e27a <USBD_CtlError>
      err++;
 800de6a:	7afb      	ldrb	r3, [r7, #11]
 800de6c:	3301      	adds	r3, #1
 800de6e:	72fb      	strb	r3, [r7, #11]
      break;
 800de70:	bf00      	nop
  }

  if (err != 0U)
 800de72:	7afb      	ldrb	r3, [r7, #11]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d11e      	bne.n	800deb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	88db      	ldrh	r3, [r3, #6]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d016      	beq.n	800deae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800de80:	893b      	ldrh	r3, [r7, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00e      	beq.n	800dea4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	88da      	ldrh	r2, [r3, #6]
 800de8a:	893b      	ldrh	r3, [r7, #8]
 800de8c:	4293      	cmp	r3, r2
 800de8e:	bf28      	it	cs
 800de90:	4613      	movcs	r3, r2
 800de92:	b29b      	uxth	r3, r3
 800de94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800de96:	893b      	ldrh	r3, [r7, #8]
 800de98:	461a      	mov	r2, r3
 800de9a:	68f9      	ldr	r1, [r7, #12]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fa5d 	bl	800e35c <USBD_CtlSendData>
 800dea2:	e009      	b.n	800deb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dea4:	6839      	ldr	r1, [r7, #0]
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 f9e7 	bl	800e27a <USBD_CtlError>
 800deac:	e004      	b.n	800deb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 faae 	bl	800e410 <USBD_CtlSendStatus>
 800deb4:	e000      	b.n	800deb8 <USBD_GetDescriptor+0x2cc>
    return;
 800deb6:	bf00      	nop
  }
}
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop

0800dec0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	889b      	ldrh	r3, [r3, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d131      	bne.n	800df36 <USBD_SetAddress+0x76>
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	88db      	ldrh	r3, [r3, #6]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d12d      	bne.n	800df36 <USBD_SetAddress+0x76>
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	885b      	ldrh	r3, [r3, #2]
 800dede:	2b7f      	cmp	r3, #127	; 0x7f
 800dee0:	d829      	bhi.n	800df36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	885b      	ldrh	r3, [r3, #2]
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b03      	cmp	r3, #3
 800def8:	d104      	bne.n	800df04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 f9bc 	bl	800e27a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df02:	e01d      	b.n	800df40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	7bfa      	ldrb	r2, [r7, #15]
 800df08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fed9 	bl	800ecc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fa7a 	bl	800e410 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df1c:	7bfb      	ldrb	r3, [r7, #15]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d004      	beq.n	800df2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2202      	movs	r2, #2
 800df26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df2a:	e009      	b.n	800df40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df34:	e004      	b.n	800df40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f99e 	bl	800e27a <USBD_CtlError>
  }
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	885b      	ldrh	r3, [r3, #2]
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	4b4e      	ldr	r3, [pc, #312]	; (800e098 <USBD_SetConfig+0x150>)
 800df5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df60:	4b4d      	ldr	r3, [pc, #308]	; (800e098 <USBD_SetConfig+0x150>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d905      	bls.n	800df74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f985 	bl	800e27a <USBD_CtlError>
    return USBD_FAIL;
 800df70:	2303      	movs	r3, #3
 800df72:	e08c      	b.n	800e08e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d002      	beq.n	800df86 <USBD_SetConfig+0x3e>
 800df80:	2b03      	cmp	r3, #3
 800df82:	d029      	beq.n	800dfd8 <USBD_SetConfig+0x90>
 800df84:	e075      	b.n	800e072 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800df86:	4b44      	ldr	r3, [pc, #272]	; (800e098 <USBD_SetConfig+0x150>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d020      	beq.n	800dfd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800df8e:	4b42      	ldr	r3, [pc, #264]	; (800e098 <USBD_SetConfig+0x150>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	461a      	mov	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df98:	4b3f      	ldr	r3, [pc, #252]	; (800e098 <USBD_SetConfig+0x150>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f7fe ffe7 	bl	800cf72 <USBD_SetClassConfig>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d008      	beq.n	800dfc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f962 	bl	800e27a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfbe:	e065      	b.n	800e08c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fa25 	bl	800e410 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2203      	movs	r2, #3
 800dfca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dfce:	e05d      	b.n	800e08c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 fa1d 	bl	800e410 <USBD_CtlSendStatus>
      break;
 800dfd6:	e059      	b.n	800e08c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dfd8:	4b2f      	ldr	r3, [pc, #188]	; (800e098 <USBD_SetConfig+0x150>)
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d112      	bne.n	800e006 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2202      	movs	r2, #2
 800dfe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dfe8:	4b2b      	ldr	r3, [pc, #172]	; (800e098 <USBD_SetConfig+0x150>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	461a      	mov	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dff2:	4b29      	ldr	r3, [pc, #164]	; (800e098 <USBD_SetConfig+0x150>)
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7fe ffd6 	bl	800cfaa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fa06 	bl	800e410 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e004:	e042      	b.n	800e08c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e006:	4b24      	ldr	r3, [pc, #144]	; (800e098 <USBD_SetConfig+0x150>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	461a      	mov	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	429a      	cmp	r2, r3
 800e012:	d02a      	beq.n	800e06a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	4619      	mov	r1, r3
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7fe ffc4 	bl	800cfaa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e022:	4b1d      	ldr	r3, [pc, #116]	; (800e098 <USBD_SetConfig+0x150>)
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e02c:	4b1a      	ldr	r3, [pc, #104]	; (800e098 <USBD_SetConfig+0x150>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	4619      	mov	r1, r3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7fe ff9d 	bl	800cf72 <USBD_SetClassConfig>
 800e038:	4603      	mov	r3, r0
 800e03a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d00f      	beq.n	800e062 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f918 	bl	800e27a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	4619      	mov	r1, r3
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7fe ffa9 	bl	800cfaa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2202      	movs	r2, #2
 800e05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e060:	e014      	b.n	800e08c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 f9d4 	bl	800e410 <USBD_CtlSendStatus>
      break;
 800e068:	e010      	b.n	800e08c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f9d0 	bl	800e410 <USBD_CtlSendStatus>
      break;
 800e070:	e00c      	b.n	800e08c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f900 	bl	800e27a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e07a:	4b07      	ldr	r3, [pc, #28]	; (800e098 <USBD_SetConfig+0x150>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	4619      	mov	r1, r3
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7fe ff92 	bl	800cfaa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e086:	2303      	movs	r3, #3
 800e088:	73fb      	strb	r3, [r7, #15]
      break;
 800e08a:	bf00      	nop
  }

  return ret;
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20000d8c 	.word	0x20000d8c

0800e09c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	88db      	ldrh	r3, [r3, #6]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d004      	beq.n	800e0b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e0ae:	6839      	ldr	r1, [r7, #0]
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 f8e2 	bl	800e27a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e0b6:	e023      	b.n	800e100 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	dc02      	bgt.n	800e0ca <USBD_GetConfig+0x2e>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	dc03      	bgt.n	800e0d0 <USBD_GetConfig+0x34>
 800e0c8:	e015      	b.n	800e0f6 <USBD_GetConfig+0x5a>
 800e0ca:	2b03      	cmp	r3, #3
 800e0cc:	d00b      	beq.n	800e0e6 <USBD_GetConfig+0x4a>
 800e0ce:	e012      	b.n	800e0f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	3308      	adds	r3, #8
 800e0da:	2201      	movs	r2, #1
 800e0dc:	4619      	mov	r1, r3
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f93c 	bl	800e35c <USBD_CtlSendData>
        break;
 800e0e4:	e00c      	b.n	800e100 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 f934 	bl	800e35c <USBD_CtlSendData>
        break;
 800e0f4:	e004      	b.n	800e100 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e0f6:	6839      	ldr	r1, [r7, #0]
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 f8be 	bl	800e27a <USBD_CtlError>
        break;
 800e0fe:	bf00      	nop
}
 800e100:	bf00      	nop
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	3b01      	subs	r3, #1
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d81e      	bhi.n	800e15e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	88db      	ldrh	r3, [r3, #6]
 800e124:	2b02      	cmp	r3, #2
 800e126:	d004      	beq.n	800e132 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f8a5 	bl	800e27a <USBD_CtlError>
        break;
 800e130:	e01a      	b.n	800e168 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2201      	movs	r2, #1
 800e136:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d005      	beq.n	800e14e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	f043 0202 	orr.w	r2, r3, #2
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	330c      	adds	r3, #12
 800e152:	2202      	movs	r2, #2
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f900 	bl	800e35c <USBD_CtlSendData>
      break;
 800e15c:	e004      	b.n	800e168 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e15e:	6839      	ldr	r1, [r7, #0]
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 f88a 	bl	800e27a <USBD_CtlError>
      break;
 800e166:	bf00      	nop
  }
}
 800e168:	bf00      	nop
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	885b      	ldrh	r3, [r3, #2]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d107      	bne.n	800e192 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2201      	movs	r2, #1
 800e186:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f940 	bl	800e410 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e190:	e013      	b.n	800e1ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	885b      	ldrh	r3, [r3, #2]
 800e196:	2b02      	cmp	r3, #2
 800e198:	d10b      	bne.n	800e1b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	889b      	ldrh	r3, [r3, #4]
 800e19e:	0a1b      	lsrs	r3, r3, #8
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 f930 	bl	800e410 <USBD_CtlSendStatus>
}
 800e1b0:	e003      	b.n	800e1ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f860 	bl	800e27a <USBD_CtlError>
}
 800e1ba:	bf00      	nop
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d80b      	bhi.n	800e1f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	885b      	ldrh	r3, [r3, #2]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d10c      	bne.n	800e1fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f000 f910 	bl	800e410 <USBD_CtlSendStatus>
      }
      break;
 800e1f0:	e004      	b.n	800e1fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 f840 	bl	800e27a <USBD_CtlError>
      break;
 800e1fa:	e000      	b.n	800e1fe <USBD_ClrFeature+0x3c>
      break;
 800e1fc:	bf00      	nop
  }
}
 800e1fe:	bf00      	nop
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b084      	sub	sp, #16
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	781a      	ldrb	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	3301      	adds	r3, #1
 800e220:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	781a      	ldrb	r2, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3301      	adds	r3, #1
 800e22e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f7ff fa41 	bl	800d6b8 <SWAPBYTE>
 800e236:	4603      	mov	r3, r0
 800e238:	461a      	mov	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3301      	adds	r3, #1
 800e242:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	3301      	adds	r3, #1
 800e248:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f7ff fa34 	bl	800d6b8 <SWAPBYTE>
 800e250:	4603      	mov	r3, r0
 800e252:	461a      	mov	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3301      	adds	r3, #1
 800e25c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	3301      	adds	r3, #1
 800e262:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f7ff fa27 	bl	800d6b8 <SWAPBYTE>
 800e26a:	4603      	mov	r3, r0
 800e26c:	461a      	mov	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	80da      	strh	r2, [r3, #6]
}
 800e272:	bf00      	nop
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e284:	2180      	movs	r1, #128	; 0x80
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 fcb4 	bl	800ebf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e28c:	2100      	movs	r1, #0
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fcb0 	bl	800ebf4 <USBD_LL_StallEP>
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d036      	beq.n	800e320 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e2b6:	6938      	ldr	r0, [r7, #16]
 800e2b8:	f000 f836 	bl	800e328 <USBD_GetLen>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	3301      	adds	r3, #1
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	7812      	ldrb	r2, [r2, #0]
 800e2d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e2dc:	7dfb      	ldrb	r3, [r7, #23]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	2203      	movs	r2, #3
 800e2e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e2ec:	e013      	b.n	800e316 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	7812      	ldrb	r2, [r2, #0]
 800e2f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	613b      	str	r3, [r7, #16]
    idx++;
 800e300:	7dfb      	ldrb	r3, [r7, #23]
 800e302:	3301      	adds	r3, #1
 800e304:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e306:	7dfb      	ldrb	r3, [r7, #23]
 800e308:	68ba      	ldr	r2, [r7, #8]
 800e30a:	4413      	add	r3, r2
 800e30c:	2200      	movs	r2, #0
 800e30e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e310:	7dfb      	ldrb	r3, [r7, #23]
 800e312:	3301      	adds	r3, #1
 800e314:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1e7      	bne.n	800e2ee <USBD_GetString+0x52>
 800e31e:	e000      	b.n	800e322 <USBD_GetString+0x86>
    return;
 800e320:	bf00      	nop
  }
}
 800e322:	3718      	adds	r7, #24
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e330:	2300      	movs	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e338:	e005      	b.n	800e346 <USBD_GetLen+0x1e>
  {
    len++;
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	3301      	adds	r3, #1
 800e33e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	3301      	adds	r3, #1
 800e344:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1f5      	bne.n	800e33a <USBD_GetLen+0x12>
  }

  return len;
 800e34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2202      	movs	r2, #2
 800e36c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	2100      	movs	r1, #0
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 fcbf 	bl	800ed06 <USBD_LL_Transmit>

  return USBD_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	60f8      	str	r0, [r7, #12]
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 fcae 	bl	800ed06 <USBD_LL_Transmit>

  return USBD_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2203      	movs	r2, #3
 800e3c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	2100      	movs	r1, #0
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 fcb2 	bl	800ed48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	60f8      	str	r0, [r7, #12]
 800e3f6:	60b9      	str	r1, [r7, #8]
 800e3f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	2100      	movs	r1, #0
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fca1 	bl	800ed48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2204      	movs	r2, #4
 800e41c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e420:	2300      	movs	r3, #0
 800e422:	2200      	movs	r2, #0
 800e424:	2100      	movs	r1, #0
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fc6d 	bl	800ed06 <USBD_LL_Transmit>

  return USBD_OK;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b082      	sub	sp, #8
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2205      	movs	r2, #5
 800e442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e446:	2300      	movs	r3, #0
 800e448:	2200      	movs	r2, #0
 800e44a:	2100      	movs	r1, #0
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 fc7b 	bl	800ed48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e460:	2200      	movs	r2, #0
 800e462:	4912      	ldr	r1, [pc, #72]	; (800e4ac <MX_USB_DEVICE_Init+0x50>)
 800e464:	4812      	ldr	r0, [pc, #72]	; (800e4b0 <MX_USB_DEVICE_Init+0x54>)
 800e466:	f7fe fd07 	bl	800ce78 <USBD_Init>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e470:	f7f2 fff4 	bl	800145c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e474:	490f      	ldr	r1, [pc, #60]	; (800e4b4 <MX_USB_DEVICE_Init+0x58>)
 800e476:	480e      	ldr	r0, [pc, #56]	; (800e4b0 <MX_USB_DEVICE_Init+0x54>)
 800e478:	f7fe fd2e 	bl	800ced8 <USBD_RegisterClass>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e482:	f7f2 ffeb 	bl	800145c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e486:	490c      	ldr	r1, [pc, #48]	; (800e4b8 <MX_USB_DEVICE_Init+0x5c>)
 800e488:	4809      	ldr	r0, [pc, #36]	; (800e4b0 <MX_USB_DEVICE_Init+0x54>)
 800e48a:	f7fe fc65 	bl	800cd58 <USBD_CDC_RegisterInterface>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e494:	f7f2 ffe2 	bl	800145c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e498:	4805      	ldr	r0, [pc, #20]	; (800e4b0 <MX_USB_DEVICE_Init+0x54>)
 800e49a:	f7fe fd53 	bl	800cf44 <USBD_Start>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e4a4:	f7f2 ffda 	bl	800145c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e4a8:	bf00      	nop
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	200000bc 	.word	0x200000bc
 800e4b0:	20000d90 	.word	0x20000d90
 800e4b4:	20000028 	.word	0x20000028
 800e4b8:	200000a8 	.word	0x200000a8

0800e4bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	4905      	ldr	r1, [pc, #20]	; (800e4d8 <CDC_Init_FS+0x1c>)
 800e4c4:	4805      	ldr	r0, [pc, #20]	; (800e4dc <CDC_Init_FS+0x20>)
 800e4c6:	f7fe fc61 	bl	800cd8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e4ca:	4905      	ldr	r1, [pc, #20]	; (800e4e0 <CDC_Init_FS+0x24>)
 800e4cc:	4803      	ldr	r0, [pc, #12]	; (800e4dc <CDC_Init_FS+0x20>)
 800e4ce:	f7fe fc7f 	bl	800cdd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e4d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	2000186c 	.word	0x2000186c
 800e4dc:	20000d90 	.word	0x20000d90
 800e4e0:	2000106c 	.word	0x2000106c

0800e4e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e4e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	6039      	str	r1, [r7, #0]
 800e4fe:	71fb      	strb	r3, [r7, #7]
 800e500:	4613      	mov	r3, r2
 800e502:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	2b23      	cmp	r3, #35	; 0x23
 800e508:	d84a      	bhi.n	800e5a0 <CDC_Control_FS+0xac>
 800e50a:	a201      	add	r2, pc, #4	; (adr r2, 800e510 <CDC_Control_FS+0x1c>)
 800e50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e510:	0800e5a1 	.word	0x0800e5a1
 800e514:	0800e5a1 	.word	0x0800e5a1
 800e518:	0800e5a1 	.word	0x0800e5a1
 800e51c:	0800e5a1 	.word	0x0800e5a1
 800e520:	0800e5a1 	.word	0x0800e5a1
 800e524:	0800e5a1 	.word	0x0800e5a1
 800e528:	0800e5a1 	.word	0x0800e5a1
 800e52c:	0800e5a1 	.word	0x0800e5a1
 800e530:	0800e5a1 	.word	0x0800e5a1
 800e534:	0800e5a1 	.word	0x0800e5a1
 800e538:	0800e5a1 	.word	0x0800e5a1
 800e53c:	0800e5a1 	.word	0x0800e5a1
 800e540:	0800e5a1 	.word	0x0800e5a1
 800e544:	0800e5a1 	.word	0x0800e5a1
 800e548:	0800e5a1 	.word	0x0800e5a1
 800e54c:	0800e5a1 	.word	0x0800e5a1
 800e550:	0800e5a1 	.word	0x0800e5a1
 800e554:	0800e5a1 	.word	0x0800e5a1
 800e558:	0800e5a1 	.word	0x0800e5a1
 800e55c:	0800e5a1 	.word	0x0800e5a1
 800e560:	0800e5a1 	.word	0x0800e5a1
 800e564:	0800e5a1 	.word	0x0800e5a1
 800e568:	0800e5a1 	.word	0x0800e5a1
 800e56c:	0800e5a1 	.word	0x0800e5a1
 800e570:	0800e5a1 	.word	0x0800e5a1
 800e574:	0800e5a1 	.word	0x0800e5a1
 800e578:	0800e5a1 	.word	0x0800e5a1
 800e57c:	0800e5a1 	.word	0x0800e5a1
 800e580:	0800e5a1 	.word	0x0800e5a1
 800e584:	0800e5a1 	.word	0x0800e5a1
 800e588:	0800e5a1 	.word	0x0800e5a1
 800e58c:	0800e5a1 	.word	0x0800e5a1
 800e590:	0800e5a1 	.word	0x0800e5a1
 800e594:	0800e5a1 	.word	0x0800e5a1
 800e598:	0800e5a1 	.word	0x0800e5a1
 800e59c:	0800e5a1 	.word	0x0800e5a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5a0:	bf00      	nop
  }

  return (USBD_OK);
 800e5a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e5ba:	6879      	ldr	r1, [r7, #4]
 800e5bc:	4805      	ldr	r0, [pc, #20]	; (800e5d4 <CDC_Receive_FS+0x24>)
 800e5be:	f7fe fc07 	bl	800cdd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e5c2:	4804      	ldr	r0, [pc, #16]	; (800e5d4 <CDC_Receive_FS+0x24>)
 800e5c4:	f7fe fc22 	bl	800ce0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e5c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20000d90 	.word	0x20000d90

0800e5d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	371c      	adds	r7, #28
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
	...

0800e5fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	4603      	mov	r3, r0
 800e604:	6039      	str	r1, [r7, #0]
 800e606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	2212      	movs	r2, #18
 800e60c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e60e:	4b03      	ldr	r3, [pc, #12]	; (800e61c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	200000d8 	.word	0x200000d8

0800e620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	4603      	mov	r3, r0
 800e628:	6039      	str	r1, [r7, #0]
 800e62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	2204      	movs	r2, #4
 800e630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e632:	4b03      	ldr	r3, [pc, #12]	; (800e640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e634:	4618      	mov	r0, r3
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr
 800e640:	200000ec 	.word	0x200000ec

0800e644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	4603      	mov	r3, r0
 800e64c:	6039      	str	r1, [r7, #0]
 800e64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d105      	bne.n	800e662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	4907      	ldr	r1, [pc, #28]	; (800e678 <USBD_FS_ProductStrDescriptor+0x34>)
 800e65a:	4808      	ldr	r0, [pc, #32]	; (800e67c <USBD_FS_ProductStrDescriptor+0x38>)
 800e65c:	f7ff fe1e 	bl	800e29c <USBD_GetString>
 800e660:	e004      	b.n	800e66c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e662:	683a      	ldr	r2, [r7, #0]
 800e664:	4904      	ldr	r1, [pc, #16]	; (800e678 <USBD_FS_ProductStrDescriptor+0x34>)
 800e666:	4805      	ldr	r0, [pc, #20]	; (800e67c <USBD_FS_ProductStrDescriptor+0x38>)
 800e668:	f7ff fe18 	bl	800e29c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e66c:	4b02      	ldr	r3, [pc, #8]	; (800e678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	2000206c 	.word	0x2000206c
 800e67c:	0800ff8c 	.word	0x0800ff8c

0800e680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	6039      	str	r1, [r7, #0]
 800e68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	4904      	ldr	r1, [pc, #16]	; (800e6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e690:	4804      	ldr	r0, [pc, #16]	; (800e6a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e692:	f7ff fe03 	bl	800e29c <USBD_GetString>
  return USBD_StrDesc;
 800e696:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	2000206c 	.word	0x2000206c
 800e6a4:	0800ffa4 	.word	0x0800ffa4

0800e6a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	6039      	str	r1, [r7, #0]
 800e6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	221a      	movs	r2, #26
 800e6b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e6ba:	f000 f843 	bl	800e744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e6be:	4b02      	ldr	r3, [pc, #8]	; (800e6c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	200000f0 	.word	0x200000f0

0800e6cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	6039      	str	r1, [r7, #0]
 800e6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d105      	bne.n	800e6ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	4907      	ldr	r1, [pc, #28]	; (800e700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e6e2:	4808      	ldr	r0, [pc, #32]	; (800e704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e6e4:	f7ff fdda 	bl	800e29c <USBD_GetString>
 800e6e8:	e004      	b.n	800e6f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	4904      	ldr	r1, [pc, #16]	; (800e700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e6ee:	4805      	ldr	r0, [pc, #20]	; (800e704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e6f0:	f7ff fdd4 	bl	800e29c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6f4:	4b02      	ldr	r3, [pc, #8]	; (800e700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	2000206c 	.word	0x2000206c
 800e704:	0800ffb8 	.word	0x0800ffb8

0800e708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	4603      	mov	r3, r0
 800e710:	6039      	str	r1, [r7, #0]
 800e712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e714:	79fb      	ldrb	r3, [r7, #7]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d105      	bne.n	800e726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e71a:	683a      	ldr	r2, [r7, #0]
 800e71c:	4907      	ldr	r1, [pc, #28]	; (800e73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e71e:	4808      	ldr	r0, [pc, #32]	; (800e740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e720:	f7ff fdbc 	bl	800e29c <USBD_GetString>
 800e724:	e004      	b.n	800e730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e726:	683a      	ldr	r2, [r7, #0]
 800e728:	4904      	ldr	r1, [pc, #16]	; (800e73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e72a:	4805      	ldr	r0, [pc, #20]	; (800e740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e72c:	f7ff fdb6 	bl	800e29c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e730:	4b02      	ldr	r3, [pc, #8]	; (800e73c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e732:	4618      	mov	r0, r3
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	2000206c 	.word	0x2000206c
 800e740:	0800ffc4 	.word	0x0800ffc4

0800e744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0=0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	60fb      	str	r3, [r7, #12]
  uint32_t deviceserial1=0x00001111;
 800e74e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e752:	60bb      	str	r3, [r7, #8]
  uint32_t deviceserial2=0x22220000;
 800e754:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <Get_SerialNum+0x40>)
 800e756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4413      	add	r3, r2
 800e75e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d009      	beq.n	800e77a <Get_SerialNum+0x36>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e766:	2208      	movs	r2, #8
 800e768:	4907      	ldr	r1, [pc, #28]	; (800e788 <Get_SerialNum+0x44>)
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 f810 	bl	800e790 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e770:	2204      	movs	r2, #4
 800e772:	4906      	ldr	r1, [pc, #24]	; (800e78c <Get_SerialNum+0x48>)
 800e774:	68b8      	ldr	r0, [r7, #8]
 800e776:	f000 f80b 	bl	800e790 <IntToUnicode>
  }
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	22220000 	.word	0x22220000
 800e788:	200000f2 	.word	0x200000f2
 800e78c:	20000102 	.word	0x20000102

0800e790 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e790:	b480      	push	{r7}
 800e792:	b087      	sub	sp, #28
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	4613      	mov	r3, r2
 800e79c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	75fb      	strb	r3, [r7, #23]
 800e7a6:	e027      	b.n	800e7f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	0f1b      	lsrs	r3, r3, #28
 800e7ac:	2b09      	cmp	r3, #9
 800e7ae:	d80b      	bhi.n	800e7c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	0f1b      	lsrs	r3, r3, #28
 800e7b4:	b2da      	uxtb	r2, r3
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	440b      	add	r3, r1
 800e7c0:	3230      	adds	r2, #48	; 0x30
 800e7c2:	b2d2      	uxtb	r2, r2
 800e7c4:	701a      	strb	r2, [r3, #0]
 800e7c6:	e00a      	b.n	800e7de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	0f1b      	lsrs	r3, r3, #28
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	7dfb      	ldrb	r3, [r7, #23]
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	440b      	add	r3, r1
 800e7d8:	3237      	adds	r2, #55	; 0x37
 800e7da:	b2d2      	uxtb	r2, r2
 800e7dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	011b      	lsls	r3, r3, #4
 800e7e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e7e4:	7dfb      	ldrb	r3, [r7, #23]
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	75fb      	strb	r3, [r7, #23]
 800e7f8:	7dfa      	ldrb	r2, [r7, #23]
 800e7fa:	79fb      	ldrb	r3, [r7, #7]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d3d3      	bcc.n	800e7a8 <IntToUnicode+0x18>
  }
}
 800e800:	bf00      	nop
 800e802:	bf00      	nop
 800e804:	371c      	adds	r7, #28
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
	...

0800e810 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b08a      	sub	sp, #40	; 0x28
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e818:	f107 0314 	add.w	r3, r7, #20
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	605a      	str	r2, [r3, #4]
 800e822:	609a      	str	r2, [r3, #8]
 800e824:	60da      	str	r2, [r3, #12]
 800e826:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e830:	d13a      	bne.n	800e8a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e832:	2300      	movs	r3, #0
 800e834:	613b      	str	r3, [r7, #16]
 800e836:	4b1e      	ldr	r3, [pc, #120]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e83a:	4a1d      	ldr	r2, [pc, #116]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e83c:	f043 0301 	orr.w	r3, r3, #1
 800e840:	6313      	str	r3, [r2, #48]	; 0x30
 800e842:	4b1b      	ldr	r3, [pc, #108]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e846:	f003 0301 	and.w	r3, r3, #1
 800e84a:	613b      	str	r3, [r7, #16]
 800e84c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e84e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e854:	2302      	movs	r3, #2
 800e856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e858:	2300      	movs	r3, #0
 800e85a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e85c:	2303      	movs	r3, #3
 800e85e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e860:	230a      	movs	r3, #10
 800e862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e864:	f107 0314 	add.w	r3, r7, #20
 800e868:	4619      	mov	r1, r3
 800e86a:	4812      	ldr	r0, [pc, #72]	; (800e8b4 <HAL_PCD_MspInit+0xa4>)
 800e86c:	f7f5 fb34 	bl	8003ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e870:	4b0f      	ldr	r3, [pc, #60]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e874:	4a0e      	ldr	r2, [pc, #56]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e87a:	6353      	str	r3, [r2, #52]	; 0x34
 800e87c:	2300      	movs	r3, #0
 800e87e:	60fb      	str	r3, [r7, #12]
 800e880:	4b0b      	ldr	r3, [pc, #44]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e884:	4a0a      	ldr	r2, [pc, #40]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e88a:	6453      	str	r3, [r2, #68]	; 0x44
 800e88c:	4b08      	ldr	r3, [pc, #32]	; (800e8b0 <HAL_PCD_MspInit+0xa0>)
 800e88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e894:	60fb      	str	r3, [r7, #12]
 800e896:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e898:	2200      	movs	r2, #0
 800e89a:	2100      	movs	r1, #0
 800e89c:	2043      	movs	r0, #67	; 0x43
 800e89e:	f7f4 fe68 	bl	8003572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e8a2:	2043      	movs	r0, #67	; 0x43
 800e8a4:	f7f4 fe81 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e8a8:	bf00      	nop
 800e8aa:	3728      	adds	r7, #40	; 0x28
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	40023800 	.word	0x40023800
 800e8b4:	40020000 	.word	0x40020000

0800e8b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	f7fe fb85 	bl	800cfde <USBD_LL_SetupStage>
}
 800e8d4:	bf00      	nop
 800e8d6:	3708      	adds	r7, #8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e8ee:	78fa      	ldrb	r2, [r7, #3]
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	00db      	lsls	r3, r3, #3
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	440b      	add	r3, r1
 800e8fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	78fb      	ldrb	r3, [r7, #3]
 800e904:	4619      	mov	r1, r3
 800e906:	f7fe fbbf 	bl	800d088 <USBD_LL_DataOutStage>
}
 800e90a:	bf00      	nop
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	460b      	mov	r3, r1
 800e91c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e924:	78fa      	ldrb	r2, [r7, #3]
 800e926:	6879      	ldr	r1, [r7, #4]
 800e928:	4613      	mov	r3, r2
 800e92a:	00db      	lsls	r3, r3, #3
 800e92c:	4413      	add	r3, r2
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	440b      	add	r3, r1
 800e932:	334c      	adds	r3, #76	; 0x4c
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	78fb      	ldrb	r3, [r7, #3]
 800e938:	4619      	mov	r1, r3
 800e93a:	f7fe fc58 	bl	800d1ee <USBD_LL_DataInStage>
}
 800e93e:	bf00      	nop
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b082      	sub	sp, #8
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e954:	4618      	mov	r0, r3
 800e956:	f7fe fd8c 	bl	800d472 <USBD_LL_SOF>
}
 800e95a:	bf00      	nop
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b084      	sub	sp, #16
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e96a:	2301      	movs	r3, #1
 800e96c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d102      	bne.n	800e97c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e976:	2300      	movs	r3, #0
 800e978:	73fb      	strb	r3, [r7, #15]
 800e97a:	e008      	b.n	800e98e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	2b02      	cmp	r3, #2
 800e982:	d102      	bne.n	800e98a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e984:	2301      	movs	r3, #1
 800e986:	73fb      	strb	r3, [r7, #15]
 800e988:	e001      	b.n	800e98e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e98a:	f7f2 fd67 	bl	800145c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e994:	7bfa      	ldrb	r2, [r7, #15]
 800e996:	4611      	mov	r1, r2
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fe fd2c 	bl	800d3f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fe fcd4 	bl	800d352 <USBD_LL_Reset>
}
 800e9aa:	bf00      	nop
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
	...

0800e9b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fe fd27 	bl	800d416 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	6812      	ldr	r2, [r2, #0]
 800e9d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9da:	f043 0301 	orr.w	r3, r3, #1
 800e9de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a1b      	ldr	r3, [r3, #32]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d005      	beq.n	800e9f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9e8:	4b04      	ldr	r3, [pc, #16]	; (800e9fc <HAL_PCD_SuspendCallback+0x48>)
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	4a03      	ldr	r2, [pc, #12]	; (800e9fc <HAL_PCD_SuspendCallback+0x48>)
 800e9ee:	f043 0306 	orr.w	r3, r3, #6
 800e9f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	e000ed00 	.word	0xe000ed00

0800ea00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fe fd17 	bl	800d442 <USBD_LL_Resume>
}
 800ea14:	bf00      	nop
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	460b      	mov	r3, r1
 800ea26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea2e:	78fa      	ldrb	r2, [r7, #3]
 800ea30:	4611      	mov	r1, r2
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fe fd6f 	bl	800d516 <USBD_LL_IsoOUTIncomplete>
}
 800ea38:	bf00      	nop
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea52:	78fa      	ldrb	r2, [r7, #3]
 800ea54:	4611      	mov	r1, r2
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fe fd2b 	bl	800d4b2 <USBD_LL_IsoINIncomplete>
}
 800ea5c:	bf00      	nop
 800ea5e:	3708      	adds	r7, #8
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe fd81 	bl	800d57a <USBD_LL_DevConnected>
}
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fe fd7e 	bl	800d590 <USBD_LL_DevDisconnected>
}
 800ea94:	bf00      	nop
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d13c      	bne.n	800eb26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eaac:	4a20      	ldr	r2, [pc, #128]	; (800eb30 <USBD_LL_Init+0x94>)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a1e      	ldr	r2, [pc, #120]	; (800eb30 <USBD_LL_Init+0x94>)
 800eab8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eabc:	4b1c      	ldr	r3, [pc, #112]	; (800eb30 <USBD_LL_Init+0x94>)
 800eabe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eac2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eac4:	4b1a      	ldr	r3, [pc, #104]	; (800eb30 <USBD_LL_Init+0x94>)
 800eac6:	2204      	movs	r2, #4
 800eac8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eaca:	4b19      	ldr	r3, [pc, #100]	; (800eb30 <USBD_LL_Init+0x94>)
 800eacc:	2202      	movs	r2, #2
 800eace:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ead0:	4b17      	ldr	r3, [pc, #92]	; (800eb30 <USBD_LL_Init+0x94>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ead6:	4b16      	ldr	r3, [pc, #88]	; (800eb30 <USBD_LL_Init+0x94>)
 800ead8:	2202      	movs	r2, #2
 800eada:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eadc:	4b14      	ldr	r3, [pc, #80]	; (800eb30 <USBD_LL_Init+0x94>)
 800eade:	2200      	movs	r2, #0
 800eae0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eae2:	4b13      	ldr	r3, [pc, #76]	; (800eb30 <USBD_LL_Init+0x94>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eae8:	4b11      	ldr	r3, [pc, #68]	; (800eb30 <USBD_LL_Init+0x94>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eaee:	4b10      	ldr	r3, [pc, #64]	; (800eb30 <USBD_LL_Init+0x94>)
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eaf4:	4b0e      	ldr	r3, [pc, #56]	; (800eb30 <USBD_LL_Init+0x94>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eafa:	480d      	ldr	r0, [pc, #52]	; (800eb30 <USBD_LL_Init+0x94>)
 800eafc:	f7f7 fd10 	bl	8006520 <HAL_PCD_Init>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eb06:	f7f2 fca9 	bl	800145c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eb0a:	2180      	movs	r1, #128	; 0x80
 800eb0c:	4808      	ldr	r0, [pc, #32]	; (800eb30 <USBD_LL_Init+0x94>)
 800eb0e:	f7f8 ff68 	bl	80079e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eb12:	2240      	movs	r2, #64	; 0x40
 800eb14:	2100      	movs	r1, #0
 800eb16:	4806      	ldr	r0, [pc, #24]	; (800eb30 <USBD_LL_Init+0x94>)
 800eb18:	f7f8 ff1c 	bl	8007954 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eb1c:	2280      	movs	r2, #128	; 0x80
 800eb1e:	2101      	movs	r1, #1
 800eb20:	4803      	ldr	r0, [pc, #12]	; (800eb30 <USBD_LL_Init+0x94>)
 800eb22:	f7f8 ff17 	bl	8007954 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	2000226c 	.word	0x2000226c

0800eb34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb40:	2300      	movs	r3, #0
 800eb42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7f7 fe05 	bl	800675a <HAL_PCD_Start>
 800eb50:	4603      	mov	r3, r0
 800eb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb54:	7bfb      	ldrb	r3, [r7, #15]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f000 f942 	bl	800ede0 <USBD_Get_USB_Status>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b084      	sub	sp, #16
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	4608      	mov	r0, r1
 800eb74:	4611      	mov	r1, r2
 800eb76:	461a      	mov	r2, r3
 800eb78:	4603      	mov	r3, r0
 800eb7a:	70fb      	strb	r3, [r7, #3]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	70bb      	strb	r3, [r7, #2]
 800eb80:	4613      	mov	r3, r2
 800eb82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb92:	78bb      	ldrb	r3, [r7, #2]
 800eb94:	883a      	ldrh	r2, [r7, #0]
 800eb96:	78f9      	ldrb	r1, [r7, #3]
 800eb98:	f7f8 fad6 	bl	8007148 <HAL_PCD_EP_Open>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	4618      	mov	r0, r3
 800eba4:	f000 f91c 	bl	800ede0 <USBD_Get_USB_Status>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebac:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b084      	sub	sp, #16
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebd0:	78fa      	ldrb	r2, [r7, #3]
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7f8 fb1f 	bl	8007218 <HAL_PCD_EP_Close>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebde:	7bfb      	ldrb	r3, [r7, #15]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f000 f8fd 	bl	800ede0 <USBD_Get_USB_Status>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebea:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec0e:	78fa      	ldrb	r2, [r7, #3]
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7f8 fbf7 	bl	8007406 <HAL_PCD_EP_SetStall>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec1c:	7bfb      	ldrb	r3, [r7, #15]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 f8de 	bl	800ede0 <USBD_Get_USB_Status>
 800ec24:	4603      	mov	r3, r0
 800ec26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b084      	sub	sp, #16
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec42:	2300      	movs	r3, #0
 800ec44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec4c:	78fa      	ldrb	r2, [r7, #3]
 800ec4e:	4611      	mov	r1, r2
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7f8 fc3c 	bl	80074ce <HAL_PCD_EP_ClrStall>
 800ec56:	4603      	mov	r3, r0
 800ec58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec5a:	7bfb      	ldrb	r3, [r7, #15]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 f8bf 	bl	800ede0 <USBD_Get_USB_Status>
 800ec62:	4603      	mov	r3, r0
 800ec64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	da0b      	bge.n	800eca4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec92:	68f9      	ldr	r1, [r7, #12]
 800ec94:	4613      	mov	r3, r2
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	4413      	add	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	440b      	add	r3, r1
 800ec9e:	333e      	adds	r3, #62	; 0x3e
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	e00b      	b.n	800ecbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eca4:	78fb      	ldrb	r3, [r7, #3]
 800eca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecaa:	68f9      	ldr	r1, [r7, #12]
 800ecac:	4613      	mov	r3, r2
 800ecae:	00db      	lsls	r3, r3, #3
 800ecb0:	4413      	add	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	440b      	add	r3, r1
 800ecb6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ecba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ece2:	78fa      	ldrb	r2, [r7, #3]
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7f8 fa09 	bl	80070fe <HAL_PCD_SetAddress>
 800ecec:	4603      	mov	r3, r0
 800ecee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 f874 	bl	800ede0 <USBD_Get_USB_Status>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b086      	sub	sp, #24
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	60f8      	str	r0, [r7, #12]
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	603b      	str	r3, [r7, #0]
 800ed12:	460b      	mov	r3, r1
 800ed14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed24:	7af9      	ldrb	r1, [r7, #11]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	f7f8 fb22 	bl	8007372 <HAL_PCD_EP_Transmit>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f000 f853 	bl	800ede0 <USBD_Get_USB_Status>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3718      	adds	r7, #24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	607a      	str	r2, [r7, #4]
 800ed52:	603b      	str	r3, [r7, #0]
 800ed54:	460b      	mov	r3, r1
 800ed56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed66:	7af9      	ldrb	r1, [r7, #11]
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	f7f8 fa9e 	bl	80072ac <HAL_PCD_EP_Receive>
 800ed70:	4603      	mov	r3, r0
 800ed72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed74:	7dfb      	ldrb	r3, [r7, #23]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 f832 	bl	800ede0 <USBD_Get_USB_Status>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed80:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3718      	adds	r7, #24
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	460b      	mov	r3, r1
 800ed94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed9c:	78fa      	ldrb	r2, [r7, #3]
 800ed9e:	4611      	mov	r1, r2
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7f8 face 	bl	8007342 <HAL_PCD_EP_GetRxCount>
 800eda6:	4603      	mov	r3, r0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800edb8:	4b03      	ldr	r3, [pc, #12]	; (800edc8 <USBD_static_malloc+0x18>)
}
 800edba:	4618      	mov	r0, r3
 800edbc:	370c      	adds	r7, #12
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	20002778 	.word	0x20002778

0800edcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]

}
 800edd4:	bf00      	nop
 800edd6:	370c      	adds	r7, #12
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d817      	bhi.n	800ee24 <USBD_Get_USB_Status+0x44>
 800edf4:	a201      	add	r2, pc, #4	; (adr r2, 800edfc <USBD_Get_USB_Status+0x1c>)
 800edf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfa:	bf00      	nop
 800edfc:	0800ee0d 	.word	0x0800ee0d
 800ee00:	0800ee13 	.word	0x0800ee13
 800ee04:	0800ee19 	.word	0x0800ee19
 800ee08:	0800ee1f 	.word	0x0800ee1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee10:	e00b      	b.n	800ee2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee12:	2303      	movs	r3, #3
 800ee14:	73fb      	strb	r3, [r7, #15]
    break;
 800ee16:	e008      	b.n	800ee2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee1c:	e005      	b.n	800ee2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee1e:	2303      	movs	r3, #3
 800ee20:	73fb      	strb	r3, [r7, #15]
    break;
 800ee22:	e002      	b.n	800ee2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee24:	2303      	movs	r3, #3
 800ee26:	73fb      	strb	r3, [r7, #15]
    break;
 800ee28:	bf00      	nop
  }
  return usb_status;
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3714      	adds	r7, #20
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <Encoder_Init>:
TIM_HandleTypeDef Tim_Encoder;

static uint16_t newCount;
static uint16_t prevCount;

void Encoder_Init(void) {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	af00      	add	r7, sp, #0
  HAL_TIM_Encoder_Start(&Tim_Encoder, TIM_CHANNEL_ALL);
 800ee3c:	213c      	movs	r1, #60	; 0x3c
 800ee3e:	480e      	ldr	r0, [pc, #56]	; (800ee78 <Encoder_Init+0x40>)
 800ee40:	f7f9 ff6c 	bl	8008d1c <HAL_TIM_Encoder_Start>
  HAL_Delay(1);
 800ee44:	2001      	movs	r0, #1
 800ee46:	f7f3 fb0b 	bl	8002460 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&Tim_Encoder, 0x8000);
 800ee4a:	4b0b      	ldr	r3, [pc, #44]	; (800ee78 <Encoder_Init+0x40>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ee52:	625a      	str	r2, [r3, #36]	; 0x24
  newCount=__HAL_TIM_GET_COUNTER(&Tim_Encoder);
 800ee54:	4b08      	ldr	r3, [pc, #32]	; (800ee78 <Encoder_Init+0x40>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <Encoder_Init+0x44>)
 800ee5e:	801a      	strh	r2, [r3, #0]
  newCount=newCount>>1;
 800ee60:	4b06      	ldr	r3, [pc, #24]	; (800ee7c <Encoder_Init+0x44>)
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	085b      	lsrs	r3, r3, #1
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <Encoder_Init+0x44>)
 800ee6a:	801a      	strh	r2, [r3, #0]
  prevCount=newCount;
 800ee6c:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <Encoder_Init+0x44>)
 800ee6e:	881a      	ldrh	r2, [r3, #0]
 800ee70:	4b03      	ldr	r3, [pc, #12]	; (800ee80 <Encoder_Init+0x48>)
 800ee72:	801a      	strh	r2, [r3, #0]
}
 800ee74:	bf00      	nop
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	20000580 	.word	0x20000580
 800ee7c:	20002998 	.word	0x20002998
 800ee80:	2000299a 	.word	0x2000299a

0800ee84 <Encoder_Read>:

uint16_t Encoder_Read() {
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
  uint16_t val = __HAL_TIM_GET_COUNTER(&Tim_Encoder);
 800ee8a:	4b06      	ldr	r3, [pc, #24]	; (800eea4 <Encoder_Read+0x20>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee90:	80fb      	strh	r3, [r7, #6]
  return (val >> 1);
 800ee92:	88fb      	ldrh	r3, [r7, #6]
 800ee94:	085b      	lsrs	r3, r3, #1
 800ee96:	b29b      	uxth	r3, r3
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	20000580 	.word	0x20000580

0800eea8 <Encoder_Get_Status>:

Encoder_Status Encoder_Get_Status() {
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	af00      	add	r7, sp, #0
	  newCount = Encoder_Read();
 800eeac:	f7ff ffea 	bl	800ee84 <Encoder_Read>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	4b0e      	ldr	r3, [pc, #56]	; (800eef0 <Encoder_Get_Status+0x48>)
 800eeb6:	801a      	strh	r2, [r3, #0]
	  if (newCount != prevCount)
 800eeb8:	4b0d      	ldr	r3, [pc, #52]	; (800eef0 <Encoder_Get_Status+0x48>)
 800eeba:	881a      	ldrh	r2, [r3, #0]
 800eebc:	4b0d      	ldr	r3, [pc, #52]	; (800eef4 <Encoder_Get_Status+0x4c>)
 800eebe:	881b      	ldrh	r3, [r3, #0]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d012      	beq.n	800eeea <Encoder_Get_Status+0x42>
	  {
	    if (newCount > prevCount)
 800eec4:	4b0a      	ldr	r3, [pc, #40]	; (800eef0 <Encoder_Get_Status+0x48>)
 800eec6:	881a      	ldrh	r2, [r3, #0]
 800eec8:	4b0a      	ldr	r3, [pc, #40]	; (800eef4 <Encoder_Get_Status+0x4c>)
 800eeca:	881b      	ldrh	r3, [r3, #0]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d905      	bls.n	800eedc <Encoder_Get_Status+0x34>
	    	{
	    	prevCount = newCount;
 800eed0:	4b07      	ldr	r3, [pc, #28]	; (800eef0 <Encoder_Get_Status+0x48>)
 800eed2:	881a      	ldrh	r2, [r3, #0]
 800eed4:	4b07      	ldr	r3, [pc, #28]	; (800eef4 <Encoder_Get_Status+0x4c>)
 800eed6:	801a      	strh	r2, [r3, #0]
	    	return (Incremented);
 800eed8:	2301      	movs	r3, #1
 800eeda:	e007      	b.n	800eeec <Encoder_Get_Status+0x44>
	    	} else {
	    			prevCount = newCount;
 800eedc:	4b04      	ldr	r3, [pc, #16]	; (800eef0 <Encoder_Get_Status+0x48>)
 800eede:	881a      	ldrh	r2, [r3, #0]
 800eee0:	4b04      	ldr	r3, [pc, #16]	; (800eef4 <Encoder_Get_Status+0x4c>)
 800eee2:	801a      	strh	r2, [r3, #0]
	    			return (Decremented);
 800eee4:	f04f 33ff 	mov.w	r3, #4294967295
 800eee8:	e000      	b.n	800eeec <Encoder_Get_Status+0x44>
	    			}
	  }
	  return (Neutral);
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	20002998 	.word	0x20002998
 800eef4:	2000299a 	.word	0x2000299a

0800eef8 <Encoder_Config>:
  * @brief TIM3 Initialization Function (Encoder Mode)
  * @param None
  * @retval None
  */
void Encoder_Config(void)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b08c      	sub	sp, #48	; 0x30
 800eefc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800eefe:	f107 030c 	add.w	r3, r7, #12
 800ef02:	2224      	movs	r2, #36	; 0x24
 800ef04:	2100      	movs	r1, #0
 800ef06:	4618      	mov	r0, r3
 800ef08:	f000 faf4 	bl	800f4f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ef0c:	1d3b      	adds	r3, r7, #4
 800ef0e:	2200      	movs	r2, #0
 800ef10:	601a      	str	r2, [r3, #0]
 800ef12:	605a      	str	r2, [r3, #4]

  HAL_TIM_Base_MspDeInit(&Tim_Encoder);
 800ef14:	481e      	ldr	r0, [pc, #120]	; (800ef90 <Encoder_Config+0x98>)
 800ef16:	f7f3 f85f 	bl	8001fd8 <HAL_TIM_Base_MspDeInit>

  Tim_Encoder.Instance = TIM3;
 800ef1a:	4b1d      	ldr	r3, [pc, #116]	; (800ef90 <Encoder_Config+0x98>)
 800ef1c:	4a1d      	ldr	r2, [pc, #116]	; (800ef94 <Encoder_Config+0x9c>)
 800ef1e:	601a      	str	r2, [r3, #0]
  Tim_Encoder.Instance = TIM1;
 800ef20:	4b1b      	ldr	r3, [pc, #108]	; (800ef90 <Encoder_Config+0x98>)
 800ef22:	4a1d      	ldr	r2, [pc, #116]	; (800ef98 <Encoder_Config+0xa0>)
 800ef24:	601a      	str	r2, [r3, #0]
  Tim_Encoder.Init.Prescaler = 0;
 800ef26:	4b1a      	ldr	r3, [pc, #104]	; (800ef90 <Encoder_Config+0x98>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	605a      	str	r2, [r3, #4]
  Tim_Encoder.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ef2c:	4b18      	ldr	r3, [pc, #96]	; (800ef90 <Encoder_Config+0x98>)
 800ef2e:	2200      	movs	r2, #0
 800ef30:	609a      	str	r2, [r3, #8]
  Tim_Encoder.Init.Period = 65535;
 800ef32:	4b17      	ldr	r3, [pc, #92]	; (800ef90 <Encoder_Config+0x98>)
 800ef34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef38:	60da      	str	r2, [r3, #12]
  Tim_Encoder.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ef3a:	4b15      	ldr	r3, [pc, #84]	; (800ef90 <Encoder_Config+0x98>)
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	611a      	str	r2, [r3, #16]
  Tim_Encoder.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ef40:	4b13      	ldr	r3, [pc, #76]	; (800ef90 <Encoder_Config+0x98>)
 800ef42:	2200      	movs	r2, #0
 800ef44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800ef46:	2301      	movs	r3, #1
 800ef48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;     // Capture performed each time an edge is detected on the capture input
 800ef52:	2300      	movs	r3, #0
 800ef54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ef56:	2300      	movs	r3, #0
 800ef58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;     // Capture performed each time an edge is detected on the capture input
 800ef62:	2300      	movs	r3, #0
 800ef64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ef66:	2300      	movs	r3, #0
 800ef68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  HAL_TIM_Encoder_Init(&Tim_Encoder, &sConfig);
 800ef6a:	f107 030c 	add.w	r3, r7, #12
 800ef6e:	4619      	mov	r1, r3
 800ef70:	4807      	ldr	r0, [pc, #28]	; (800ef90 <Encoder_Config+0x98>)
 800ef72:	f7f9 fe1f 	bl	8008bb4 <HAL_TIM_Encoder_Init>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ef76:	2300      	movs	r3, #0
 800ef78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	60bb      	str	r3, [r7, #8]
  
  HAL_TIMEx_MasterConfigSynchronization(&Tim_Encoder, &sMasterConfig);
 800ef7e:	1d3b      	adds	r3, r7, #4
 800ef80:	4619      	mov	r1, r3
 800ef82:	4803      	ldr	r0, [pc, #12]	; (800ef90 <Encoder_Config+0x98>)
 800ef84:	f7fa fb5a 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
}
 800ef88:	bf00      	nop
 800ef8a:	3730      	adds	r7, #48	; 0x30
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	20000580 	.word	0x20000580
 800ef94:	40000400 	.word	0x40000400
 800ef98:	40010000 	.word	0x40010000

0800ef9c <RTC_update_and_Terminal>:
}

///////////////////////////////////////////////

uint32_t RTC_update_and_Terminal(uint32_t Period_update_ms)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
    //						0,//uint32_t SecondFraction;parameter corresponds to a time unit range between [0-1] Second with [1 Sec / SecondFraction +1] granularity
    //						0,//uint32_t DayLightSaving;  This interface is deprecated.
    //						0//uint32_t StoreOperation;

  if(
	  (HAL_GetTick() - Tick_old) > 1999
 800efa4:	f7f3 fa50 	bl	8002448 <HAL_GetTick>
 800efa8:	4602      	mov	r2, r0
 800efaa:	4b19      	ldr	r3, [pc, #100]	; (800f010 <RTC_update_and_Terminal+0x74>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	1ad3      	subs	r3, r2, r3
  if(
 800efb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800efb4:	d30e      	bcc.n	800efd4 <RTC_update_and_Terminal+0x38>
	){
	  Tick_old=HAL_GetTick();
 800efb6:	f7f3 fa47 	bl	8002448 <HAL_GetTick>
 800efba:	4603      	mov	r3, r0
 800efbc:	4a14      	ldr	r2, [pc, #80]	; (800f010 <RTC_update_and_Terminal+0x74>)
 800efbe:	6013      	str	r3, [r2, #0]
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800efc0:	2200      	movs	r2, #0
 800efc2:	4914      	ldr	r1, [pc, #80]	; (800f014 <RTC_update_and_Terminal+0x78>)
 800efc4:	4814      	ldr	r0, [pc, #80]	; (800f018 <RTC_update_and_Terminal+0x7c>)
 800efc6:	f7f9 fb19 	bl	80085fc <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800efca:	2200      	movs	r2, #0
 800efcc:	4913      	ldr	r1, [pc, #76]	; (800f01c <RTC_update_and_Terminal+0x80>)
 800efce:	4812      	ldr	r0, [pc, #72]	; (800f018 <RTC_update_and_Terminal+0x7c>)
 800efd0:	f7f9 fb72 	bl	80086b8 <HAL_RTC_GetDate>
	 }

	if(Sekunden != sTime.Seconds){
 800efd4:	4b0f      	ldr	r3, [pc, #60]	; (800f014 <RTC_update_and_Terminal+0x78>)
 800efd6:	789a      	ldrb	r2, [r3, #2]
 800efd8:	4b11      	ldr	r3, [pc, #68]	; (800f020 <RTC_update_and_Terminal+0x84>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d010      	beq.n	800f002 <RTC_update_and_Terminal+0x66>
		Sekunden = sTime.Seconds;
 800efe0:	4b0c      	ldr	r3, [pc, #48]	; (800f014 <RTC_update_and_Terminal+0x78>)
 800efe2:	789a      	ldrb	r2, [r3, #2]
 800efe4:	4b0e      	ldr	r3, [pc, #56]	; (800f020 <RTC_update_and_Terminal+0x84>)
 800efe6:	701a      	strb	r2, [r3, #0]
		Minuten  = sTime.Minutes;
 800efe8:	4b0a      	ldr	r3, [pc, #40]	; (800f014 <RTC_update_and_Terminal+0x78>)
 800efea:	785a      	ldrb	r2, [r3, #1]
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <RTC_update_and_Terminal+0x88>)
 800efee:	701a      	strb	r2, [r3, #0]
		Uhr      = sTime.Hours;
 800eff0:	4b08      	ldr	r3, [pc, #32]	; (800f014 <RTC_update_and_Terminal+0x78>)
 800eff2:	781a      	ldrb	r2, [r3, #0]
 800eff4:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <RTC_update_and_Terminal+0x8c>)
 800eff6:	701a      	strb	r2, [r3, #0]
		Get_Time_output(&Uhr, &Minuten, &Sekunden);
 800eff8:	4a09      	ldr	r2, [pc, #36]	; (800f020 <RTC_update_and_Terminal+0x84>)
 800effa:	490a      	ldr	r1, [pc, #40]	; (800f024 <RTC_update_and_Terminal+0x88>)
 800effc:	480a      	ldr	r0, [pc, #40]	; (800f028 <RTC_update_and_Terminal+0x8c>)
 800effe:	f000 f83f 	bl	800f080 <Get_Time_output>
		//cnt++;
		}
	//return (cnt);
	return (Tick_old);
 800f002:	4b03      	ldr	r3, [pc, #12]	; (800f010 <RTC_update_and_Terminal+0x74>)
 800f004:	681b      	ldr	r3, [r3, #0]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	2000299c 	.word	0x2000299c
 800f014:	20000494 	.word	0x20000494
 800f018:	2000055c 	.word	0x2000055c
 800f01c:	20000490 	.word	0x20000490
 800f020:	200029a0 	.word	0x200029a0
 800f024:	200029a1 	.word	0x200029a1
 800f028:	200029a2 	.word	0x200029a2

0800f02c <GPIO_Blink_Test>:

////////////////////////////////////////////////////////////////////////////

void GPIO_Blink_Test(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t Count_of_Blink, uint16_t Period_of_blink_ms)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	4608      	mov	r0, r1
 800f036:	4611      	mov	r1, r2
 800f038:	461a      	mov	r2, r3
 800f03a:	4603      	mov	r3, r0
 800f03c:	817b      	strh	r3, [r7, #10]
 800f03e:	460b      	mov	r3, r1
 800f040:	727b      	strb	r3, [r7, #9]
 800f042:	4613      	mov	r3, r2
 800f044:	80fb      	strh	r3, [r7, #6]
	for(uint8_t cnt=0;cnt<Count_of_Blink;cnt++)
 800f046:	2300      	movs	r3, #0
 800f048:	75fb      	strb	r3, [r7, #23]
 800f04a:	e00b      	b.n	800f064 <GPIO_Blink_Test+0x38>
	{
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin );
 800f04c:	897b      	ldrh	r3, [r7, #10]
 800f04e:	4619      	mov	r1, r3
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f7f5 f8f6 	bl	8004242 <HAL_GPIO_TogglePin>
	HAL_Delay(Period_of_blink_ms);
 800f056:	88fb      	ldrh	r3, [r7, #6]
 800f058:	4618      	mov	r0, r3
 800f05a:	f7f3 fa01 	bl	8002460 <HAL_Delay>
	for(uint8_t cnt=0;cnt<Count_of_Blink;cnt++)
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
 800f060:	3301      	adds	r3, #1
 800f062:	75fb      	strb	r3, [r7, #23]
 800f064:	7dfa      	ldrb	r2, [r7, #23]
 800f066:	7a7b      	ldrb	r3, [r7, #9]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d3ef      	bcc.n	800f04c <GPIO_Blink_Test+0x20>
	}
	  //HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800f06c:	897b      	ldrh	r3, [r7, #10]
 800f06e:	2200      	movs	r2, #0
 800f070:	4619      	mov	r1, r3
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	f7f5 f8cc 	bl	8004210 <HAL_GPIO_WritePin>
}
 800f078:	bf00      	nop
 800f07a:	3718      	adds	r7, #24
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <Get_Time_output>:


//////////////////////////////////////////////////////////////////////////////////

void Get_Time_output(uint8_t *Uhren,uint8_t *Minutn,uint8_t *Sekundn)
{
 800f080:	b5b0      	push	{r4, r5, r7, lr}
 800f082:	b090      	sub	sp, #64	; 0x40
 800f084:	af02      	add	r7, sp, #8
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
//Time output
	char Array_char_x_32[32]={0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08};
 800f08c:	4b22      	ldr	r3, [pc, #136]	; (800f118 <Get_Time_output+0x98>)
 800f08e:	f107 0414 	add.w	r4, r7, #20
 800f092:	461d      	mov	r5, r3
 800f094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	7023      	strb	r3, [r4, #0]
 800f09c:	f107 0325 	add.w	r3, r7, #37	; 0x25
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	605a      	str	r2, [r3, #4]
 800f0a6:	609a      	str	r2, [r3, #8]
 800f0a8:	f8c3 200b 	str.w	r2, [r3, #11]
	//		0,//uint8_t TimeFormat;Specifies the RTC AM/PM Time.
	//		0,//uint32_t SecondFraction;parameter corresponds to a time unit range between [0-1] Second with [1 Sec / SecondFraction +1] granularity
	//		0,//uint32_t DayLightSaving;  This interface is deprecated.
	//		0 //uint32_t StoreOperation;

		while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
 800f0ac:	bf00      	nop
 800f0ae:	4b1b      	ldr	r3, [pc, #108]	; (800f11c <Get_Time_output+0x9c>)
 800f0b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	2b20      	cmp	r3, #32
 800f0b8:	d1f9      	bne.n	800f0ae <Get_Time_output+0x2e>
		Length_Msg=sprintf( 8+Array_char_x_32 ,
 800f0ba:	f107 0014 	add.w	r0, r7, #20
 800f0be:	3008      	adds	r0, #8
							"%02d.%02d.%02d", //  System
							*Uhren, *Minutn, *Sekundn);//	sTime.Hours, sTime.Minutes, sTime.Seconds
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
		Length_Msg=sprintf( 8+Array_char_x_32 ,
 800f0c4:	461a      	mov	r2, r3
							*Uhren, *Minutn, *Sekundn);//	sTime.Hours, sTime.Minutes, sTime.Seconds
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
		Length_Msg=sprintf( 8+Array_char_x_32 ,
 800f0ca:	4619      	mov	r1, r3
							*Uhren, *Minutn, *Sekundn);//	sTime.Hours, sTime.Minutes, sTime.Seconds
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
		Length_Msg=sprintf( 8+Array_char_x_32 ,
 800f0d0:	9300      	str	r3, [sp, #0]
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	4912      	ldr	r1, [pc, #72]	; (800f120 <Get_Time_output+0xa0>)
 800f0d6:	f000 f9ed 	bl	800f4b4 <siprintf>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	86fb      	strh	r3, [r7, #54]	; 0x36

		HAL_UART_Transmit_IT( &TerminalInterface, (uint8_t*)(Array_char_x_32), Length_Msg+8);
 800f0de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	f107 0314 	add.w	r3, r7, #20
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	480c      	ldr	r0, [pc, #48]	; (800f11c <Get_Time_output+0x9c>)
 800f0ec:	f7fa fb9a 	bl	8009824 <HAL_UART_Transmit_IT>
		//CDC_Transmit_FS  (                   (uint8_t*)(Array_char_x_32), Length_Msg+8  );
		LCD_SetPos(0, 1);	            HAL_Delay(1);
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	f000 f8da 	bl	800f2ac <LCD_SetPos>
 800f0f8:	2001      	movs	r0, #1
 800f0fa:	f7f3 f9b1 	bl	8002460 <HAL_Delay>
		LCD_String(8+Array_char_x_32);  HAL_Delay(1);
 800f0fe:	f107 0314 	add.w	r3, r7, #20
 800f102:	3308      	adds	r3, #8
 800f104:	4618      	mov	r0, r3
 800f106:	f000 f8b3 	bl	800f270 <LCD_String>
 800f10a:	2001      	movs	r0, #1
 800f10c:	f7f3 f9a8 	bl	8002460 <HAL_Delay>
		//while(TerminalInterface.gState != HAL_UART_STATE_READY){;}
}
 800f110:	bf00      	nop
 800f112:	3738      	adds	r7, #56	; 0x38
 800f114:	46bd      	mov	sp, r7
 800f116:	bdb0      	pop	{r4, r5, r7, pc}
 800f118:	0801002c 	.word	0x0801002c
 800f11c:	20000c54 	.word	0x20000c54
 800f120:	0801001c 	.word	0x0801001c

0800f124 <DelayMicro>:
extern I2C_HandleTypeDef hi2c1;
char str1[100];
uint8_t portlcd; //������ ��� �������� ������ ����� ���������� ����������
//------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
	micros *=(SystemCoreClock / 1000000) / 5;
 800f12c:	4b0b      	ldr	r3, [pc, #44]	; (800f15c <DelayMicro+0x38>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4a0b      	ldr	r2, [pc, #44]	; (800f160 <DelayMicro+0x3c>)
 800f132:	fba2 2303 	umull	r2, r3, r2, r3
 800f136:	0d5b      	lsrs	r3, r3, #21
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	fb02 f303 	mul.w	r3, r2, r3
 800f13e:	607b      	str	r3, [r7, #4]
	while (micros--);
 800f140:	bf00      	nop
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	1e5a      	subs	r2, r3, #1
 800f146:	607a      	str	r2, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1fa      	bne.n	800f142 <DelayMicro+0x1e>
//	DWT->CYCCNT = 0; // reset the counter
//	while( (DWT->CYCCNT / (HAL_RCC_GetSysClockFreq()/1000000) ) < (micros-1) );
}
 800f14c:	bf00      	nop
 800f14e:	bf00      	nop
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	20000010 	.word	0x20000010
 800f160:	6b5fca6b 	.word	0x6b5fca6b

0800f164 <LCD_WriteByteI2CLCD>:
//------------------------------------------------
void LCD_WriteByteI2CLCD(uint8_t bt)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af02      	add	r7, sp, #8
 800f16a:	4603      	mov	r3, r0
 800f16c:	71fb      	strb	r3, [r7, #7]
	buf[0]=bt;
 800f16e:	4a08      	ldr	r2, [pc, #32]	; (800f190 <LCD_WriteByteI2CLCD+0x2c>)
 800f170:	79fb      	ldrb	r3, [r7, #7]
 800f172:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) 0x4E,buf,1,1000);
 800f174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f178:	9300      	str	r3, [sp, #0]
 800f17a:	2301      	movs	r3, #1
 800f17c:	4a04      	ldr	r2, [pc, #16]	; (800f190 <LCD_WriteByteI2CLCD+0x2c>)
 800f17e:	214e      	movs	r1, #78	; 0x4e
 800f180:	4804      	ldr	r0, [pc, #16]	; (800f194 <LCD_WriteByteI2CLCD+0x30>)
 800f182:	f7f5 f9f9 	bl	8004578 <HAL_I2C_Master_Transmit>
}
 800f186:	bf00      	nop
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	200029a4 	.word	0x200029a4
 800f194:	2000040c 	.word	0x2000040c

0800f198 <sendhalfbyte>:
//------------------------------------------------
void sendhalfbyte(uint8_t c)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	71fb      	strb	r3, [r7, #7]
	c<<=4;
 800f1a2:	79fb      	ldrb	r3, [r7, #7]
 800f1a4:	011b      	lsls	r3, r3, #4
 800f1a6:	71fb      	strb	r3, [r7, #7]
	e_set();//�������� ����� E
 800f1a8:	4b14      	ldr	r3, [pc, #80]	; (800f1fc <sendhalfbyte+0x64>)
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	f043 0304 	orr.w	r3, r3, #4
 800f1b0:	b2da      	uxtb	r2, r3
 800f1b2:	4b12      	ldr	r3, [pc, #72]	; (800f1fc <sendhalfbyte+0x64>)
 800f1b4:	701a      	strb	r2, [r3, #0]
 800f1b6:	4b11      	ldr	r3, [pc, #68]	; (800f1fc <sendhalfbyte+0x64>)
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff ffd2 	bl	800f164 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 800f1c0:	2032      	movs	r0, #50	; 0x32
 800f1c2:	f7ff ffaf 	bl	800f124 <DelayMicro>
	LCD_WriteByteI2CLCD(portlcd|c);
 800f1c6:	4b0d      	ldr	r3, [pc, #52]	; (800f1fc <sendhalfbyte+0x64>)
 800f1c8:	781a      	ldrb	r2, [r3, #0]
 800f1ca:	79fb      	ldrb	r3, [r7, #7]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7ff ffc7 	bl	800f164 <LCD_WriteByteI2CLCD>
	e_reset();//��������� ����� E
 800f1d6:	4b09      	ldr	r3, [pc, #36]	; (800f1fc <sendhalfbyte+0x64>)
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	f023 0304 	bic.w	r3, r3, #4
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	4b06      	ldr	r3, [pc, #24]	; (800f1fc <sendhalfbyte+0x64>)
 800f1e2:	701a      	strb	r2, [r3, #0]
 800f1e4:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <sendhalfbyte+0x64>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7ff ffbb 	bl	800f164 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 800f1ee:	2032      	movs	r0, #50	; 0x32
 800f1f0:	f7ff ff98 	bl	800f124 <DelayMicro>
}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	200029a5 	.word	0x200029a5

0800f200 <sendbyte>:
//------------------------------------------------
void sendbyte(uint8_t c, uint8_t mode)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	460a      	mov	r2, r1
 800f20a:	71fb      	strb	r3, [r7, #7]
 800f20c:	4613      	mov	r3, r2
 800f20e:	71bb      	strb	r3, [r7, #6]
	if(mode==0) rs_reset();
 800f210:	79bb      	ldrb	r3, [r7, #6]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10c      	bne.n	800f230 <sendbyte+0x30>
 800f216:	4b15      	ldr	r3, [pc, #84]	; (800f26c <sendbyte+0x6c>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	f023 0301 	bic.w	r3, r3, #1
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	4b12      	ldr	r3, [pc, #72]	; (800f26c <sendbyte+0x6c>)
 800f222:	701a      	strb	r2, [r3, #0]
 800f224:	4b11      	ldr	r3, [pc, #68]	; (800f26c <sendbyte+0x6c>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	4618      	mov	r0, r3
 800f22a:	f7ff ff9b 	bl	800f164 <LCD_WriteByteI2CLCD>
 800f22e:	e00b      	b.n	800f248 <sendbyte+0x48>
	else rs_set();
 800f230:	4b0e      	ldr	r3, [pc, #56]	; (800f26c <sendbyte+0x6c>)
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	f043 0301 	orr.w	r3, r3, #1
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	4b0c      	ldr	r3, [pc, #48]	; (800f26c <sendbyte+0x6c>)
 800f23c:	701a      	strb	r2, [r3, #0]
 800f23e:	4b0b      	ldr	r3, [pc, #44]	; (800f26c <sendbyte+0x6c>)
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff ff8e 	bl	800f164 <LCD_WriteByteI2CLCD>
	uint8_t hc=0;
 800f248:	2300      	movs	r3, #0
 800f24a:	73fb      	strb	r3, [r7, #15]
	hc=c>>4;
 800f24c:	79fb      	ldrb	r3, [r7, #7]
 800f24e:	091b      	lsrs	r3, r3, #4
 800f250:	73fb      	strb	r3, [r7, #15]
	sendhalfbyte(hc);sendhalfbyte(c);
 800f252:	7bfb      	ldrb	r3, [r7, #15]
 800f254:	4618      	mov	r0, r3
 800f256:	f7ff ff9f 	bl	800f198 <sendhalfbyte>
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff ff9b 	bl	800f198 <sendhalfbyte>
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	200029a5 	.word	0x200029a5

0800f270 <LCD_String>:
{
	sendbyte(ch,1);
}
//------------------------------------------------
void LCD_String(char* st)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 800f278:	2300      	movs	r3, #0
 800f27a:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 800f27c:	e00a      	b.n	800f294 <LCD_String+0x24>
	{
		sendbyte(st[i],1);
 800f27e:	7bfb      	ldrb	r3, [r7, #15]
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	4413      	add	r3, r2
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2101      	movs	r1, #1
 800f288:	4618      	mov	r0, r3
 800f28a:	f7ff ffb9 	bl	800f200 <sendbyte>
		i++;
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
 800f290:	3301      	adds	r3, #1
 800f292:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 800f294:	7bfb      	ldrb	r3, [r7, #15]
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	4413      	add	r3, r2
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1ee      	bne.n	800f27e <LCD_String+0xe>
	}
}
 800f2a0:	bf00      	nop
 800f2a2:	bf00      	nop
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
	...

0800f2ac <LCD_SetPos>:
//------------------------------------------------
void LCD_SetPos(uint8_t x, uint8_t y)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	460a      	mov	r2, r1
 800f2b6:	71fb      	strb	r3, [r7, #7]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	71bb      	strb	r3, [r7, #6]
	switch(y)
 800f2bc:	79bb      	ldrb	r3, [r7, #6]
 800f2be:	2b03      	cmp	r3, #3
 800f2c0:	d846      	bhi.n	800f350 <LCD_SetPos+0xa4>
 800f2c2:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <LCD_SetPos+0x1c>)
 800f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c8:	0800f2d9 	.word	0x0800f2d9
 800f2cc:	0800f2f1 	.word	0x0800f2f1
 800f2d0:	0800f311 	.word	0x0800f311
 800f2d4:	0800f331 	.word	0x0800f331
	{
		case 0:
			sendbyte(x|0x80,0);
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff ff8c 	bl	800f200 <sendbyte>
			HAL_Delay(1);
 800f2e8:	2001      	movs	r0, #1
 800f2ea:	f7f3 f8b9 	bl	8002460 <HAL_Delay>
			break;
 800f2ee:	e02f      	b.n	800f350 <LCD_SetPos+0xa4>
		case 1:
			sendbyte((0x40+x)|0x80,0);
 800f2f0:	79fb      	ldrb	r3, [r7, #7]
 800f2f2:	3340      	adds	r3, #64	; 0x40
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	b25b      	sxtb	r3, r3
 800f2f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2fc:	b25b      	sxtb	r3, r3
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2100      	movs	r1, #0
 800f302:	4618      	mov	r0, r3
 800f304:	f7ff ff7c 	bl	800f200 <sendbyte>
			HAL_Delay(1);
 800f308:	2001      	movs	r0, #1
 800f30a:	f7f3 f8a9 	bl	8002460 <HAL_Delay>
			break;
 800f30e:	e01f      	b.n	800f350 <LCD_SetPos+0xa4>
		case 2:
			sendbyte((0x14+x)|0x80,0);
 800f310:	79fb      	ldrb	r3, [r7, #7]
 800f312:	3314      	adds	r3, #20
 800f314:	b2db      	uxtb	r3, r3
 800f316:	b25b      	sxtb	r3, r3
 800f318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f31c:	b25b      	sxtb	r3, r3
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	2100      	movs	r1, #0
 800f322:	4618      	mov	r0, r3
 800f324:	f7ff ff6c 	bl	800f200 <sendbyte>
			HAL_Delay(1);
 800f328:	2001      	movs	r0, #1
 800f32a:	f7f3 f899 	bl	8002460 <HAL_Delay>
			break;
 800f32e:	e00f      	b.n	800f350 <LCD_SetPos+0xa4>
		case 3:
			sendbyte((0x54+x)|0x80,0);
 800f330:	79fb      	ldrb	r3, [r7, #7]
 800f332:	3354      	adds	r3, #84	; 0x54
 800f334:	b2db      	uxtb	r3, r3
 800f336:	b25b      	sxtb	r3, r3
 800f338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f33c:	b25b      	sxtb	r3, r3
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	2100      	movs	r1, #0
 800f342:	4618      	mov	r0, r3
 800f344:	f7ff ff5c 	bl	800f200 <sendbyte>
			HAL_Delay(1);
 800f348:	2001      	movs	r0, #1
 800f34a:	f7f3 f889 	bl	8002460 <HAL_Delay>
			break;
 800f34e:	bf00      	nop
	}
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <LCD_ini>:
//------------------------------------------------
void LCD_ini(void)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 800f35c:	200f      	movs	r0, #15
 800f35e:	f7f3 f87f 	bl	8002460 <HAL_Delay>
	sendhalfbyte(0x03);
 800f362:	2003      	movs	r0, #3
 800f364:	f7ff ff18 	bl	800f198 <sendhalfbyte>
	HAL_Delay(4);
 800f368:	2004      	movs	r0, #4
 800f36a:	f7f3 f879 	bl	8002460 <HAL_Delay>
	sendhalfbyte(0x03);
 800f36e:	2003      	movs	r0, #3
 800f370:	f7ff ff12 	bl	800f198 <sendhalfbyte>
	DelayMicro(100);
 800f374:	2064      	movs	r0, #100	; 0x64
 800f376:	f7ff fed5 	bl	800f124 <DelayMicro>
	sendhalfbyte(0x03);
 800f37a:	2003      	movs	r0, #3
 800f37c:	f7ff ff0c 	bl	800f198 <sendhalfbyte>
	HAL_Delay(1);
 800f380:	2001      	movs	r0, #1
 800f382:	f7f3 f86d 	bl	8002460 <HAL_Delay>
	sendhalfbyte(0x02);
 800f386:	2002      	movs	r0, #2
 800f388:	f7ff ff06 	bl	800f198 <sendhalfbyte>
	HAL_Delay(1);
 800f38c:	2001      	movs	r0, #1
 800f38e:	f7f3 f867 	bl	8002460 <HAL_Delay>
	sendbyte(0x28,0);//����� 4 ���, 2 ����� (��� ������ �������� ������� ��� 4 �����, ����� 5�8	
 800f392:	2100      	movs	r1, #0
 800f394:	2028      	movs	r0, #40	; 0x28
 800f396:	f7ff ff33 	bl	800f200 <sendbyte>
	HAL_Delay(1);
 800f39a:	2001      	movs	r0, #1
 800f39c:	f7f3 f860 	bl	8002460 <HAL_Delay>
	sendbyte(0x0C,0);//������� �������� (D=1), ������� ������� �� �����
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	200c      	movs	r0, #12
 800f3a4:	f7ff ff2c 	bl	800f200 <sendbyte>
	HAL_Delay(1);
 800f3a8:	2001      	movs	r0, #1
 800f3aa:	f7f3 f859 	bl	8002460 <HAL_Delay>
	sendbyte(0x01,0);//������ �����
 800f3ae:	2100      	movs	r1, #0
 800f3b0:	2001      	movs	r0, #1
 800f3b2:	f7ff ff25 	bl	800f200 <sendbyte>
	HAL_Delay(2);
 800f3b6:	2002      	movs	r0, #2
 800f3b8:	f7f3 f852 	bl	8002460 <HAL_Delay>
	sendbyte(0x06,0);//����� �����
 800f3bc:	2100      	movs	r1, #0
 800f3be:	2006      	movs	r0, #6
 800f3c0:	f7ff ff1e 	bl	800f200 <sendbyte>
	HAL_Delay(1);
 800f3c4:	2001      	movs	r0, #1
 800f3c6:	f7f3 f84b 	bl	8002460 <HAL_Delay>
	setled();//���������
 800f3ca:	4b0d      	ldr	r3, [pc, #52]	; (800f400 <LCD_ini+0xa8>)
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	f043 0308 	orr.w	r3, r3, #8
 800f3d2:	b2da      	uxtb	r2, r3
 800f3d4:	4b0a      	ldr	r3, [pc, #40]	; (800f400 <LCD_ini+0xa8>)
 800f3d6:	701a      	strb	r2, [r3, #0]
 800f3d8:	4b09      	ldr	r3, [pc, #36]	; (800f400 <LCD_ini+0xa8>)
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff fec1 	bl	800f164 <LCD_WriteByteI2CLCD>
	setwrite();//������
 800f3e2:	4b07      	ldr	r3, [pc, #28]	; (800f400 <LCD_ini+0xa8>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	f023 0302 	bic.w	r3, r3, #2
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	4b04      	ldr	r3, [pc, #16]	; (800f400 <LCD_ini+0xa8>)
 800f3ee:	701a      	strb	r2, [r3, #0]
 800f3f0:	4b03      	ldr	r3, [pc, #12]	; (800f400 <LCD_ini+0xa8>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7ff feb5 	bl	800f164 <LCD_WriteByteI2CLCD>
}
 800f3fa:	bf00      	nop
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	200029a5 	.word	0x200029a5

0800f404 <Datum_to_1602LCD>:
  sprintf(String_LCD,"                "); LCD_SetPos(0, 1);	HAL_Delay(5); LCD_String(String_LCD);
}

//////////////////////////////////////////////////

void Datum_to_1602LCD(void){
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af02      	add	r7, sp, #8

extern	  char String_LCD[32];
extern    RTC_DateTypeDef DateToUpdate;
sprintf( String_LCD,
		 "%02d.%02d.20%02d",
		 DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 800f40a:	4b0d      	ldr	r3, [pc, #52]	; (800f440 <Datum_to_1602LCD+0x3c>)
 800f40c:	789b      	ldrb	r3, [r3, #2]
sprintf( String_LCD,
 800f40e:	461a      	mov	r2, r3
		 DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 800f410:	4b0b      	ldr	r3, [pc, #44]	; (800f440 <Datum_to_1602LCD+0x3c>)
 800f412:	785b      	ldrb	r3, [r3, #1]
sprintf( String_LCD,
 800f414:	4619      	mov	r1, r3
		 DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 800f416:	4b0a      	ldr	r3, [pc, #40]	; (800f440 <Datum_to_1602LCD+0x3c>)
 800f418:	78db      	ldrb	r3, [r3, #3]
sprintf( String_LCD,
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	460b      	mov	r3, r1
 800f41e:	4909      	ldr	r1, [pc, #36]	; (800f444 <Datum_to_1602LCD+0x40>)
 800f420:	4809      	ldr	r0, [pc, #36]	; (800f448 <Datum_to_1602LCD+0x44>)
 800f422:	f000 f847 	bl	800f4b4 <siprintf>

LCD_SetPos(0, 0);	HAL_Delay(1); LCD_String(String_LCD);//// LCD on I2C1  SDA PB7, SCL PB6
 800f426:	2100      	movs	r1, #0
 800f428:	2000      	movs	r0, #0
 800f42a:	f7ff ff3f 	bl	800f2ac <LCD_SetPos>
 800f42e:	2001      	movs	r0, #1
 800f430:	f7f3 f816 	bl	8002460 <HAL_Delay>
 800f434:	4804      	ldr	r0, [pc, #16]	; (800f448 <Datum_to_1602LCD+0x44>)
 800f436:	f7ff ff1b 	bl	800f270 <LCD_String>
}
 800f43a:	bf00      	nop
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	20000490 	.word	0x20000490
 800f444:	080101b4 	.word	0x080101b4
 800f448:	20000534 	.word	0x20000534

0800f44c <sniprintf>:
 800f44c:	b40c      	push	{r2, r3}
 800f44e:	b530      	push	{r4, r5, lr}
 800f450:	4b17      	ldr	r3, [pc, #92]	; (800f4b0 <sniprintf+0x64>)
 800f452:	1e0c      	subs	r4, r1, #0
 800f454:	681d      	ldr	r5, [r3, #0]
 800f456:	b09d      	sub	sp, #116	; 0x74
 800f458:	da08      	bge.n	800f46c <sniprintf+0x20>
 800f45a:	238b      	movs	r3, #139	; 0x8b
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	f04f 30ff 	mov.w	r0, #4294967295
 800f462:	b01d      	add	sp, #116	; 0x74
 800f464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f468:	b002      	add	sp, #8
 800f46a:	4770      	bx	lr
 800f46c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f470:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f474:	bf14      	ite	ne
 800f476:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f47a:	4623      	moveq	r3, r4
 800f47c:	9304      	str	r3, [sp, #16]
 800f47e:	9307      	str	r3, [sp, #28]
 800f480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f484:	9002      	str	r0, [sp, #8]
 800f486:	9006      	str	r0, [sp, #24]
 800f488:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f48c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f48e:	ab21      	add	r3, sp, #132	; 0x84
 800f490:	a902      	add	r1, sp, #8
 800f492:	4628      	mov	r0, r5
 800f494:	9301      	str	r3, [sp, #4]
 800f496:	f000 f9b3 	bl	800f800 <_svfiprintf_r>
 800f49a:	1c43      	adds	r3, r0, #1
 800f49c:	bfbc      	itt	lt
 800f49e:	238b      	movlt	r3, #139	; 0x8b
 800f4a0:	602b      	strlt	r3, [r5, #0]
 800f4a2:	2c00      	cmp	r4, #0
 800f4a4:	d0dd      	beq.n	800f462 <sniprintf+0x16>
 800f4a6:	9b02      	ldr	r3, [sp, #8]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	701a      	strb	r2, [r3, #0]
 800f4ac:	e7d9      	b.n	800f462 <sniprintf+0x16>
 800f4ae:	bf00      	nop
 800f4b0:	20000158 	.word	0x20000158

0800f4b4 <siprintf>:
 800f4b4:	b40e      	push	{r1, r2, r3}
 800f4b6:	b500      	push	{lr}
 800f4b8:	b09c      	sub	sp, #112	; 0x70
 800f4ba:	ab1d      	add	r3, sp, #116	; 0x74
 800f4bc:	9002      	str	r0, [sp, #8]
 800f4be:	9006      	str	r0, [sp, #24]
 800f4c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4c4:	4809      	ldr	r0, [pc, #36]	; (800f4ec <siprintf+0x38>)
 800f4c6:	9107      	str	r1, [sp, #28]
 800f4c8:	9104      	str	r1, [sp, #16]
 800f4ca:	4909      	ldr	r1, [pc, #36]	; (800f4f0 <siprintf+0x3c>)
 800f4cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d0:	9105      	str	r1, [sp, #20]
 800f4d2:	6800      	ldr	r0, [r0, #0]
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	a902      	add	r1, sp, #8
 800f4d8:	f000 f992 	bl	800f800 <_svfiprintf_r>
 800f4dc:	9b02      	ldr	r3, [sp, #8]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	701a      	strb	r2, [r3, #0]
 800f4e2:	b01c      	add	sp, #112	; 0x70
 800f4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e8:	b003      	add	sp, #12
 800f4ea:	4770      	bx	lr
 800f4ec:	20000158 	.word	0x20000158
 800f4f0:	ffff0208 	.word	0xffff0208

0800f4f4 <memset>:
 800f4f4:	4402      	add	r2, r0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d100      	bne.n	800f4fe <memset+0xa>
 800f4fc:	4770      	bx	lr
 800f4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f502:	e7f9      	b.n	800f4f8 <memset+0x4>

0800f504 <__errno>:
 800f504:	4b01      	ldr	r3, [pc, #4]	; (800f50c <__errno+0x8>)
 800f506:	6818      	ldr	r0, [r3, #0]
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	20000158 	.word	0x20000158

0800f510 <__libc_init_array>:
 800f510:	b570      	push	{r4, r5, r6, lr}
 800f512:	4d0d      	ldr	r5, [pc, #52]	; (800f548 <__libc_init_array+0x38>)
 800f514:	4c0d      	ldr	r4, [pc, #52]	; (800f54c <__libc_init_array+0x3c>)
 800f516:	1b64      	subs	r4, r4, r5
 800f518:	10a4      	asrs	r4, r4, #2
 800f51a:	2600      	movs	r6, #0
 800f51c:	42a6      	cmp	r6, r4
 800f51e:	d109      	bne.n	800f534 <__libc_init_array+0x24>
 800f520:	4d0b      	ldr	r5, [pc, #44]	; (800f550 <__libc_init_array+0x40>)
 800f522:	4c0c      	ldr	r4, [pc, #48]	; (800f554 <__libc_init_array+0x44>)
 800f524:	f000 fc6a 	bl	800fdfc <_init>
 800f528:	1b64      	subs	r4, r4, r5
 800f52a:	10a4      	asrs	r4, r4, #2
 800f52c:	2600      	movs	r6, #0
 800f52e:	42a6      	cmp	r6, r4
 800f530:	d105      	bne.n	800f53e <__libc_init_array+0x2e>
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	f855 3b04 	ldr.w	r3, [r5], #4
 800f538:	4798      	blx	r3
 800f53a:	3601      	adds	r6, #1
 800f53c:	e7ee      	b.n	800f51c <__libc_init_array+0xc>
 800f53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f542:	4798      	blx	r3
 800f544:	3601      	adds	r6, #1
 800f546:	e7f2      	b.n	800f52e <__libc_init_array+0x1e>
 800f548:	08010224 	.word	0x08010224
 800f54c:	08010224 	.word	0x08010224
 800f550:	08010224 	.word	0x08010224
 800f554:	08010228 	.word	0x08010228

0800f558 <__retarget_lock_acquire_recursive>:
 800f558:	4770      	bx	lr

0800f55a <__retarget_lock_release_recursive>:
 800f55a:	4770      	bx	lr

0800f55c <_free_r>:
 800f55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f55e:	2900      	cmp	r1, #0
 800f560:	d044      	beq.n	800f5ec <_free_r+0x90>
 800f562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f566:	9001      	str	r0, [sp, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f1a1 0404 	sub.w	r4, r1, #4
 800f56e:	bfb8      	it	lt
 800f570:	18e4      	addlt	r4, r4, r3
 800f572:	f000 f8df 	bl	800f734 <__malloc_lock>
 800f576:	4a1e      	ldr	r2, [pc, #120]	; (800f5f0 <_free_r+0x94>)
 800f578:	9801      	ldr	r0, [sp, #4]
 800f57a:	6813      	ldr	r3, [r2, #0]
 800f57c:	b933      	cbnz	r3, 800f58c <_free_r+0x30>
 800f57e:	6063      	str	r3, [r4, #4]
 800f580:	6014      	str	r4, [r2, #0]
 800f582:	b003      	add	sp, #12
 800f584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f588:	f000 b8da 	b.w	800f740 <__malloc_unlock>
 800f58c:	42a3      	cmp	r3, r4
 800f58e:	d908      	bls.n	800f5a2 <_free_r+0x46>
 800f590:	6825      	ldr	r5, [r4, #0]
 800f592:	1961      	adds	r1, r4, r5
 800f594:	428b      	cmp	r3, r1
 800f596:	bf01      	itttt	eq
 800f598:	6819      	ldreq	r1, [r3, #0]
 800f59a:	685b      	ldreq	r3, [r3, #4]
 800f59c:	1949      	addeq	r1, r1, r5
 800f59e:	6021      	streq	r1, [r4, #0]
 800f5a0:	e7ed      	b.n	800f57e <_free_r+0x22>
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	b10b      	cbz	r3, 800f5ac <_free_r+0x50>
 800f5a8:	42a3      	cmp	r3, r4
 800f5aa:	d9fa      	bls.n	800f5a2 <_free_r+0x46>
 800f5ac:	6811      	ldr	r1, [r2, #0]
 800f5ae:	1855      	adds	r5, r2, r1
 800f5b0:	42a5      	cmp	r5, r4
 800f5b2:	d10b      	bne.n	800f5cc <_free_r+0x70>
 800f5b4:	6824      	ldr	r4, [r4, #0]
 800f5b6:	4421      	add	r1, r4
 800f5b8:	1854      	adds	r4, r2, r1
 800f5ba:	42a3      	cmp	r3, r4
 800f5bc:	6011      	str	r1, [r2, #0]
 800f5be:	d1e0      	bne.n	800f582 <_free_r+0x26>
 800f5c0:	681c      	ldr	r4, [r3, #0]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	6053      	str	r3, [r2, #4]
 800f5c6:	440c      	add	r4, r1
 800f5c8:	6014      	str	r4, [r2, #0]
 800f5ca:	e7da      	b.n	800f582 <_free_r+0x26>
 800f5cc:	d902      	bls.n	800f5d4 <_free_r+0x78>
 800f5ce:	230c      	movs	r3, #12
 800f5d0:	6003      	str	r3, [r0, #0]
 800f5d2:	e7d6      	b.n	800f582 <_free_r+0x26>
 800f5d4:	6825      	ldr	r5, [r4, #0]
 800f5d6:	1961      	adds	r1, r4, r5
 800f5d8:	428b      	cmp	r3, r1
 800f5da:	bf04      	itt	eq
 800f5dc:	6819      	ldreq	r1, [r3, #0]
 800f5de:	685b      	ldreq	r3, [r3, #4]
 800f5e0:	6063      	str	r3, [r4, #4]
 800f5e2:	bf04      	itt	eq
 800f5e4:	1949      	addeq	r1, r1, r5
 800f5e6:	6021      	streq	r1, [r4, #0]
 800f5e8:	6054      	str	r4, [r2, #4]
 800f5ea:	e7ca      	b.n	800f582 <_free_r+0x26>
 800f5ec:	b003      	add	sp, #12
 800f5ee:	bd30      	pop	{r4, r5, pc}
 800f5f0:	20002ae8 	.word	0x20002ae8

0800f5f4 <sbrk_aligned>:
 800f5f4:	b570      	push	{r4, r5, r6, lr}
 800f5f6:	4e0e      	ldr	r6, [pc, #56]	; (800f630 <sbrk_aligned+0x3c>)
 800f5f8:	460c      	mov	r4, r1
 800f5fa:	6831      	ldr	r1, [r6, #0]
 800f5fc:	4605      	mov	r5, r0
 800f5fe:	b911      	cbnz	r1, 800f606 <sbrk_aligned+0x12>
 800f600:	f000 fba6 	bl	800fd50 <_sbrk_r>
 800f604:	6030      	str	r0, [r6, #0]
 800f606:	4621      	mov	r1, r4
 800f608:	4628      	mov	r0, r5
 800f60a:	f000 fba1 	bl	800fd50 <_sbrk_r>
 800f60e:	1c43      	adds	r3, r0, #1
 800f610:	d00a      	beq.n	800f628 <sbrk_aligned+0x34>
 800f612:	1cc4      	adds	r4, r0, #3
 800f614:	f024 0403 	bic.w	r4, r4, #3
 800f618:	42a0      	cmp	r0, r4
 800f61a:	d007      	beq.n	800f62c <sbrk_aligned+0x38>
 800f61c:	1a21      	subs	r1, r4, r0
 800f61e:	4628      	mov	r0, r5
 800f620:	f000 fb96 	bl	800fd50 <_sbrk_r>
 800f624:	3001      	adds	r0, #1
 800f626:	d101      	bne.n	800f62c <sbrk_aligned+0x38>
 800f628:	f04f 34ff 	mov.w	r4, #4294967295
 800f62c:	4620      	mov	r0, r4
 800f62e:	bd70      	pop	{r4, r5, r6, pc}
 800f630:	20002aec 	.word	0x20002aec

0800f634 <_malloc_r>:
 800f634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f638:	1ccd      	adds	r5, r1, #3
 800f63a:	f025 0503 	bic.w	r5, r5, #3
 800f63e:	3508      	adds	r5, #8
 800f640:	2d0c      	cmp	r5, #12
 800f642:	bf38      	it	cc
 800f644:	250c      	movcc	r5, #12
 800f646:	2d00      	cmp	r5, #0
 800f648:	4607      	mov	r7, r0
 800f64a:	db01      	blt.n	800f650 <_malloc_r+0x1c>
 800f64c:	42a9      	cmp	r1, r5
 800f64e:	d905      	bls.n	800f65c <_malloc_r+0x28>
 800f650:	230c      	movs	r3, #12
 800f652:	603b      	str	r3, [r7, #0]
 800f654:	2600      	movs	r6, #0
 800f656:	4630      	mov	r0, r6
 800f658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f65c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f730 <_malloc_r+0xfc>
 800f660:	f000 f868 	bl	800f734 <__malloc_lock>
 800f664:	f8d8 3000 	ldr.w	r3, [r8]
 800f668:	461c      	mov	r4, r3
 800f66a:	bb5c      	cbnz	r4, 800f6c4 <_malloc_r+0x90>
 800f66c:	4629      	mov	r1, r5
 800f66e:	4638      	mov	r0, r7
 800f670:	f7ff ffc0 	bl	800f5f4 <sbrk_aligned>
 800f674:	1c43      	adds	r3, r0, #1
 800f676:	4604      	mov	r4, r0
 800f678:	d155      	bne.n	800f726 <_malloc_r+0xf2>
 800f67a:	f8d8 4000 	ldr.w	r4, [r8]
 800f67e:	4626      	mov	r6, r4
 800f680:	2e00      	cmp	r6, #0
 800f682:	d145      	bne.n	800f710 <_malloc_r+0xdc>
 800f684:	2c00      	cmp	r4, #0
 800f686:	d048      	beq.n	800f71a <_malloc_r+0xe6>
 800f688:	6823      	ldr	r3, [r4, #0]
 800f68a:	4631      	mov	r1, r6
 800f68c:	4638      	mov	r0, r7
 800f68e:	eb04 0903 	add.w	r9, r4, r3
 800f692:	f000 fb5d 	bl	800fd50 <_sbrk_r>
 800f696:	4581      	cmp	r9, r0
 800f698:	d13f      	bne.n	800f71a <_malloc_r+0xe6>
 800f69a:	6821      	ldr	r1, [r4, #0]
 800f69c:	1a6d      	subs	r5, r5, r1
 800f69e:	4629      	mov	r1, r5
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	f7ff ffa7 	bl	800f5f4 <sbrk_aligned>
 800f6a6:	3001      	adds	r0, #1
 800f6a8:	d037      	beq.n	800f71a <_malloc_r+0xe6>
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	442b      	add	r3, r5
 800f6ae:	6023      	str	r3, [r4, #0]
 800f6b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d038      	beq.n	800f72a <_malloc_r+0xf6>
 800f6b8:	685a      	ldr	r2, [r3, #4]
 800f6ba:	42a2      	cmp	r2, r4
 800f6bc:	d12b      	bne.n	800f716 <_malloc_r+0xe2>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	605a      	str	r2, [r3, #4]
 800f6c2:	e00f      	b.n	800f6e4 <_malloc_r+0xb0>
 800f6c4:	6822      	ldr	r2, [r4, #0]
 800f6c6:	1b52      	subs	r2, r2, r5
 800f6c8:	d41f      	bmi.n	800f70a <_malloc_r+0xd6>
 800f6ca:	2a0b      	cmp	r2, #11
 800f6cc:	d917      	bls.n	800f6fe <_malloc_r+0xca>
 800f6ce:	1961      	adds	r1, r4, r5
 800f6d0:	42a3      	cmp	r3, r4
 800f6d2:	6025      	str	r5, [r4, #0]
 800f6d4:	bf18      	it	ne
 800f6d6:	6059      	strne	r1, [r3, #4]
 800f6d8:	6863      	ldr	r3, [r4, #4]
 800f6da:	bf08      	it	eq
 800f6dc:	f8c8 1000 	streq.w	r1, [r8]
 800f6e0:	5162      	str	r2, [r4, r5]
 800f6e2:	604b      	str	r3, [r1, #4]
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	f104 060b 	add.w	r6, r4, #11
 800f6ea:	f000 f829 	bl	800f740 <__malloc_unlock>
 800f6ee:	f026 0607 	bic.w	r6, r6, #7
 800f6f2:	1d23      	adds	r3, r4, #4
 800f6f4:	1af2      	subs	r2, r6, r3
 800f6f6:	d0ae      	beq.n	800f656 <_malloc_r+0x22>
 800f6f8:	1b9b      	subs	r3, r3, r6
 800f6fa:	50a3      	str	r3, [r4, r2]
 800f6fc:	e7ab      	b.n	800f656 <_malloc_r+0x22>
 800f6fe:	42a3      	cmp	r3, r4
 800f700:	6862      	ldr	r2, [r4, #4]
 800f702:	d1dd      	bne.n	800f6c0 <_malloc_r+0x8c>
 800f704:	f8c8 2000 	str.w	r2, [r8]
 800f708:	e7ec      	b.n	800f6e4 <_malloc_r+0xb0>
 800f70a:	4623      	mov	r3, r4
 800f70c:	6864      	ldr	r4, [r4, #4]
 800f70e:	e7ac      	b.n	800f66a <_malloc_r+0x36>
 800f710:	4634      	mov	r4, r6
 800f712:	6876      	ldr	r6, [r6, #4]
 800f714:	e7b4      	b.n	800f680 <_malloc_r+0x4c>
 800f716:	4613      	mov	r3, r2
 800f718:	e7cc      	b.n	800f6b4 <_malloc_r+0x80>
 800f71a:	230c      	movs	r3, #12
 800f71c:	603b      	str	r3, [r7, #0]
 800f71e:	4638      	mov	r0, r7
 800f720:	f000 f80e 	bl	800f740 <__malloc_unlock>
 800f724:	e797      	b.n	800f656 <_malloc_r+0x22>
 800f726:	6025      	str	r5, [r4, #0]
 800f728:	e7dc      	b.n	800f6e4 <_malloc_r+0xb0>
 800f72a:	605b      	str	r3, [r3, #4]
 800f72c:	deff      	udf	#255	; 0xff
 800f72e:	bf00      	nop
 800f730:	20002ae8 	.word	0x20002ae8

0800f734 <__malloc_lock>:
 800f734:	4801      	ldr	r0, [pc, #4]	; (800f73c <__malloc_lock+0x8>)
 800f736:	f7ff bf0f 	b.w	800f558 <__retarget_lock_acquire_recursive>
 800f73a:	bf00      	nop
 800f73c:	20002ae4 	.word	0x20002ae4

0800f740 <__malloc_unlock>:
 800f740:	4801      	ldr	r0, [pc, #4]	; (800f748 <__malloc_unlock+0x8>)
 800f742:	f7ff bf0a 	b.w	800f55a <__retarget_lock_release_recursive>
 800f746:	bf00      	nop
 800f748:	20002ae4 	.word	0x20002ae4

0800f74c <__ssputs_r>:
 800f74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f750:	688e      	ldr	r6, [r1, #8]
 800f752:	461f      	mov	r7, r3
 800f754:	42be      	cmp	r6, r7
 800f756:	680b      	ldr	r3, [r1, #0]
 800f758:	4682      	mov	sl, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	4690      	mov	r8, r2
 800f75e:	d82c      	bhi.n	800f7ba <__ssputs_r+0x6e>
 800f760:	898a      	ldrh	r2, [r1, #12]
 800f762:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f766:	d026      	beq.n	800f7b6 <__ssputs_r+0x6a>
 800f768:	6965      	ldr	r5, [r4, #20]
 800f76a:	6909      	ldr	r1, [r1, #16]
 800f76c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f770:	eba3 0901 	sub.w	r9, r3, r1
 800f774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f778:	1c7b      	adds	r3, r7, #1
 800f77a:	444b      	add	r3, r9
 800f77c:	106d      	asrs	r5, r5, #1
 800f77e:	429d      	cmp	r5, r3
 800f780:	bf38      	it	cc
 800f782:	461d      	movcc	r5, r3
 800f784:	0553      	lsls	r3, r2, #21
 800f786:	d527      	bpl.n	800f7d8 <__ssputs_r+0x8c>
 800f788:	4629      	mov	r1, r5
 800f78a:	f7ff ff53 	bl	800f634 <_malloc_r>
 800f78e:	4606      	mov	r6, r0
 800f790:	b360      	cbz	r0, 800f7ec <__ssputs_r+0xa0>
 800f792:	6921      	ldr	r1, [r4, #16]
 800f794:	464a      	mov	r2, r9
 800f796:	f000 faeb 	bl	800fd70 <memcpy>
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7a4:	81a3      	strh	r3, [r4, #12]
 800f7a6:	6126      	str	r6, [r4, #16]
 800f7a8:	6165      	str	r5, [r4, #20]
 800f7aa:	444e      	add	r6, r9
 800f7ac:	eba5 0509 	sub.w	r5, r5, r9
 800f7b0:	6026      	str	r6, [r4, #0]
 800f7b2:	60a5      	str	r5, [r4, #8]
 800f7b4:	463e      	mov	r6, r7
 800f7b6:	42be      	cmp	r6, r7
 800f7b8:	d900      	bls.n	800f7bc <__ssputs_r+0x70>
 800f7ba:	463e      	mov	r6, r7
 800f7bc:	6820      	ldr	r0, [r4, #0]
 800f7be:	4632      	mov	r2, r6
 800f7c0:	4641      	mov	r1, r8
 800f7c2:	f000 faab 	bl	800fd1c <memmove>
 800f7c6:	68a3      	ldr	r3, [r4, #8]
 800f7c8:	1b9b      	subs	r3, r3, r6
 800f7ca:	60a3      	str	r3, [r4, #8]
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	4433      	add	r3, r6
 800f7d0:	6023      	str	r3, [r4, #0]
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7d8:	462a      	mov	r2, r5
 800f7da:	f000 fad7 	bl	800fd8c <_realloc_r>
 800f7de:	4606      	mov	r6, r0
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d1e0      	bne.n	800f7a6 <__ssputs_r+0x5a>
 800f7e4:	6921      	ldr	r1, [r4, #16]
 800f7e6:	4650      	mov	r0, sl
 800f7e8:	f7ff feb8 	bl	800f55c <_free_r>
 800f7ec:	230c      	movs	r3, #12
 800f7ee:	f8ca 3000 	str.w	r3, [sl]
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7f8:	81a3      	strh	r3, [r4, #12]
 800f7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f7fe:	e7e9      	b.n	800f7d4 <__ssputs_r+0x88>

0800f800 <_svfiprintf_r>:
 800f800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f804:	4698      	mov	r8, r3
 800f806:	898b      	ldrh	r3, [r1, #12]
 800f808:	061b      	lsls	r3, r3, #24
 800f80a:	b09d      	sub	sp, #116	; 0x74
 800f80c:	4607      	mov	r7, r0
 800f80e:	460d      	mov	r5, r1
 800f810:	4614      	mov	r4, r2
 800f812:	d50e      	bpl.n	800f832 <_svfiprintf_r+0x32>
 800f814:	690b      	ldr	r3, [r1, #16]
 800f816:	b963      	cbnz	r3, 800f832 <_svfiprintf_r+0x32>
 800f818:	2140      	movs	r1, #64	; 0x40
 800f81a:	f7ff ff0b 	bl	800f634 <_malloc_r>
 800f81e:	6028      	str	r0, [r5, #0]
 800f820:	6128      	str	r0, [r5, #16]
 800f822:	b920      	cbnz	r0, 800f82e <_svfiprintf_r+0x2e>
 800f824:	230c      	movs	r3, #12
 800f826:	603b      	str	r3, [r7, #0]
 800f828:	f04f 30ff 	mov.w	r0, #4294967295
 800f82c:	e0d0      	b.n	800f9d0 <_svfiprintf_r+0x1d0>
 800f82e:	2340      	movs	r3, #64	; 0x40
 800f830:	616b      	str	r3, [r5, #20]
 800f832:	2300      	movs	r3, #0
 800f834:	9309      	str	r3, [sp, #36]	; 0x24
 800f836:	2320      	movs	r3, #32
 800f838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f840:	2330      	movs	r3, #48	; 0x30
 800f842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f9e8 <_svfiprintf_r+0x1e8>
 800f846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f84a:	f04f 0901 	mov.w	r9, #1
 800f84e:	4623      	mov	r3, r4
 800f850:	469a      	mov	sl, r3
 800f852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f856:	b10a      	cbz	r2, 800f85c <_svfiprintf_r+0x5c>
 800f858:	2a25      	cmp	r2, #37	; 0x25
 800f85a:	d1f9      	bne.n	800f850 <_svfiprintf_r+0x50>
 800f85c:	ebba 0b04 	subs.w	fp, sl, r4
 800f860:	d00b      	beq.n	800f87a <_svfiprintf_r+0x7a>
 800f862:	465b      	mov	r3, fp
 800f864:	4622      	mov	r2, r4
 800f866:	4629      	mov	r1, r5
 800f868:	4638      	mov	r0, r7
 800f86a:	f7ff ff6f 	bl	800f74c <__ssputs_r>
 800f86e:	3001      	adds	r0, #1
 800f870:	f000 80a9 	beq.w	800f9c6 <_svfiprintf_r+0x1c6>
 800f874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f876:	445a      	add	r2, fp
 800f878:	9209      	str	r2, [sp, #36]	; 0x24
 800f87a:	f89a 3000 	ldrb.w	r3, [sl]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f000 80a1 	beq.w	800f9c6 <_svfiprintf_r+0x1c6>
 800f884:	2300      	movs	r3, #0
 800f886:	f04f 32ff 	mov.w	r2, #4294967295
 800f88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f88e:	f10a 0a01 	add.w	sl, sl, #1
 800f892:	9304      	str	r3, [sp, #16]
 800f894:	9307      	str	r3, [sp, #28]
 800f896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f89a:	931a      	str	r3, [sp, #104]	; 0x68
 800f89c:	4654      	mov	r4, sl
 800f89e:	2205      	movs	r2, #5
 800f8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a4:	4850      	ldr	r0, [pc, #320]	; (800f9e8 <_svfiprintf_r+0x1e8>)
 800f8a6:	f7f0 fc93 	bl	80001d0 <memchr>
 800f8aa:	9a04      	ldr	r2, [sp, #16]
 800f8ac:	b9d8      	cbnz	r0, 800f8e6 <_svfiprintf_r+0xe6>
 800f8ae:	06d0      	lsls	r0, r2, #27
 800f8b0:	bf44      	itt	mi
 800f8b2:	2320      	movmi	r3, #32
 800f8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8b8:	0711      	lsls	r1, r2, #28
 800f8ba:	bf44      	itt	mi
 800f8bc:	232b      	movmi	r3, #43	; 0x2b
 800f8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c8:	d015      	beq.n	800f8f6 <_svfiprintf_r+0xf6>
 800f8ca:	9a07      	ldr	r2, [sp, #28]
 800f8cc:	4654      	mov	r4, sl
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	f04f 0c0a 	mov.w	ip, #10
 800f8d4:	4621      	mov	r1, r4
 800f8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8da:	3b30      	subs	r3, #48	; 0x30
 800f8dc:	2b09      	cmp	r3, #9
 800f8de:	d94d      	bls.n	800f97c <_svfiprintf_r+0x17c>
 800f8e0:	b1b0      	cbz	r0, 800f910 <_svfiprintf_r+0x110>
 800f8e2:	9207      	str	r2, [sp, #28]
 800f8e4:	e014      	b.n	800f910 <_svfiprintf_r+0x110>
 800f8e6:	eba0 0308 	sub.w	r3, r0, r8
 800f8ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	9304      	str	r3, [sp, #16]
 800f8f2:	46a2      	mov	sl, r4
 800f8f4:	e7d2      	b.n	800f89c <_svfiprintf_r+0x9c>
 800f8f6:	9b03      	ldr	r3, [sp, #12]
 800f8f8:	1d19      	adds	r1, r3, #4
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	9103      	str	r1, [sp, #12]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	bfbb      	ittet	lt
 800f902:	425b      	neglt	r3, r3
 800f904:	f042 0202 	orrlt.w	r2, r2, #2
 800f908:	9307      	strge	r3, [sp, #28]
 800f90a:	9307      	strlt	r3, [sp, #28]
 800f90c:	bfb8      	it	lt
 800f90e:	9204      	strlt	r2, [sp, #16]
 800f910:	7823      	ldrb	r3, [r4, #0]
 800f912:	2b2e      	cmp	r3, #46	; 0x2e
 800f914:	d10c      	bne.n	800f930 <_svfiprintf_r+0x130>
 800f916:	7863      	ldrb	r3, [r4, #1]
 800f918:	2b2a      	cmp	r3, #42	; 0x2a
 800f91a:	d134      	bne.n	800f986 <_svfiprintf_r+0x186>
 800f91c:	9b03      	ldr	r3, [sp, #12]
 800f91e:	1d1a      	adds	r2, r3, #4
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	9203      	str	r2, [sp, #12]
 800f924:	2b00      	cmp	r3, #0
 800f926:	bfb8      	it	lt
 800f928:	f04f 33ff 	movlt.w	r3, #4294967295
 800f92c:	3402      	adds	r4, #2
 800f92e:	9305      	str	r3, [sp, #20]
 800f930:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f9f8 <_svfiprintf_r+0x1f8>
 800f934:	7821      	ldrb	r1, [r4, #0]
 800f936:	2203      	movs	r2, #3
 800f938:	4650      	mov	r0, sl
 800f93a:	f7f0 fc49 	bl	80001d0 <memchr>
 800f93e:	b138      	cbz	r0, 800f950 <_svfiprintf_r+0x150>
 800f940:	9b04      	ldr	r3, [sp, #16]
 800f942:	eba0 000a 	sub.w	r0, r0, sl
 800f946:	2240      	movs	r2, #64	; 0x40
 800f948:	4082      	lsls	r2, r0
 800f94a:	4313      	orrs	r3, r2
 800f94c:	3401      	adds	r4, #1
 800f94e:	9304      	str	r3, [sp, #16]
 800f950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f954:	4825      	ldr	r0, [pc, #148]	; (800f9ec <_svfiprintf_r+0x1ec>)
 800f956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f95a:	2206      	movs	r2, #6
 800f95c:	f7f0 fc38 	bl	80001d0 <memchr>
 800f960:	2800      	cmp	r0, #0
 800f962:	d038      	beq.n	800f9d6 <_svfiprintf_r+0x1d6>
 800f964:	4b22      	ldr	r3, [pc, #136]	; (800f9f0 <_svfiprintf_r+0x1f0>)
 800f966:	bb1b      	cbnz	r3, 800f9b0 <_svfiprintf_r+0x1b0>
 800f968:	9b03      	ldr	r3, [sp, #12]
 800f96a:	3307      	adds	r3, #7
 800f96c:	f023 0307 	bic.w	r3, r3, #7
 800f970:	3308      	adds	r3, #8
 800f972:	9303      	str	r3, [sp, #12]
 800f974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f976:	4433      	add	r3, r6
 800f978:	9309      	str	r3, [sp, #36]	; 0x24
 800f97a:	e768      	b.n	800f84e <_svfiprintf_r+0x4e>
 800f97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f980:	460c      	mov	r4, r1
 800f982:	2001      	movs	r0, #1
 800f984:	e7a6      	b.n	800f8d4 <_svfiprintf_r+0xd4>
 800f986:	2300      	movs	r3, #0
 800f988:	3401      	adds	r4, #1
 800f98a:	9305      	str	r3, [sp, #20]
 800f98c:	4619      	mov	r1, r3
 800f98e:	f04f 0c0a 	mov.w	ip, #10
 800f992:	4620      	mov	r0, r4
 800f994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f998:	3a30      	subs	r2, #48	; 0x30
 800f99a:	2a09      	cmp	r2, #9
 800f99c:	d903      	bls.n	800f9a6 <_svfiprintf_r+0x1a6>
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d0c6      	beq.n	800f930 <_svfiprintf_r+0x130>
 800f9a2:	9105      	str	r1, [sp, #20]
 800f9a4:	e7c4      	b.n	800f930 <_svfiprintf_r+0x130>
 800f9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e7f0      	b.n	800f992 <_svfiprintf_r+0x192>
 800f9b0:	ab03      	add	r3, sp, #12
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	462a      	mov	r2, r5
 800f9b6:	4b0f      	ldr	r3, [pc, #60]	; (800f9f4 <_svfiprintf_r+0x1f4>)
 800f9b8:	a904      	add	r1, sp, #16
 800f9ba:	4638      	mov	r0, r7
 800f9bc:	f3af 8000 	nop.w
 800f9c0:	1c42      	adds	r2, r0, #1
 800f9c2:	4606      	mov	r6, r0
 800f9c4:	d1d6      	bne.n	800f974 <_svfiprintf_r+0x174>
 800f9c6:	89ab      	ldrh	r3, [r5, #12]
 800f9c8:	065b      	lsls	r3, r3, #25
 800f9ca:	f53f af2d 	bmi.w	800f828 <_svfiprintf_r+0x28>
 800f9ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9d0:	b01d      	add	sp, #116	; 0x74
 800f9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d6:	ab03      	add	r3, sp, #12
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	462a      	mov	r2, r5
 800f9dc:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <_svfiprintf_r+0x1f4>)
 800f9de:	a904      	add	r1, sp, #16
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f000 f879 	bl	800fad8 <_printf_i>
 800f9e6:	e7eb      	b.n	800f9c0 <_svfiprintf_r+0x1c0>
 800f9e8:	080101e8 	.word	0x080101e8
 800f9ec:	080101f2 	.word	0x080101f2
 800f9f0:	00000000 	.word	0x00000000
 800f9f4:	0800f74d 	.word	0x0800f74d
 800f9f8:	080101ee 	.word	0x080101ee

0800f9fc <_printf_common>:
 800f9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa00:	4616      	mov	r6, r2
 800fa02:	4699      	mov	r9, r3
 800fa04:	688a      	ldr	r2, [r1, #8]
 800fa06:	690b      	ldr	r3, [r1, #16]
 800fa08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	bfb8      	it	lt
 800fa10:	4613      	movlt	r3, r2
 800fa12:	6033      	str	r3, [r6, #0]
 800fa14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa18:	4607      	mov	r7, r0
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	b10a      	cbz	r2, 800fa22 <_printf_common+0x26>
 800fa1e:	3301      	adds	r3, #1
 800fa20:	6033      	str	r3, [r6, #0]
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	0699      	lsls	r1, r3, #26
 800fa26:	bf42      	ittt	mi
 800fa28:	6833      	ldrmi	r3, [r6, #0]
 800fa2a:	3302      	addmi	r3, #2
 800fa2c:	6033      	strmi	r3, [r6, #0]
 800fa2e:	6825      	ldr	r5, [r4, #0]
 800fa30:	f015 0506 	ands.w	r5, r5, #6
 800fa34:	d106      	bne.n	800fa44 <_printf_common+0x48>
 800fa36:	f104 0a19 	add.w	sl, r4, #25
 800fa3a:	68e3      	ldr	r3, [r4, #12]
 800fa3c:	6832      	ldr	r2, [r6, #0]
 800fa3e:	1a9b      	subs	r3, r3, r2
 800fa40:	42ab      	cmp	r3, r5
 800fa42:	dc26      	bgt.n	800fa92 <_printf_common+0x96>
 800fa44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa48:	1e13      	subs	r3, r2, #0
 800fa4a:	6822      	ldr	r2, [r4, #0]
 800fa4c:	bf18      	it	ne
 800fa4e:	2301      	movne	r3, #1
 800fa50:	0692      	lsls	r2, r2, #26
 800fa52:	d42b      	bmi.n	800faac <_printf_common+0xb0>
 800fa54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa58:	4649      	mov	r1, r9
 800fa5a:	4638      	mov	r0, r7
 800fa5c:	47c0      	blx	r8
 800fa5e:	3001      	adds	r0, #1
 800fa60:	d01e      	beq.n	800faa0 <_printf_common+0xa4>
 800fa62:	6823      	ldr	r3, [r4, #0]
 800fa64:	6922      	ldr	r2, [r4, #16]
 800fa66:	f003 0306 	and.w	r3, r3, #6
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	bf02      	ittt	eq
 800fa6e:	68e5      	ldreq	r5, [r4, #12]
 800fa70:	6833      	ldreq	r3, [r6, #0]
 800fa72:	1aed      	subeq	r5, r5, r3
 800fa74:	68a3      	ldr	r3, [r4, #8]
 800fa76:	bf0c      	ite	eq
 800fa78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa7c:	2500      	movne	r5, #0
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	bfc4      	itt	gt
 800fa82:	1a9b      	subgt	r3, r3, r2
 800fa84:	18ed      	addgt	r5, r5, r3
 800fa86:	2600      	movs	r6, #0
 800fa88:	341a      	adds	r4, #26
 800fa8a:	42b5      	cmp	r5, r6
 800fa8c:	d11a      	bne.n	800fac4 <_printf_common+0xc8>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	e008      	b.n	800faa4 <_printf_common+0xa8>
 800fa92:	2301      	movs	r3, #1
 800fa94:	4652      	mov	r2, sl
 800fa96:	4649      	mov	r1, r9
 800fa98:	4638      	mov	r0, r7
 800fa9a:	47c0      	blx	r8
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	d103      	bne.n	800faa8 <_printf_common+0xac>
 800faa0:	f04f 30ff 	mov.w	r0, #4294967295
 800faa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faa8:	3501      	adds	r5, #1
 800faaa:	e7c6      	b.n	800fa3a <_printf_common+0x3e>
 800faac:	18e1      	adds	r1, r4, r3
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	2030      	movs	r0, #48	; 0x30
 800fab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fab6:	4422      	add	r2, r4
 800fab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fabc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fac0:	3302      	adds	r3, #2
 800fac2:	e7c7      	b.n	800fa54 <_printf_common+0x58>
 800fac4:	2301      	movs	r3, #1
 800fac6:	4622      	mov	r2, r4
 800fac8:	4649      	mov	r1, r9
 800faca:	4638      	mov	r0, r7
 800facc:	47c0      	blx	r8
 800face:	3001      	adds	r0, #1
 800fad0:	d0e6      	beq.n	800faa0 <_printf_common+0xa4>
 800fad2:	3601      	adds	r6, #1
 800fad4:	e7d9      	b.n	800fa8a <_printf_common+0x8e>
	...

0800fad8 <_printf_i>:
 800fad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fadc:	7e0f      	ldrb	r7, [r1, #24]
 800fade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fae0:	2f78      	cmp	r7, #120	; 0x78
 800fae2:	4691      	mov	r9, r2
 800fae4:	4680      	mov	r8, r0
 800fae6:	460c      	mov	r4, r1
 800fae8:	469a      	mov	sl, r3
 800faea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800faee:	d807      	bhi.n	800fb00 <_printf_i+0x28>
 800faf0:	2f62      	cmp	r7, #98	; 0x62
 800faf2:	d80a      	bhi.n	800fb0a <_printf_i+0x32>
 800faf4:	2f00      	cmp	r7, #0
 800faf6:	f000 80d4 	beq.w	800fca2 <_printf_i+0x1ca>
 800fafa:	2f58      	cmp	r7, #88	; 0x58
 800fafc:	f000 80c0 	beq.w	800fc80 <_printf_i+0x1a8>
 800fb00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb08:	e03a      	b.n	800fb80 <_printf_i+0xa8>
 800fb0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb0e:	2b15      	cmp	r3, #21
 800fb10:	d8f6      	bhi.n	800fb00 <_printf_i+0x28>
 800fb12:	a101      	add	r1, pc, #4	; (adr r1, 800fb18 <_printf_i+0x40>)
 800fb14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb18:	0800fb71 	.word	0x0800fb71
 800fb1c:	0800fb85 	.word	0x0800fb85
 800fb20:	0800fb01 	.word	0x0800fb01
 800fb24:	0800fb01 	.word	0x0800fb01
 800fb28:	0800fb01 	.word	0x0800fb01
 800fb2c:	0800fb01 	.word	0x0800fb01
 800fb30:	0800fb85 	.word	0x0800fb85
 800fb34:	0800fb01 	.word	0x0800fb01
 800fb38:	0800fb01 	.word	0x0800fb01
 800fb3c:	0800fb01 	.word	0x0800fb01
 800fb40:	0800fb01 	.word	0x0800fb01
 800fb44:	0800fc89 	.word	0x0800fc89
 800fb48:	0800fbb1 	.word	0x0800fbb1
 800fb4c:	0800fc43 	.word	0x0800fc43
 800fb50:	0800fb01 	.word	0x0800fb01
 800fb54:	0800fb01 	.word	0x0800fb01
 800fb58:	0800fcab 	.word	0x0800fcab
 800fb5c:	0800fb01 	.word	0x0800fb01
 800fb60:	0800fbb1 	.word	0x0800fbb1
 800fb64:	0800fb01 	.word	0x0800fb01
 800fb68:	0800fb01 	.word	0x0800fb01
 800fb6c:	0800fc4b 	.word	0x0800fc4b
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	1d1a      	adds	r2, r3, #4
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	602a      	str	r2, [r5, #0]
 800fb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb80:	2301      	movs	r3, #1
 800fb82:	e09f      	b.n	800fcc4 <_printf_i+0x1ec>
 800fb84:	6820      	ldr	r0, [r4, #0]
 800fb86:	682b      	ldr	r3, [r5, #0]
 800fb88:	0607      	lsls	r7, r0, #24
 800fb8a:	f103 0104 	add.w	r1, r3, #4
 800fb8e:	6029      	str	r1, [r5, #0]
 800fb90:	d501      	bpl.n	800fb96 <_printf_i+0xbe>
 800fb92:	681e      	ldr	r6, [r3, #0]
 800fb94:	e003      	b.n	800fb9e <_printf_i+0xc6>
 800fb96:	0646      	lsls	r6, r0, #25
 800fb98:	d5fb      	bpl.n	800fb92 <_printf_i+0xba>
 800fb9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb9e:	2e00      	cmp	r6, #0
 800fba0:	da03      	bge.n	800fbaa <_printf_i+0xd2>
 800fba2:	232d      	movs	r3, #45	; 0x2d
 800fba4:	4276      	negs	r6, r6
 800fba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbaa:	485a      	ldr	r0, [pc, #360]	; (800fd14 <_printf_i+0x23c>)
 800fbac:	230a      	movs	r3, #10
 800fbae:	e012      	b.n	800fbd6 <_printf_i+0xfe>
 800fbb0:	682b      	ldr	r3, [r5, #0]
 800fbb2:	6820      	ldr	r0, [r4, #0]
 800fbb4:	1d19      	adds	r1, r3, #4
 800fbb6:	6029      	str	r1, [r5, #0]
 800fbb8:	0605      	lsls	r5, r0, #24
 800fbba:	d501      	bpl.n	800fbc0 <_printf_i+0xe8>
 800fbbc:	681e      	ldr	r6, [r3, #0]
 800fbbe:	e002      	b.n	800fbc6 <_printf_i+0xee>
 800fbc0:	0641      	lsls	r1, r0, #25
 800fbc2:	d5fb      	bpl.n	800fbbc <_printf_i+0xe4>
 800fbc4:	881e      	ldrh	r6, [r3, #0]
 800fbc6:	4853      	ldr	r0, [pc, #332]	; (800fd14 <_printf_i+0x23c>)
 800fbc8:	2f6f      	cmp	r7, #111	; 0x6f
 800fbca:	bf0c      	ite	eq
 800fbcc:	2308      	moveq	r3, #8
 800fbce:	230a      	movne	r3, #10
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbd6:	6865      	ldr	r5, [r4, #4]
 800fbd8:	60a5      	str	r5, [r4, #8]
 800fbda:	2d00      	cmp	r5, #0
 800fbdc:	bfa2      	ittt	ge
 800fbde:	6821      	ldrge	r1, [r4, #0]
 800fbe0:	f021 0104 	bicge.w	r1, r1, #4
 800fbe4:	6021      	strge	r1, [r4, #0]
 800fbe6:	b90e      	cbnz	r6, 800fbec <_printf_i+0x114>
 800fbe8:	2d00      	cmp	r5, #0
 800fbea:	d04b      	beq.n	800fc84 <_printf_i+0x1ac>
 800fbec:	4615      	mov	r5, r2
 800fbee:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbf2:	fb03 6711 	mls	r7, r3, r1, r6
 800fbf6:	5dc7      	ldrb	r7, [r0, r7]
 800fbf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbfc:	4637      	mov	r7, r6
 800fbfe:	42bb      	cmp	r3, r7
 800fc00:	460e      	mov	r6, r1
 800fc02:	d9f4      	bls.n	800fbee <_printf_i+0x116>
 800fc04:	2b08      	cmp	r3, #8
 800fc06:	d10b      	bne.n	800fc20 <_printf_i+0x148>
 800fc08:	6823      	ldr	r3, [r4, #0]
 800fc0a:	07de      	lsls	r6, r3, #31
 800fc0c:	d508      	bpl.n	800fc20 <_printf_i+0x148>
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	6861      	ldr	r1, [r4, #4]
 800fc12:	4299      	cmp	r1, r3
 800fc14:	bfde      	ittt	le
 800fc16:	2330      	movle	r3, #48	; 0x30
 800fc18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc20:	1b52      	subs	r2, r2, r5
 800fc22:	6122      	str	r2, [r4, #16]
 800fc24:	f8cd a000 	str.w	sl, [sp]
 800fc28:	464b      	mov	r3, r9
 800fc2a:	aa03      	add	r2, sp, #12
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	4640      	mov	r0, r8
 800fc30:	f7ff fee4 	bl	800f9fc <_printf_common>
 800fc34:	3001      	adds	r0, #1
 800fc36:	d14a      	bne.n	800fcce <_printf_i+0x1f6>
 800fc38:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3c:	b004      	add	sp, #16
 800fc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc42:	6823      	ldr	r3, [r4, #0]
 800fc44:	f043 0320 	orr.w	r3, r3, #32
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	4833      	ldr	r0, [pc, #204]	; (800fd18 <_printf_i+0x240>)
 800fc4c:	2778      	movs	r7, #120	; 0x78
 800fc4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	6829      	ldr	r1, [r5, #0]
 800fc56:	061f      	lsls	r7, r3, #24
 800fc58:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc5c:	d402      	bmi.n	800fc64 <_printf_i+0x18c>
 800fc5e:	065f      	lsls	r7, r3, #25
 800fc60:	bf48      	it	mi
 800fc62:	b2b6      	uxthmi	r6, r6
 800fc64:	07df      	lsls	r7, r3, #31
 800fc66:	bf48      	it	mi
 800fc68:	f043 0320 	orrmi.w	r3, r3, #32
 800fc6c:	6029      	str	r1, [r5, #0]
 800fc6e:	bf48      	it	mi
 800fc70:	6023      	strmi	r3, [r4, #0]
 800fc72:	b91e      	cbnz	r6, 800fc7c <_printf_i+0x1a4>
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	f023 0320 	bic.w	r3, r3, #32
 800fc7a:	6023      	str	r3, [r4, #0]
 800fc7c:	2310      	movs	r3, #16
 800fc7e:	e7a7      	b.n	800fbd0 <_printf_i+0xf8>
 800fc80:	4824      	ldr	r0, [pc, #144]	; (800fd14 <_printf_i+0x23c>)
 800fc82:	e7e4      	b.n	800fc4e <_printf_i+0x176>
 800fc84:	4615      	mov	r5, r2
 800fc86:	e7bd      	b.n	800fc04 <_printf_i+0x12c>
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	6826      	ldr	r6, [r4, #0]
 800fc8c:	6961      	ldr	r1, [r4, #20]
 800fc8e:	1d18      	adds	r0, r3, #4
 800fc90:	6028      	str	r0, [r5, #0]
 800fc92:	0635      	lsls	r5, r6, #24
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	d501      	bpl.n	800fc9c <_printf_i+0x1c4>
 800fc98:	6019      	str	r1, [r3, #0]
 800fc9a:	e002      	b.n	800fca2 <_printf_i+0x1ca>
 800fc9c:	0670      	lsls	r0, r6, #25
 800fc9e:	d5fb      	bpl.n	800fc98 <_printf_i+0x1c0>
 800fca0:	8019      	strh	r1, [r3, #0]
 800fca2:	2300      	movs	r3, #0
 800fca4:	6123      	str	r3, [r4, #16]
 800fca6:	4615      	mov	r5, r2
 800fca8:	e7bc      	b.n	800fc24 <_printf_i+0x14c>
 800fcaa:	682b      	ldr	r3, [r5, #0]
 800fcac:	1d1a      	adds	r2, r3, #4
 800fcae:	602a      	str	r2, [r5, #0]
 800fcb0:	681d      	ldr	r5, [r3, #0]
 800fcb2:	6862      	ldr	r2, [r4, #4]
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f7f0 fa8a 	bl	80001d0 <memchr>
 800fcbc:	b108      	cbz	r0, 800fcc2 <_printf_i+0x1ea>
 800fcbe:	1b40      	subs	r0, r0, r5
 800fcc0:	6060      	str	r0, [r4, #4]
 800fcc2:	6863      	ldr	r3, [r4, #4]
 800fcc4:	6123      	str	r3, [r4, #16]
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fccc:	e7aa      	b.n	800fc24 <_printf_i+0x14c>
 800fcce:	6923      	ldr	r3, [r4, #16]
 800fcd0:	462a      	mov	r2, r5
 800fcd2:	4649      	mov	r1, r9
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	47d0      	blx	sl
 800fcd8:	3001      	adds	r0, #1
 800fcda:	d0ad      	beq.n	800fc38 <_printf_i+0x160>
 800fcdc:	6823      	ldr	r3, [r4, #0]
 800fcde:	079b      	lsls	r3, r3, #30
 800fce0:	d413      	bmi.n	800fd0a <_printf_i+0x232>
 800fce2:	68e0      	ldr	r0, [r4, #12]
 800fce4:	9b03      	ldr	r3, [sp, #12]
 800fce6:	4298      	cmp	r0, r3
 800fce8:	bfb8      	it	lt
 800fcea:	4618      	movlt	r0, r3
 800fcec:	e7a6      	b.n	800fc3c <_printf_i+0x164>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	4632      	mov	r2, r6
 800fcf2:	4649      	mov	r1, r9
 800fcf4:	4640      	mov	r0, r8
 800fcf6:	47d0      	blx	sl
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	d09d      	beq.n	800fc38 <_printf_i+0x160>
 800fcfc:	3501      	adds	r5, #1
 800fcfe:	68e3      	ldr	r3, [r4, #12]
 800fd00:	9903      	ldr	r1, [sp, #12]
 800fd02:	1a5b      	subs	r3, r3, r1
 800fd04:	42ab      	cmp	r3, r5
 800fd06:	dcf2      	bgt.n	800fcee <_printf_i+0x216>
 800fd08:	e7eb      	b.n	800fce2 <_printf_i+0x20a>
 800fd0a:	2500      	movs	r5, #0
 800fd0c:	f104 0619 	add.w	r6, r4, #25
 800fd10:	e7f5      	b.n	800fcfe <_printf_i+0x226>
 800fd12:	bf00      	nop
 800fd14:	080101f9 	.word	0x080101f9
 800fd18:	0801020a 	.word	0x0801020a

0800fd1c <memmove>:
 800fd1c:	4288      	cmp	r0, r1
 800fd1e:	b510      	push	{r4, lr}
 800fd20:	eb01 0402 	add.w	r4, r1, r2
 800fd24:	d902      	bls.n	800fd2c <memmove+0x10>
 800fd26:	4284      	cmp	r4, r0
 800fd28:	4623      	mov	r3, r4
 800fd2a:	d807      	bhi.n	800fd3c <memmove+0x20>
 800fd2c:	1e43      	subs	r3, r0, #1
 800fd2e:	42a1      	cmp	r1, r4
 800fd30:	d008      	beq.n	800fd44 <memmove+0x28>
 800fd32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd3a:	e7f8      	b.n	800fd2e <memmove+0x12>
 800fd3c:	4402      	add	r2, r0
 800fd3e:	4601      	mov	r1, r0
 800fd40:	428a      	cmp	r2, r1
 800fd42:	d100      	bne.n	800fd46 <memmove+0x2a>
 800fd44:	bd10      	pop	{r4, pc}
 800fd46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd4e:	e7f7      	b.n	800fd40 <memmove+0x24>

0800fd50 <_sbrk_r>:
 800fd50:	b538      	push	{r3, r4, r5, lr}
 800fd52:	4d06      	ldr	r5, [pc, #24]	; (800fd6c <_sbrk_r+0x1c>)
 800fd54:	2300      	movs	r3, #0
 800fd56:	4604      	mov	r4, r0
 800fd58:	4608      	mov	r0, r1
 800fd5a:	602b      	str	r3, [r5, #0]
 800fd5c:	f7f1 fd1e 	bl	800179c <_sbrk>
 800fd60:	1c43      	adds	r3, r0, #1
 800fd62:	d102      	bne.n	800fd6a <_sbrk_r+0x1a>
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	b103      	cbz	r3, 800fd6a <_sbrk_r+0x1a>
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	bd38      	pop	{r3, r4, r5, pc}
 800fd6c:	20002ae0 	.word	0x20002ae0

0800fd70 <memcpy>:
 800fd70:	440a      	add	r2, r1
 800fd72:	4291      	cmp	r1, r2
 800fd74:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd78:	d100      	bne.n	800fd7c <memcpy+0xc>
 800fd7a:	4770      	bx	lr
 800fd7c:	b510      	push	{r4, lr}
 800fd7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd86:	4291      	cmp	r1, r2
 800fd88:	d1f9      	bne.n	800fd7e <memcpy+0xe>
 800fd8a:	bd10      	pop	{r4, pc}

0800fd8c <_realloc_r>:
 800fd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd90:	4680      	mov	r8, r0
 800fd92:	4614      	mov	r4, r2
 800fd94:	460e      	mov	r6, r1
 800fd96:	b921      	cbnz	r1, 800fda2 <_realloc_r+0x16>
 800fd98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9c:	4611      	mov	r1, r2
 800fd9e:	f7ff bc49 	b.w	800f634 <_malloc_r>
 800fda2:	b92a      	cbnz	r2, 800fdb0 <_realloc_r+0x24>
 800fda4:	f7ff fbda 	bl	800f55c <_free_r>
 800fda8:	4625      	mov	r5, r4
 800fdaa:	4628      	mov	r0, r5
 800fdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb0:	f000 f81b 	bl	800fdea <_malloc_usable_size_r>
 800fdb4:	4284      	cmp	r4, r0
 800fdb6:	4607      	mov	r7, r0
 800fdb8:	d802      	bhi.n	800fdc0 <_realloc_r+0x34>
 800fdba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdbe:	d812      	bhi.n	800fde6 <_realloc_r+0x5a>
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	4640      	mov	r0, r8
 800fdc4:	f7ff fc36 	bl	800f634 <_malloc_r>
 800fdc8:	4605      	mov	r5, r0
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	d0ed      	beq.n	800fdaa <_realloc_r+0x1e>
 800fdce:	42bc      	cmp	r4, r7
 800fdd0:	4622      	mov	r2, r4
 800fdd2:	4631      	mov	r1, r6
 800fdd4:	bf28      	it	cs
 800fdd6:	463a      	movcs	r2, r7
 800fdd8:	f7ff ffca 	bl	800fd70 <memcpy>
 800fddc:	4631      	mov	r1, r6
 800fdde:	4640      	mov	r0, r8
 800fde0:	f7ff fbbc 	bl	800f55c <_free_r>
 800fde4:	e7e1      	b.n	800fdaa <_realloc_r+0x1e>
 800fde6:	4635      	mov	r5, r6
 800fde8:	e7df      	b.n	800fdaa <_realloc_r+0x1e>

0800fdea <_malloc_usable_size_r>:
 800fdea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdee:	1f18      	subs	r0, r3, #4
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	bfbc      	itt	lt
 800fdf4:	580b      	ldrlt	r3, [r1, r0]
 800fdf6:	18c0      	addlt	r0, r0, r3
 800fdf8:	4770      	bx	lr
	...

0800fdfc <_init>:
 800fdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfe:	bf00      	nop
 800fe00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe02:	bc08      	pop	{r3}
 800fe04:	469e      	mov	lr, r3
 800fe06:	4770      	bx	lr

0800fe08 <_fini>:
 800fe08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0a:	bf00      	nop
 800fe0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe0e:	bc08      	pop	{r3}
 800fe10:	469e      	mov	lr, r3
 800fe12:	4770      	bx	lr
